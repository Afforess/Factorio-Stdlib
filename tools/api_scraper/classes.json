{
"LuaAISettings": {
"name": "LuaAISettings",
"type": "LuaAISettings",
"doc": "Collection of settings for overriding default ai behavior.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"allow_destroy_when_commands_fail": {
"name": "allow_destroy_when_commands_fail",
"type": "boolean",
"mode": "[RW]",
"doc": "If enabled, units that repeatedly fail to succeed at commands will be destroyed.  \n"
},
"allow_try_return_to_spawner": {
"name": "allow_try_return_to_spawner",
"type": "boolean",
"mode": "[RW]",
"doc": "If enabled, units that have nothing else to do will attempt to return to a spawner.  \n"
},
"do_separation": {
"name": "do_separation",
"type": "boolean",
"mode": "[RW]",
"doc": "If enabled, units will try to separate themselves from nearby friendly units.  \n"
},
"path_resolution_modifier": {
"name": "path_resolution_modifier",
"type": "int8",
"mode": "[RW]",
"doc": "The pathing resolution modifier, must be between -8 and 8.  \n"
}
},
"inherits": []
},
"LuaAccumulatorControlBehavior": {
"name": "LuaAccumulatorControlBehavior",
"type": "LuaAccumulatorControlBehavior",
"doc": "Control behavior for accumulators.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"output_signal": {
"name": "output_signal",
"type": "SignalID",
"mode": "[RW]"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaAchievementPrototype": {
"name": "LuaAchievementPrototype",
"type": "LuaAchievementPrototype",
"doc": "Prototype of a achievement.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"allowed_without_fight": {
"name": "allowed_without_fight",
"type": "boolean",
"mode": "[R]"
},
"hidden": {
"name": "hidden",
"type": "boolean",
"mode": "[R]"
}
},
"inherits": []
},
"LuaAmmoCategoryPrototype": {
"name": "LuaAmmoCategoryPrototype",
"type": "LuaAmmoCategoryPrototype",
"doc": "Prototype of a ammo category.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"bonus_gui_order": {
"name": "bonus_gui_order",
"type": "string",
"mode": "[R]"
}
},
"inherits": []
},
"LuaArithmeticCombinatorControlBehavior": {
"name": "LuaArithmeticCombinatorControlBehavior",
"type": "LuaArithmeticCombinatorControlBehavior",
"doc": "Control behavior for arithmetic combinators.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"parameters": {
"name": "parameters",
"type": "ArithmeticCombinatorParameters",
"mode": "[RW]",
"doc": "The arithmetic combinator parameters.  \n **Note:** ````parameters```` may be ````nil```` in order to clear the parameters."
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
},
"get_signal_last_tick": {
"name": "get_signal_last_tick",
"returns": "int",
"args": {
"signal": {
"name": "signal",
"type": "SignalID",
"doc": "signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to get"
}
},
"type": "function",
"doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exist.  \n  \n**Parameters**  \nsignal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to get  \n  \n  \n**Return value**  \nThe value or ````nil```` if none."
},
"signals_last_tick": {
"name": "signals_last_tick",
"type": "array ofSignal",
"mode": "[R]",
"doc": "The circuit network signals sent by this combinator last tick.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity",
"Inherited from LuaCombinatorControlBehavior : get_signal_last_tick , signals_last_tick"
]
},
"LuaAutoplaceControlPrototype": {
"name": "LuaAutoplaceControlPrototype",
"type": "LuaAutoplaceControlPrototype",
"doc": "Prototype of an autoplace control.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"richness": {
"name": "richness",
"type": "boolean",
"mode": "[R]"
},
"control_order": {
"name": "control_order",
"type": "string",
"mode": "[R]"
},
"category": {
"name": "category",
"type": "string",
"mode": "[R]",
"doc": "Category name of this prototype.  \n"
}
},
"inherits": []
},
"LuaBootstrap": {
"name": "LuaBootstrap",
"type": "LuaBootstrap",
"doc": "Entry point for registering event handlers. It is accessible through the global object named ````script```` .  \n",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "This objects name.  \n"
},
"on_init": {
"name": "on_init",
"args": {
"f": {
"name": "f",
"type": "function()",
"doc": "f :: function() :  The function to call. Passing nil will\n   unregister the handler."
}
},
"type": "function",
"doc": "Register a callback to be run on mod init.\n This is called once when a new save game is created or once when a save file is loaded that previously didn't contain the mod.\n This is always called before other event handlers and is meant for setting up initial values that a mod will use for its lifetime.  \n  \n**Parameters**  \nf :: function() :  The function to call. Passing nil will\n   unregister the handler.  \n  \n"
},
"on_load": {
"name": "on_load",
"args": {
"f": {
"name": "f",
"type": "function()",
"doc": "f :: function() :  The function to call. Passing ````nil```` will unregister the handler."
}
},
"type": "function",
"doc": "Register a function to be run on module load.\n This is called every time a save file is loaded *except* for the instance when a mod is loaded into a save file that it previously wasn't part of.\n Additionally this is called when connecting to any other game in a multiplayer session and should never change the game state.  \n This is meant for 3 specific reasons and only 3:  \n In all other instances the [LuaBootstrap::on_init](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_init) , [LuaBootstrap::on_configuration_changed](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.on_configuration_changed) or migration scripts should be used.\n Doing any other logic when loading a save file can break the replay and cause desync issues if the mod is used in multiplayer.  \n  \n**Parameters**  \nf :: function() :  The function to call. Passing ````nil```` will unregister the handler.  \n  \n"
},
"on_configuration_changed": {
"name": "on_configuration_changed",
"args": {
"f": {
"name": "f",
"type": "function(ConfigurationChangedData)",
"doc": "f :: function( [ConfigurationChangedData](https://lua-api.factorio.com/latest/Concepts.html#ConfigurationChangedData) ) : \n   The handler for this event. Passing ````nil```` will unregister the handler."
}
},
"type": "function",
"doc": "Register a function to be run when mod configuration changes.\n This is called any time the game version changes, prototypes change, startup mod settings change, and any time mod versions change including adding or removing mods.  \n  \n**Parameters**  \nf :: function( [ConfigurationChangedData](https://lua-api.factorio.com/latest/Concepts.html#ConfigurationChangedData) ) : \n   The handler for this event. Passing ````nil```` will unregister the handler.  \n  \n"
},
"on_event": {
"name": "on_event",
"args": {
"event": {
"name": "event",
"type": "defines.eventsorarray ofdefines.eventsorstring",
"doc": "event :: [defines.events](https://lua-api.factorio.com/latest/defines.html#defines.events) or array of [defines.events](https://lua-api.factorio.com/latest/defines.html#defines.events) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The events or custom-input name to invoke the handler on"
},
"f": {
"name": "f",
"type": "function(Event)",
"doc": "f :: function( Event ) :  The handler to run. Passing nil will unregister the handler. The handler\n   will receive a table that contains the key ````name```` (of type [defines.events](https://lua-api.factorio.com/latest/defines.html#defines.events) ) specifying the name\n   of the event it was called to handle, and ````tick```` that specifies when the event was created. This table will\n   also contain other fields, depending on the type of the event. See [the list of Factorio events](https://lua-api.factorio.com/latest/events.html) for a listing of these additional fields."
},
"filters": {
"name": "filters",
"type": "Filters",
"doc": "filters :: Filters (optional) :  The filters for this single event registration.\n   See [the list of event filters](https://lua-api.factorio.com/latest/Event-Filters.html) for a listing of these filters."
}
},
"type": "function",
"doc": "Register a handler to run on event or events.  \n  \n**Parameters**  \n* event :: [defines.events](https://lua-api.factorio.com/latest/defines.html#defines.events) or array of [defines.events](https://lua-api.factorio.com/latest/defines.html#defines.events) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The events or custom-input name to invoke the handler on  \n* f :: function( Event ) :  The handler to run. Passing nil will unregister the handler. The handler\n   will receive a table that contains the key ````name```` (of type [defines.events](https://lua-api.factorio.com/latest/defines.html#defines.events) ) specifying the name\n   of the event it was called to handle, and ````tick```` that specifies when the event was created. This table will\n   also contain other fields, depending on the type of the event. See [the list of Factorio events](https://lua-api.factorio.com/latest/events.html) for a listing of these additional fields.  \n* filters :: Filters (optional) :  The filters for this single event registration.\n   See [the list of event filters](https://lua-api.factorio.com/latest/Event-Filters.html) for a listing of these filters.  \n  \n"
},
"on_nth_tick": {
"name": "on_nth_tick",
"args": {
"tick": {
"name": "tick",
"type": "uintorarray ofuint",
"doc": "tick :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) or array of [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The nth-tick(s) to invoke the handler on. Passing ````nil```` as the only parameter will unregister all nth-tick handlers."
},
"f": {
"name": "f",
"type": "function(NthTickEvent)",
"doc": "f :: function( [NthTickEvent](https://lua-api.factorio.com/latest/Concepts.html#NthTickEvent) ) :  The handler to run. Passing ````nil```` will unregister the handler for the provided ticks."
}
},
"type": "function",
"doc": "Register a handler to run every nth tick(s). When the game is on tick 0 it will trigger all registered handlers.  \n  \n**Parameters**  \n* tick :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) or array of [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The nth-tick(s) to invoke the handler on. Passing ````nil```` as the only parameter will unregister all nth-tick handlers.  \n* f :: function( [NthTickEvent](https://lua-api.factorio.com/latest/Concepts.html#NthTickEvent) ) :  The handler to run. Passing ````nil```` will unregister the handler for the provided ticks.  \n  \n"
},
"register_on_entity_destroyed": {
"name": "register_on_entity_destroyed",
"returns": "uint64",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to register."
}
},
"type": "function",
"doc": "Registers an entity so that after it's destroyed [on_entity_destroyed](https://lua-api.factorio.com/latest/events.html#on_entity_destroyed) is called.  \n  \n**Parameters**  \nentity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to register.  \n  \n  \n**Return value**  \nThe registration number."
},
"generate_event_name": {
"name": "generate_event_name",
"returns": "uint",
"type": "function",
"doc": "Generate a new, unique event ID.  \n  \n**Return value**  \nThe new ID"
},
"get_event_handler": {
"name": "get_event_handler",
"args": {
"event": {
"name": "event",
"type": "uint",
"doc": "event :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The event identifier to get a handler for"
}
},
"type": "function",
"doc": "Find the event handler for an event.  \n  \n**Parameters**  \nevent :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The event identifier to get a handler for  \n  \n  \n**Return value**  \nReference to the function currently registered as the handler."
},
"get_event_order": {
"name": "get_event_order",
"type": "function",
"doc": "Gets the mod event order.\n type(string)  \n"
},
"set_event_filter": {
"name": "set_event_filter",
"args": {
"event": {
"name": "event",
"type": "uint",
"doc": "event :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  ID of the event to filter."
},
"filters": {
"name": "filters",
"type": "Filters",
"doc": "filters :: Filters (optional) :  The [filters](https://lua-api.factorio.com/latest/Event-Filters.html) or ````nil```` to clear the filters"
}
},
"type": "function",
"doc": "Sets the filters for the given event.  \n  \n**Parameters**  \n* event :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  ID of the event to filter.  \n* filters :: Filters (optional) :  The [filters](https://lua-api.factorio.com/latest/Event-Filters.html) or ````nil```` to clear the filters  \n  \n"
},
"get_event_filter": {
"name": "get_event_filter",
"returns": "table",
"args": {
"event": {
"name": "event",
"type": "uint",
"doc": "event :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  ID of the event to get."
}
},
"type": "function",
"doc": "Gets the filters for the given event.  \n  \n**Parameters**  \nevent :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  ID of the event to get.  \n  \n  \n**Return value**  \nThe filters or ````nil```` if none are defined."
},
"raise_event": {
"name": "raise_event",
"args": {
"event": {
"name": "event",
"type": "uint",
"doc": "event :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  ID of the event to raise"
},
"table": {
"name": "table",
"doc": "table :  Table with extra data. This table will be passed to the event handler."
}
},
"type": "function",
"doc": "Raise an event. Only events generated with [LuaBootstrap::generate_event_name](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.generate_event_name) and the following can be raised: [on_console_chat](https://lua-api.factorio.com/latest/events.html#on_console_chat) [on_player_crafted_item](https://lua-api.factorio.com/latest/events.html#on_player_crafted_item) [on_player_fast_transferred](https://lua-api.factorio.com/latest/events.html#on_player_fast_transferred) [on_biter_base_built](https://lua-api.factorio.com/latest/events.html#on_biter_base_built) [on_market_item_purchased](https://lua-api.factorio.com/latest/events.html#on_market_item_purchased) [script_raised_built](https://lua-api.factorio.com/latest/events.html#script_raised_built) [script_raised_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy) [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive) [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles)  \n  \n**Parameters**  \n* event :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  ID of the event to raise  \n* table :  Table with extra data. This table will be passed to the event handler.  \n  \n"
},
"raise_console_chat": {
"name": "raise_console_chat",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [on_console_chat](https://lua-api.factorio.com/latest/events.html#on_console_chat)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"raise_player_crafted_item": {
"name": "raise_player_crafted_item",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [on_player_crafted_item](https://lua-api.factorio.com/latest/events.html#on_player_crafted_item)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"raise_player_fast_transferred": {
"name": "raise_player_fast_transferred",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [on_player_fast_transferred](https://lua-api.factorio.com/latest/events.html#on_player_fast_transferred)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"raise_biter_base_built": {
"name": "raise_biter_base_built",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [on_biter_base_built](https://lua-api.factorio.com/latest/events.html#on_biter_base_built)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"raise_market_item_purchased": {
"name": "raise_market_item_purchased",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [on_market_item_purchased](https://lua-api.factorio.com/latest/events.html#on_market_item_purchased)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"raise_script_built": {
"name": "raise_script_built",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [script_raised_built](https://lua-api.factorio.com/latest/events.html#script_raised_built)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"raise_script_destroy": {
"name": "raise_script_destroy",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [script_raised_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"raise_script_revive": {
"name": "raise_script_revive",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"raise_script_set_tiles": {
"name": "raise_script_set_tiles",
"args": {
"table": {
"name": "table",
"type": "RaiseEventParameters",
"doc": "table :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)"
}
},
"type": "function",
"doc": "Raises [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles)  \n  \n**Parameters**  \ntable :: [RaiseEventParameters](https://lua-api.factorio.com/latest/Concepts.html#RaiseEventParameters)  \n  \n"
},
"mod_name": {
"name": "mod_name",
"type": "string",
"mode": "[R]",
"doc": "The name of the mod from the environment this is used in.  \n"
},
"active_mods": {
"name": "active_mods",
"type": "dictionarystring\u2192string",
"mode": "[R]",
"doc": "The active mods versions. The keys are mod names, the values are the versions.  \n Example This will print the names and versions of active mods to player p's console. ````for\u00a0name,\u00a0version\u00a0in\u00a0pairs(script.active_mods)\u00a0do p.print(name\u00a0..\u00a0\"\u00a0version\u00a0\"\u00a0..\u00a0version) end````"
}
},
"inherits": []
},
"LuaBurner": {
"name": "LuaBurner",
"type": "LuaBurner",
"doc": "A reference to the burner energy source owned by a specific [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [LuaEquipment](https://lua-api.factorio.com/latest/LuaEquipment.html) .  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"owner": {
"name": "owner",
"type": "LuaEntityorLuaEquipment",
"mode": "[R]",
"doc": "The owner of this burner energy source  \n"
},
"inventory": {
"name": "inventory",
"type": "LuaInventory",
"mode": "[R]",
"doc": "The fuel inventory.  \n"
},
"burnt_result_inventory": {
"name": "burnt_result_inventory",
"type": "LuaInventory",
"mode": "[R]",
"doc": "The burnt result inventory.  \n"
},
"heat": {
"name": "heat",
"type": "double",
"mode": "[RW]"
},
"heat_capacity": {
"name": "heat_capacity",
"type": "double",
"mode": "[R]"
},
"remaining_burning_fuel": {
"name": "remaining_burning_fuel",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** Writing will silently do nothing if there's no [LuaBurner::currently_burning](https://lua-api.factorio.com/latest/LuaBurner.html#LuaBurner.currently_burning) set."
},
"currently_burning": {
"name": "currently_burning",
"type": "LuaItemPrototype",
"mode": "[RW]",
"doc": "**Note:** Writing automatically handles correcting [LuaBurner::remaining_burning_fuel](https://lua-api.factorio.com/latest/LuaBurner.html#LuaBurner.remaining_burning_fuel) ."
},
"fuel_categories": {
"name": "fuel_categories",
"type": "dictionarystring\u2192boolean",
"mode": "[R]",
"doc": "The fuel categories this burner uses.  \n **Note:** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
}
},
"inherits": []
},
"LuaBurnerPrototype": {
"name": "LuaBurnerPrototype",
"type": "LuaBurnerPrototype",
"doc": "Prototype of a burner energy source.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"emissions": {
"name": "emissions",
"type": "double",
"mode": "[R]"
},
"render_no_network_icon": {
"name": "render_no_network_icon",
"type": "boolean",
"mode": "[R]"
},
"render_no_power_icon": {
"name": "render_no_power_icon",
"type": "boolean",
"mode": "[R]"
},
"effectivity": {
"name": "effectivity",
"type": "double",
"mode": "[R]"
},
"fuel_inventory_size": {
"name": "fuel_inventory_size",
"type": "uint",
"mode": "[R]"
},
"burnt_inventory_size": {
"name": "burnt_inventory_size",
"type": "uint",
"mode": "[R]"
},
"smoke": {
"name": "smoke",
"type": "array ofSmokeSource",
"mode": "[R]",
"doc": "The smoke sources for this burner prototype if any.  \n"
},
"light_flicker": {
"name": "light_flicker",
"type": "table",
"mode": "[R]",
"doc": "The light flicker definition for this burner prototype if any.  \n Table with the following fields:   \n  * minimum_intensity :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * maximum_intensity :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * derivation_change_frequency :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * derivation_change_deviation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * border_fix_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * minimum_light_size :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * light_intensity_to_size_coefficient :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n"
},
"fuel_categories": {
"name": "fuel_categories",
"type": "dictionarystring\u2192boolean",
"mode": "[R]",
"doc": "**Note:** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
}
},
"inherits": []
},
"LuaChunkIterator": {
"name": "LuaChunkIterator",
"type": "LuaChunkIterator",
"doc": "A chunk iterator can be used for iterating chunks coordinates of a surface.  \n The returned type is a [ChunkPositionAndArea](https://lua-api.factorio.com/latest/Concepts.html#ChunkPositionAndArea) containing the chunk coordinates and its area.  \n Example ````for\u00a0chunk\u00a0in\u00a0some_surface.get_chunks()\u00a0do game.player.print(\"x:\u00a0\"\u00a0..\u00a0chunk.x\u00a0..\u00a0\",\u00a0y:\u00a0\"\u00a0..\u00a0chunk.y) game.player.print(\"area:\u00a0\"\u00a0..\u00a0serpent.line(chunk.area)) end````",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"operator ": {
"name": "operator ",
"returns": "ChunkPositionAndArea",
"type": "function",
"doc": "Get the next chunk position or ````nil```` , and increments the iterator.  \n"
}
},
"inherits": []
},
"LuaCircuitNetwork": {
"name": "LuaCircuitNetwork",
"type": "LuaCircuitNetwork",
"doc": "A circuit network associated with a given entity, connector, and wire type.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_signal": {
"name": "get_signal",
"returns": "int",
"args": {
"signal": {
"name": "signal",
"type": "SignalID",
"doc": "signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to read."
}
},
"type": "function",
"doc": "**Parameters**  \nsignal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to read.  \n  \n  \n**Return value**  \nThe current value of the signal."
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this circuit network reference is associated with  \n"
},
"wire_type": {
"name": "wire_type",
"type": "defines.wire_type",
"mode": "[R]",
"doc": "The wire type this network is associated with.  \n"
},
"circuit_connector_id": {
"name": "circuit_connector_id",
"type": "defines.circuit_connector_id",
"mode": "[R]",
"doc": "The circuit connector ID on the associated entity this network was gotten from.  \n"
},
"signals": {
"name": "signals",
"type": "array ofSignal",
"mode": "[R]",
"doc": "The circuit network signals last tick. ````nil```` if there are no signals.  \n"
},
"network_id": {
"name": "network_id",
"type": "uint",
"mode": "[R]",
"doc": "The circuit networks ID.  \n"
},
"connected_circuit_count": {
"name": "connected_circuit_count",
"type": "uint",
"mode": "[R]",
"doc": "The number of circuits connected to this network.  \n"
}
},
"inherits": []
},
"LuaCombinatorControlBehavior": {
"name": "LuaCombinatorControlBehavior",
"type": "LuaCombinatorControlBehavior",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_signal_last_tick": {
"name": "get_signal_last_tick",
"returns": "int",
"args": {
"signal": {
"name": "signal",
"type": "SignalID",
"doc": "signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to get"
}
},
"type": "function",
"doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exist.  \n  \n**Parameters**  \nsignal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to get  \n  \n  \n**Return value**  \nThe value or ````nil```` if none."
},
"signals_last_tick": {
"name": "signals_last_tick",
"type": "array ofSignal",
"mode": "[R]",
"doc": "The circuit network signals sent by this combinator last tick.  \n"
}
},
"inherits": []
},
"LuaCommandProcessor": {
"name": "LuaCommandProcessor",
"type": "LuaCommandProcessor",
"doc": "Custom game console commands. Similar to event subscriptions, added commands don't persist through save and load.  \n",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "This objects name.  \n"
},
"add_command": {
"name": "add_command",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the command (case sensitive)."
},
"help": {
"name": "help",
"type": "LocalisedString",
"doc": "help :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  The localised help message."
},
"function": {
"name": "function",
"type": "function",
"doc": "function :: function :  The function that will be called when this command is invoked."
}
},
"type": "function",
"doc": "Add a command.  \n The function registered to the command is passed a table when the command is invoked. The table contains:  \n  \n**Parameters**  \n* name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the command (case sensitive).  \n* help :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  The localised help message.  \n* function :: function :  The function that will be called when this command is invoked.  \n  \n"
},
"remove_command": {
"name": "remove_command",
"returns": "boolean",
"type": "function",
"doc": "Removes a registered command  \n  \n**Parameters**  \n  \n  \n**Return value**  \nIf the command was removed. ````False```` if the command didn't exist."
},
"commands": {
"name": "commands",
"type": "dictionarystring\u2192LocalisedString",
"mode": "[R]",
"doc": "Commands registered by scripts through ````LuaCommandProcessor```` .  \n"
},
"game_commands": {
"name": "game_commands",
"type": "dictionarystring\u2192LocalisedString",
"mode": "[R]",
"doc": "Builtin commands of the core game.  \n"
}
},
"inherits": []
},
"LuaConstantCombinatorControlBehavior": {
"name": "LuaConstantCombinatorControlBehavior",
"type": "LuaConstantCombinatorControlBehavior",
"doc": "Control behavior for constant combinators.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"set_signal": {
"name": "set_signal",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
},
"signal": {
"name": "signal",
"type": "Signal",
"doc": "signal :: [Signal](https://lua-api.factorio.com/latest/Concepts.html#Signal)"
}
},
"type": "function",
"doc": "Sets the signal at the given index  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n* signal :: [Signal](https://lua-api.factorio.com/latest/Concepts.html#Signal)  \n  \n"
},
"get_signal": {
"name": "get_signal",
"returns": "Signal",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Gets the signal at the given index. Returned [Signal](https://lua-api.factorio.com/latest/Concepts.html#Signal) will not contain signal if none is set for the index.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"parameters": {
"name": "parameters",
"type": "ConstantCombinatorParameters",
"mode": "[RW]",
"doc": "The constant combinator parameters  \n **Note:** Setting to ````nil```` clears the parameters."
},
"enabled": {
"name": "enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Turns this constant combinator on and off.  \n"
},
"signals_count": {
"name": "signals_count",
"type": "uint",
"mode": "[R]",
"doc": "The number of signals this constant combinator supports  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaContainerControlBehavior": {
"name": "LuaContainerControlBehavior",
"type": "LuaContainerControlBehavior",
"doc": "Control behavior for container entities.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaControl": {
"name": "LuaControl",
"type": "LuaControl",
"doc": "This is an abstract base class containing the common functionality between [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) and entities\n (see [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) ). When accessing player-related functions through a [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) , it must refer to a character\n entity.  \n",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_inventory": {
"name": "get_inventory",
"returns": "LuaInventory",
"args": {
"inventory": {
"name": "inventory",
"type": "defines.inventory",
"doc": "inventory :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)"
}
},
"type": "function",
"doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary\n one, like the module slots or logistic trash slots.  \n  \n**Parameters**  \ninventory :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n  \n  \n**Return value**  \nor ````nil```` if this entity doesn't have an inventory with the given index."
},
"get_main_inventory": {
"name": "get_main_inventory",
"returns": "LuaInventory",
"type": "function",
"doc": "Gets the main inventory for this character or player if this is a character or player.  \n  \n**Return value**  \nor ````nil```` if this entity is not a character or player."
},
"can_insert": {
"name": "can_insert",
"returns": "boolean",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items that would be inserted."
}
},
"type": "function",
"doc": "Can at least some items be inserted?  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items that would be inserted.  \n  \n  \n**Return value**  \n````true```` if at least a part of the given items could be inserted into this inventory."
},
"insert": {
"name": "insert",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert."
}
},
"type": "function",
"doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"best\"\n inventory is chosen automatically.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert.  \n  \n  \n**Return value**  \nNumber of items actually inserted."
},
"set_gui_arrow": {
"name": "set_gui_arrow",
"args": {
"type": {
"name": "type",
"type": "string",
"doc": "Table with the following fields:   \n  * type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Where to point to. This field determines what other fields are mandatory.\n     May be ````\"nowhere\"```` , ````\"goal\"```` , ````\"entity_info\"```` , ````\"active_window\"```` , ````\"entity\"```` , ````\"position\"```` , ````\"crafting_queue\"```` , or ````\"item_stack\"```` .  \n  * Additional ````type```` -specific parameters   \n    + entity   \n      - entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n    + position   \n      - position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n    + crafting_queue   \n      - crafting_queueindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n    + item_stack   \n      - inventory_index :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n      - item_stack_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n      - source :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  May be either ````\"player\"```` or ````\"target\"```` .  \n  \n  \n"
}
},
"type": "function",
"doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````control.lua```` in the campaign missions.  \n  \n**Parameters**  \nTable with the following fields:   \n  + type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Where to point to. This field determines what other fields are mandatory.\n     May be ````\"nowhere\"```` , ````\"goal\"```` , ````\"entity_info\"```` , ````\"active_window\"```` , ````\"entity\"```` , ````\"position\"```` , ````\"crafting_queue\"```` , or ````\"item_stack\"```` .  \n  + Additional ````type```` -specific parameters   \n    - entity   \n      * entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n    - position   \n      * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n    - crafting_queue   \n      * crafting_queueindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n    - item_stack   \n      * inventory_index :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n      * item_stack_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n      * source :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  May be either ````\"player\"```` or ````\"target\"```` .  \n  \n  \n  \n  \n"
},
"clear_gui_arrow": {
"name": "clear_gui_arrow",
"type": "function",
"doc": "Removes the arrow created by ````set_gui_arrow```` .  \n"
},
"get_item_count": {
"name": "get_item_count",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items."
}
},
"type": "function",
"doc": "Get the number of all or some items in this entity.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items.  \n  \n"
},
"has_items_inside": {
"name": "has_items_inside",
"returns": "boolean",
"type": "function",
"doc": "Does this entity have any item inside it?  \n"
},
"can_reach_entity": {
"name": "can_reach_entity",
"returns": "boolean",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
}
},
"type": "function",
"doc": "Can a given entity be opened or accessed?  \n  \n**Parameters**  \nentity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n"
},
"clear_items_inside": {
"name": "clear_items_inside",
"type": "function",
"doc": "Remove all items from this entity.  \n"
},
"remove_item": {
"name": "remove_item",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove."
}
},
"type": "function",
"doc": "Remove items from this entity.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove.  \n  \n  \n**Return value**  \nNumber of items actually removed."
},
"teleport": {
"name": "teleport",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to teleport to."
},
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Surface to teleport to. If not given, will teleport\n   to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface."
}
},
"type": "function",
"doc": "Teleport the entity to a given position, possibly on another surface.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to teleport to.  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Surface to teleport to. If not given, will teleport\n   to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.  \n  \n  \n**Return value**  \n````true```` when the entity was successfully teleported."
},
"update_selected_entity": {
"name": "update_selected_entity",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position of the entity to select"
}
},
"type": "function",
"doc": "Select an entity, as if by hovering the mouse above it.  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position of the entity to select  \n  \n"
},
"clear_selected_entity": {
"name": "clear_selected_entity",
"type": "function",
"doc": "Unselect any selected entity.  \n"
},
"disable_flashlight": {
"name": "disable_flashlight",
"type": "function",
"doc": "Disable the flashlight.  \n"
},
"enable_flashlight": {
"name": "enable_flashlight",
"type": "function",
"doc": "Enable the flashlight.  \n"
},
"is_flashlight_enabled": {
"name": "is_flashlight_enabled",
"type": "function",
"doc": "Is the flashlight enabled.  \n"
},
"get_craftable_count": {
"name": "get_craftable_count",
"returns": "uint",
"args": {
"recipe": {
"name": "recipe",
"type": "stringorLuaRecipe",
"doc": "recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe."
}
},
"type": "function",
"doc": "Gets the count of the given recipe that can be crafted.  \n  \n**Parameters**  \nrecipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe.  \n  \n  \n**Return value**  \nThe count that can be crafted."
},
"begin_crafting": {
"name": "begin_crafting",
"returns": "uint",
"args": {
"count": {
"name": "count",
"type": "uint",
"doc": "  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to craft.  \n  * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe to craft.  \n  * silent :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n"
}
},
"type": "function",
"doc": "Begins crafting the given count of the given recipe  \n  \n**Parameters**  \n  \n  + count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to craft.  \n  + recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe to craft.  \n  + silent :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n  \n  \n  \n**Return value**  \nThe count that was actually started crafting."
},
"cancel_crafting": {
"name": "cancel_crafting",
"args": {
"options": {
"name": "options",
"type": "uint",
"doc": "options : :   \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index.  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to cancel crafting.  \n"
}
},
"type": "function",
"doc": "Cancels crafting the given count of the given crafting queue index  \n  \n**Parameters**  \noptions : :   \n  + index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index.  \n  + count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to cancel crafting.  \n  \n  \n"
},
"mine_entity": {
"name": "mine_entity",
"returns": "boolean",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to mine"
},
"force": {
"name": "force",
"type": "boolean",
"doc": "force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Forces mining the entity even if the items can't fit in the player."
}
},
"type": "function",
"doc": "Mines the given entity as if this player (or character) mined it.  \n  \n**Parameters**  \n* entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to mine  \n* force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Forces mining the entity even if the items can't fit in the player.  \n  \n  \n**Return value**  \nIf the mining succeeded."
},
"mine_tile": {
"name": "mine_tile",
"returns": "boolean",
"args": {
"tile": {
"name": "tile",
"type": "LuaTile",
"doc": "tile :: [LuaTile](https://lua-api.factorio.com/latest/LuaTile.html) :  The tile to mine."
}
},
"type": "function",
"doc": "Mines the given tile as if this player (or character) mined it.  \n  \n**Parameters**  \ntile :: [LuaTile](https://lua-api.factorio.com/latest/LuaTile.html) :  The tile to mine.  \n  \n  \n**Return value**  \nIf the mining succeeded."
},
"is_player": {
"name": "is_player",
"returns": "boolean",
"type": "function",
"doc": "When ````true```` control adapter is a LuaPlayer object, ````false```` for entities including characters with players  \n"
},
"open_technology_gui": {
"name": "open_technology_gui",
"args": {
"technology": {
"name": "technology",
"type": "TechnologySpecification",
"doc": "technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional) :  The technology to select after opening the GUI."
}
},
"type": "function",
"doc": "Open the technology GUI and select a given technology.  \n  \n**Parameters**  \ntechnology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional) :  The technology to select after opening the GUI.  \n  \n"
},
"set_personal_logistic_slot": {
"name": "set_personal_logistic_slot",
"returns": "boolean",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/"
},
"value": {
"name": "value",
"type": "PersonalLogisticParameters",
"doc": "value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)"
}
},
"type": "function",
"doc": "Sets the personal request and trash to the given values.  \n  \n**Parameters**  \n* slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/  \n* value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)  \n  \n  \n**Return value**  \nIf the slot was set."
},
"set_vehicle_logistic_slot": {
"name": "set_vehicle_logistic_slot",
"returns": "boolean",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/"
},
"value": {
"name": "value",
"type": "PersonalLogisticParameters",
"doc": "value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)"
}
},
"type": "function",
"doc": "Sets the vehicle logistic request and trash to the given values.  \n  \n**Parameters**  \n* slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/  \n* value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)  \n  \n  \n**Return value**  \nIf the slot was set."
},
"get_personal_logistic_slot": {
"name": "get_personal_logistic_slot",
"returns": "PersonalLogisticParameters",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get."
}
},
"type": "function",
"doc": "Sets the personal request and trash to the given values.  \n  \n**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get.  \n  \n"
},
"get_vehicle_logistic_slot": {
"name": "get_vehicle_logistic_slot",
"returns": "PersonalLogisticParameters",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get."
}
},
"type": "function",
"doc": "Sets the vehicle logistic request and trash to the given values.  \n  \n**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get.  \n  \n"
},
"clear_personal_logistic_slot": {
"name": "clear_personal_logistic_slot",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear."
}
},
"type": "function",
"doc": "**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear.  \n  \n"
},
"clear_vehicle_logistic_slot": {
"name": "clear_vehicle_logistic_slot",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear."
}
},
"type": "function",
"doc": "**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear.  \n  \n"
},
"is_cursor_blueprint": {
"name": "is_cursor_blueprint",
"returns": "boolean",
"type": "function",
"doc": "Returns whether the player is holding a blueprint, it takes into account a blueprint as an item as well as blueprint\n from the blueprint record from the blueprint library.\n Note that the is_cursor_blueprint and get_cursor_blueprint_entities refer to the currently selected blueprint, so\n it returns blueprint related information also when holding a blueprint book with a blueprint being selected in it.  \n"
},
"get_blueprint_entities": {
"name": "get_blueprint_entities",
"returns": "array ofblueprint entity",
"type": "function",
"doc": "Returns the same type of data as LuaItemStack::readBlueprintEntities, but works for the currently selected blueprint,\n regardless of it being in a blueprint book or picked from the blueprint library.  \n"
},
"surface": {
"name": "surface",
"type": "LuaSurface",
"mode": "[R]",
"doc": "The surface this entity is currently on.  \n"
},
"position": {
"name": "position",
"type": "Position",
"mode": "[R]",
"doc": "Current position of the entity.  \n"
},
"vehicle": {
"name": "vehicle",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The vehicle the player is currently sitting in; ````nil```` if none.  \n"
},
"force": {
"name": "force",
"type": "ForceSpecification",
"mode": "[RW]",
"doc": "The force of this entity. Reading will always give a [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) , but it is possible to\n assign either [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the force.  \n"
},
"selected": {
"name": "selected",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The currently selected entity; ````nil```` if none. Assigning an entity will select it if selectable otherwise clears selection.  \n"
},
"opened": {
"name": "opened",
"type": "LuaEntityorLuaItemStackorLuaEquipmentorLuaEquipmentGridorLuaPlayerorLuaGuiElementordefines.gui_type",
"mode": "[RW]",
"doc": "The GUI target the player currently has open; ````nil```` if none.  \n **Note:** Write supports any of the types. Read will return the entity, equipment, equipment-grid, player, element or nil."
},
"crafting_queue_size": {
"name": "crafting_queue_size",
"type": "uint",
"mode": "[R]",
"doc": "Size of the crafting queue.  \n"
},
"crafting_queue_progress": {
"name": "crafting_queue_progress",
"type": "double",
"mode": "[R]",
"doc": "The crafting queue progress [0-1]\n 0 when no recipe is being crafted.  \n"
},
"walking_state": {
"name": "walking_state",
"type": "table",
"mode": "[RW]",
"doc": "Current walking state.  \n It is a table with two fields:  \n   \n  * walking :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If ````false```` , the player is currently not walking; otherwise it's going somewhere  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) :  Direction where the player is walking  \n Example Make the player go north. Note that a one-shot action like this will only make the player walk for one tick. ````game.player.walking_state\u00a0=\u00a0{walking\u00a0=\u00a0true,\u00a0direction\u00a0=\u00a0defines.direction.north}````"
},
"riding_state": {
"name": "riding_state",
"type": "RidingState",
"mode": "[RW]",
"doc": "Current riding state of this car or the vehicle this player is riding in.  \n"
},
"mining_state": {
"name": "mining_state",
"type": "table",
"mode": "[RW]",
"doc": "Current mining state.  \n It is a table with two fields:  \n   \n  * mining :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Whether the player is mining at all  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n **Note:** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](https://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](https://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity) ."
},
"shooting_state": {
"name": "shooting_state",
"type": "table",
"mode": "[RW]",
"doc": "Current shooting state.  \n It is a table with two fields:  \n   \n  * state :: [defines.shooting](https://lua-api.factorio.com/latest/defines.html#defines.shooting) :  The current state  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position being shot at  \n"
},
"picking_state": {
"name": "picking_state",
"type": "boolean",
"mode": "[RW]",
"doc": "Current item-picking state.  \n"
},
"repair_state": {
"name": "repair_state",
"type": "table",
"mode": "[RW]",
"doc": "Current repair state.  \n It is a table with two fields:  \n   \n  * repairing :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  The current state  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position being repaired  \n"
},
"cursor_stack": {
"name": "cursor_stack",
"type": "LuaItemStack",
"mode": "[R]",
"doc": "The player's cursor stack, or ````nil```` if the player controller is a spectator.  \n"
},
"cursor_ghost": {
"name": "cursor_ghost",
"type": "ItemPrototypeSpecification",
"mode": "[RW]",
"doc": "The ghost prototype in the player's cursor.  \n **Note:** When read, it will be a [LuaItemPrototype](https://lua-api.factorio.com/latest/LuaItemPrototype.html) . **Note:** Items in the cursor stack will take priority over the cursor ghost."
},
"driving": {
"name": "driving",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the player is in a vehicle. Writing to this attribute puts the player in or out of a\n vehicle.  \n"
},
"crafting_queue": {
"name": "crafting_queue",
"type": "array ofCraftingQueueItem",
"mode": "[R]",
"doc": "Gets the current crafting queue items.  \n Each CraftingQueueItem is a table:  \n   \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index  \n  * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The recipe.  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count being crafted.  \n"
},
"following_robots": {
"name": "following_robots",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "The current combat robots following the character  \n **Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character(see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"cheat_mode": {
"name": "cheat_mode",
"type": "boolean",
"mode": "[RW]",
"doc": "When ````true```` hand crafting is free and instant  \n"
},
"character_crafting_speed_modifier": {
"name": "character_crafting_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_mining_speed_modifier": {
"name": "character_mining_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_additional_mining_categories": {
"name": "character_additional_mining_categories",
"type": "array ofstring",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_running_speed_modifier": {
"name": "character_running_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_build_distance_bonus": {
"name": "character_build_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_item_drop_distance_bonus": {
"name": "character_item_drop_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_reach_distance_bonus": {
"name": "character_reach_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_resource_reach_distance_bonus": {
"name": "character_resource_reach_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_item_pickup_distance_bonus": {
"name": "character_item_pickup_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_loot_pickup_distance_bonus": {
"name": "character_loot_pickup_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_inventory_slots_bonus": {
"name": "character_inventory_slots_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_trash_slot_count_bonus": {
"name": "character_trash_slot_count_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_maximum_following_robot_count_bonus": {
"name": "character_maximum_following_robot_count_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_health_bonus": {
"name": "character_health_bonus",
"type": "float",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_personal_logistic_requests_enabled": {
"name": "character_personal_logistic_requests_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "If personal logistic requests are enabled for this character or players character.  \n"
},
"vehicle_logistic_requests_enabled": {
"name": "vehicle_logistic_requests_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "If personal logistic requests are enabled for this vehicle (spidertron).  \n"
},
"opened_gui_type": {
"name": "opened_gui_type",
"type": "defines.gui_type",
"mode": "[R]",
"doc": "Returns the [defines.gui_type](https://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````nil```` .  \n"
},
"build_distance": {
"name": "build_distance",
"type": "uint",
"mode": "[R]",
"doc": "The build distance of this character or max uint when not a character or player connected to a character.  \n"
},
"drop_item_distance": {
"name": "drop_item_distance",
"type": "uint",
"mode": "[R]",
"doc": "The item drop distance of this character or max uint when not a character or player connected to a character.  \n"
},
"reach_distance": {
"name": "reach_distance",
"type": "uint",
"mode": "[R]",
"doc": "The reach distance of this character or max uint when not a character or player connected to a character.  \n"
},
"item_pickup_distance": {
"name": "item_pickup_distance",
"type": "double",
"mode": "[R]",
"doc": "The item pickup distance of this character or max double when not a character or player connected to a character.  \n"
},
"loot_pickup_distance": {
"name": "loot_pickup_distance",
"type": "double",
"mode": "[R]",
"doc": "The loot pickup distance of this character or max double when not a character or player connected to a character.  \n"
},
"resource_reach_distance": {
"name": "resource_reach_distance",
"type": "double",
"mode": "[R]",
"doc": "The resource reach distance of this character or max double when not a character or player connected to a character.  \n"
},
"in_combat": {
"name": "in_combat",
"type": "boolean",
"mode": "[R]",
"doc": "If this character entity is in combat.  \n"
},
"character_running_speed": {
"name": "character_running_speed",
"type": "double",
"mode": "[R]",
"doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting.  \n"
},
"character_mining_progress": {
"name": "character_mining_progress",
"type": "double",
"mode": "[R]",
"doc": "Gets the current mining progress between 0 and 1 of this character, or 0 if they aren't mining.  \n"
}
},
"inherits": []
},
"LuaControlBehavior": {
"name": "LuaControlBehavior",
"type": "LuaControlBehavior",
"doc": "The control behavior for an entity. Inserters have logistic network and circuit network behavior logic, lamps have circuit logic and so on. This is an abstract base class that concrete control behaviors inherit.",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": []
},
"LuaCustomChartTag": {
"name": "LuaCustomChartTag",
"type": "LuaCustomChartTag",
"doc": "A custom tag that shows on the map view.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"destroy": {
"name": "destroy",
"type": "function",
"doc": "Destroys this tag.  \n"
},
"icon": {
"name": "icon",
"type": "SignalID",
"mode": "[RW]"
},
"last_user": {
"name": "last_user",
"type": "LuaPlayer",
"mode": "[RW]",
"doc": "The player who last edited this tag.  \n"
},
"position": {
"name": "position",
"type": "Position",
"mode": "[R]",
"doc": "The position of this tag.  \n"
},
"text": {
"name": "text",
"type": "string",
"mode": "[RW]"
},
"tag_number": {
"name": "tag_number",
"type": "uint",
"mode": "[R]",
"doc": "The unique ID for this tag on this force.  \n"
},
"force": {
"name": "force",
"type": "LuaForce",
"mode": "[R]",
"doc": "The force this tag belongs to.  \n"
},
"surface": {
"name": "surface",
"type": "LuaSurface",
"mode": "[R]",
"doc": "The surface this tag belongs to.  \n"
}
},
"inherits": []
},
"LuaCustomInputPrototype": {
"name": "LuaCustomInputPrototype",
"type": "LuaCustomInputPrototype",
"doc": "Prototype of a custom input.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"key_sequence": {
"name": "key_sequence",
"type": "string",
"mode": "[R]",
"doc": "The default key sequence for this custom input.  \n"
},
"alternative_key_sequence": {
"name": "alternative_key_sequence",
"type": "string",
"mode": "[R]",
"doc": "The default alternative key sequence for this custom input. ````nil```` when not defined.  \n"
},
"linked_game_control": {
"name": "linked_game_control",
"type": "string",
"mode": "[R]",
"doc": "The linked game control name or ````nil```` .  \n"
},
"consuming": {
"name": "consuming",
"type": "string",
"mode": "[R]",
"doc": "The consuming type: ````\"none\"```` or ````\"game-only\"```` .  \n"
},
"enabled": {
"name": "enabled",
"type": "boolean",
"mode": "[R]",
"doc": "If this custom input is enabled. Disabled custom inputs exist but are not used by the game.  \n"
}
},
"inherits": []
},
"LuaCustomTable": {
"name": "LuaCustomTable",
"type": "LuaCustomTable",
"doc": "Lazily evaluated table.\n For performance reasons, we sometimes return a custom table-like type instead of a native Lua table. This custom\n type lazily constructs the necessary Lua wrappers of the corresponding C++ objects, therefore preventing their\n unnecessary construction in some cases.  \n There are some notable consequences to the usage of a custom table type rather than the native Lua table type:\n Iterating a custom table is only possible using the ````pairs```` Lua function; ````ipairs```` won't work. Another key\n difference is that custom tables cannot be serialised into a game save file -- if saving the game would require\n serialisation of a custom table, an error will be displayed and the game will not be saved.  \n Example In previous versions of Factorio, this would create a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) instance for every player in the game,\n   even though only one such wrapper is needed. In the current version, accessing [game.players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) by itself does not create any [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) instances; they are\n   created lazily when accessed. Therefore, this example only constructs one [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) instance, no matter\n   how many elements there are in ````game.players```` . Example ````game.players[\"Oxyd\"].character.die()```` Example Custom tables may be iterated using ````pairs```` . ````for\u00a0_,\u00a0p\u00a0in\u00a0pairs(game.players)\u00a0do\u00a0game.player.print(p.name);\u00a0end```` Example The following will produce no output because ````ipairs```` is not supported with custom tables. ````for\u00a0_,\u00a0p\u00a0in\u00a0ipairs(game.players)\u00a0do\u00a0game.player.print(p.name);\u00a0end\u00a0\u00a0--\u00a0incorrect;\u00a0use\u00a0pairs\u00a0instead```` Example This statement will execute successfully and ````global.p```` will be useable as one might expect. However, as soon\n   as the user tries to save the game, a \"LuaCustomTable cannot be serialized\" error will be shown. The game will\n   remain unsaveable so long as ````global.p```` refers to an instance of a custom table. ````global.p\u00a0=\u00a0game.players\u00a0\u00a0--\u00a0This\u00a0has\u00a0high\u00a0potential\u00a0to\u00a0make\u00a0the\u00a0game\u00a0unsaveable````",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"operator []": {
"name": "operator []",
"mode": "[RW]",
"doc": "Access an element of this custom table.  \n"
},
"operator #": {
"name": "operator #",
"type": "uint",
"mode": "[R]",
"doc": "Number of elements in this table.  \n"
}
},
"inherits": []
},
"LuaDamagePrototype": {
"name": "LuaDamagePrototype",
"type": "LuaDamagePrototype",
"doc": "Prototype of a damage.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"hidden": {
"name": "hidden",
"type": "boolean",
"mode": "[R]",
"doc": "Whether this damage type is hidden from entity tooltips.  \n"
}
},
"inherits": []
},
"LuaDeciderCombinatorControlBehavior": {
"name": "LuaDeciderCombinatorControlBehavior",
"type": "LuaDeciderCombinatorControlBehavior",
"doc": "Control behavior for decider combinators.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"parameters": {
"name": "parameters",
"type": "DeciderCombinatorParameters",
"mode": "[RW]",
"doc": "The decider combinator parameters  \n **Note:** Setting to ````nil```` clears the parameters."
},
"get_signal_last_tick": {
"name": "get_signal_last_tick",
"returns": "int",
"args": {
"signal": {
"name": "signal",
"type": "SignalID",
"doc": "signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to get"
}
},
"type": "function",
"doc": "Gets the value of a specific signal sent by this combinator behavior last tick or nil if the signal didn't exist.  \n  \n**Parameters**  \nsignal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to get  \n  \n  \n**Return value**  \nThe value or ````nil```` if none."
},
"signals_last_tick": {
"name": "signals_last_tick",
"type": "array ofSignal",
"mode": "[R]",
"doc": "The circuit network signals sent by this combinator last tick.  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaCombinatorControlBehavior : get_signal_last_tick , signals_last_tick",
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaDecorativePrototype": {
"name": "LuaDecorativePrototype",
"type": "LuaDecorativePrototype",
"doc": "Prototype of an optimized decorative.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"collision_box": {
"name": "collision_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The bounding box used for collision checking.  \n"
},
"collision_mask": {
"name": "collision_mask",
"type": "CollisionMask",
"mode": "[R]",
"doc": "The collision masks this decorative uses  \n"
},
"collision_mask_with_flags": {
"name": "collision_mask_with_flags",
"type": "CollisionMaskWithFlags",
"mode": "[R]"
},
"autoplace_specification": {
"name": "autoplace_specification",
"type": "AutoplaceSpecification",
"mode": "[R]",
"doc": "Autoplace specification for this decorative prototype. ````nil```` if none.  \n"
}
},
"inherits": []
},
"LuaElectricEnergySourcePrototype": {
"name": "LuaElectricEnergySourcePrototype",
"type": "LuaElectricEnergySourcePrototype",
"doc": "Prototype of an electric energy source.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"buffer_capacity": {
"name": "buffer_capacity",
"type": "double",
"mode": "[R]"
},
"usage_priority": {
"name": "usage_priority",
"type": "string",
"mode": "[R]"
},
"input_flow_limit": {
"name": "input_flow_limit",
"type": "double",
"mode": "[R]"
},
"output_flow_limit": {
"name": "output_flow_limit",
"type": "double",
"mode": "[R]"
},
"drain": {
"name": "drain",
"type": "double",
"mode": "[R]"
},
"emissions": {
"name": "emissions",
"type": "double",
"mode": "[R]"
},
"render_no_network_icon": {
"name": "render_no_network_icon",
"type": "boolean",
"mode": "[R]"
},
"render_no_power_icon": {
"name": "render_no_power_icon",
"type": "boolean",
"mode": "[R]"
}
},
"inherits": []
},
"LuaEntity": {
"name": "LuaEntity",
"type": "LuaEntity",
"doc": "The primary interface for interacting with entities through the Lua API.\n Entity is everything on the map except tiles.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_output_inventory": {
"name": "get_output_inventory",
"returns": "LuaInventory",
"type": "function",
"doc": "Gets the entities output inventory if it has one.  \n  \n**Return value**  \na reference to the entities output inventory."
},
"get_module_inventory": {
"name": "get_module_inventory",
"returns": "LuaInventory",
"type": "function",
"doc": "**Return value**  \nInventory for storing modules of this entity; ````nil```` if this entity has\n                       no module inventory."
},
"get_fuel_inventory": {
"name": "get_fuel_inventory",
"returns": "LuaInventory",
"type": "function",
"doc": "The fuel inventory for this entity or ````nil```` if this entity doesn't have a fuel inventory.  \n"
},
"get_burnt_result_inventory": {
"name": "get_burnt_result_inventory",
"returns": "LuaInventory",
"type": "function",
"doc": "The burnt result inventory for this entity or ````nil```` if this entity doesn't have a burnt result inventory.  \n"
},
"damage": {
"name": "damage",
"returns": "float",
"args": {
"damage": {
"name": "damage",
"type": "float",
"doc": "damage :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  The amount of damage to be done"
},
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force that will be doing the damage."
},
"type": {
"name": "type",
"type": "string",
"doc": "type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The type of damage to be done, defaults to \"impact\"."
},
"dealer": {
"name": "dealer",
"type": "LuaEntity",
"doc": "dealer :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  The entity to consider as the damage dealer."
}
},
"type": "function",
"doc": "Damages the entity.  \n  \n**Parameters**  \n* damage :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  The amount of damage to be done  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force that will be doing the damage.  \n* type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The type of damage to be done, defaults to \"impact\".  \n* dealer :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  The entity to consider as the damage dealer.  \n  \n  \n**Return value**  \nthe total damage actually applied after resistances.  \n_Can only be used if this is EntityWithHealth_"
},
"can_be_destroyed": {
"name": "can_be_destroyed",
"returns": "boolean",
"type": "function",
"doc": "Checks if the entity can be destroyed  \n  \n**Return value**  \nif the entity can be destroyed."
},
"destroy": {
"name": "destroy",
"returns": "boolean",
"args": {
"opts": {
"name": "opts",
"type": "boolean",
"doc": "opts (optional) :  Table with the following fields:   \n  * do_cliff_correction :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If neighbouring cliffs should be corrected. Defaults to false.  \n  * raise_destroy :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true; [defines.events.script_raised_destroy](https://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_destroy) will be called.  \n"
}
},
"type": "function",
"doc": "Destroys the entity.  \n  \n**Parameters**  \nopts (optional) :  Table with the following fields:   \n  + do_cliff_correction :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If neighbouring cliffs should be corrected. Defaults to false.  \n  + raise_destroy :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true; [defines.events.script_raised_destroy](https://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_destroy) will be called.  \n  \n  \n  \n**Return value**  \nif the entity was actually destroyed."
},
"set_command": {
"name": "set_command",
"args": {
"command": {
"name": "command",
"type": "Command",
"doc": "command :: [Command](https://lua-api.factorio.com/latest/Concepts.html#Command)"
}
},
"type": "function",
"doc": "Give the entity a command.  \n  \n**Parameters**  \ncommand :: [Command](https://lua-api.factorio.com/latest/Concepts.html#Command)  \n  \n  \n_Can only be used if this is Unit_"
},
"has_command": {
"name": "has_command",
"returns": "boolean",
"type": "function",
"doc": "Has this unit been assigned a command?  \n  \n_Can only be used if this is Unit_"
},
"die": {
"name": "die",
"returns": "boolean",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force to attribute the kill to."
},
"cause": {
"name": "cause",
"type": "LuaEntity",
"doc": "cause :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  The cause to attribute the kill to."
}
},
"type": "function",
"doc": "Immediately kills the entity.\n Does nothing if the entity doesn't have health.\n Unlike [LuaEntity::destroy](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.destroy) , die will trigger [on_entity_died](https://lua-api.factorio.com/latest/events.html#on_entity_died) and the entity will drop loot and corpse if it have any.  \n  \n**Parameters**  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force to attribute the kill to.  \n* cause :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  The cause to attribute the kill to.  \n  \n  \n**Return value**  \nIf the entity was killed."
},
"has_flag": {
"name": "has_flag",
"returns": "boolean",
"args": {
"flag": {
"name": "flag",
"type": "string",
"doc": "flag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The flag to test"
}
},
"type": "function",
"doc": "Test whether this entity's prototype has a flag set.  \n  \n**Parameters**  \nflag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The flag to test  \n  \n  \n**Return value**  \n````true```` if the entity has the given flag set."
},
"ghost_has_flag": {
"name": "ghost_has_flag",
"returns": "boolean",
"args": {
"flag": {
"name": "flag",
"type": "string",
"doc": "flag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The flag to test"
}
},
"type": "function",
"doc": "Same as [LuaEntity::has_flag](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.has_flag) but targets the inner entity on a entity ghost.  \n  \n**Parameters**  \nflag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The flag to test  \n  \n  \n**Return value**  \n````true```` if the entity has the given flag set.  \n_Can only be used if this is EntityGhost_"
},
"add_market_item": {
"name": "add_market_item",
"args": {
"offer": {
"name": "offer",
"type": "Offer",
"doc": "offer :: [Offer](https://lua-api.factorio.com/latest/Concepts.html#Offer)"
}
},
"type": "function",
"doc": "Offer a thing on the market.  \n  \n**Parameters**  \noffer :: [Offer](https://lua-api.factorio.com/latest/Concepts.html#Offer)  \n  \n  \n_Can only be used if this is Market_"
},
"remove_market_item": {
"name": "remove_market_item",
"returns": "boolean",
"args": {
"offer": {
"name": "offer",
"type": "uint",
"doc": "offer :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Index of offer to remove."
}
},
"type": "function",
"doc": "Remove an offer from a market.  \n  \n**Parameters**  \noffer :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Index of offer to remove.  \n  \n  \n**Return value**  \n````true```` if the offer was successfully removed; ````false```` when the given index was not valid.  \n_Can only be used if this is Market_"
},
"get_market_items": {
"name": "get_market_items",
"returns": "array ofOffer",
"type": "function",
"doc": "Get all offers in a market as an array.  \n  \n_Can only be used if this is Market_"
},
"clear_market_items": {
"name": "clear_market_items",
"type": "function",
"doc": "Removes all offers from a market.  \n  \n_Can only be used if this is Market_"
},
"connect_neighbour": {
"name": "connect_neighbour",
"returns": "boolean",
"args": {
"target": {
"name": "target",
"type": "LuaEntityortable",
"doc": "target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [table](https://lua-api.factorio.com/latest/Builtin-Types.html#table) :   \n  * To connect two electric poles, target has to be a [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) specifying another\n           electric pole. This will connect them with copper cable.  \n  * To connect two devices with wire, this parameter is a table:   \n    + wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire type.  \n    + target_entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to connect the wire to  \n    + source_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Mandatory if the source entity has more than one circuit connector and using circuit wire.  \n    + target_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Mandatory if the target entity has more than one circuit connector and using circuit wire.  \n    + source_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Mandatory if the source entity has more than one circuit connector and using circuit wire.  \n    + target_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Mandatory if the target entity has more than one circuit connector and using circuit wire.  \n  \n"
}
},
"type": "function",
"doc": "Connect two devices with wire or cable.  \n  \n**Parameters**  \ntarget :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [table](https://lua-api.factorio.com/latest/Builtin-Types.html#table) :   \n  + To connect two electric poles, target has to be a [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) specifying another\n           electric pole. This will connect them with copper cable.  \n  + To connect two devices with wire, this parameter is a table:   \n    - wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire type.  \n    - target_entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to connect the wire to  \n    - source_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Mandatory if the source entity has more than one circuit connector and using circuit wire.  \n    - target_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Mandatory if the target entity has more than one circuit connector and using circuit wire.  \n    - source_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Mandatory if the source entity has more than one circuit connector and using circuit wire.  \n    - target_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Mandatory if the target entity has more than one circuit connector and using circuit wire.  \n  \n  \n  \n  \n**Return value**  \nWhether the connection was formed."
},
"disconnect_neighbour": {
"name": "disconnect_neighbour",
"args": {
"target": {
"name": "target",
"type": "defines.wire_typeorLuaEntityortable",
"doc": "target :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [table](https://lua-api.factorio.com/latest/Builtin-Types.html#table) (optional) :   \n  * To remove all copper cables, leave this parameter out: ````pole.disconnect_neighbour()````  \n  * To remove all wires of a specific color, pass [defines.wire_type.red](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.red) or [defines.wire_type.green](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.green) .  \n  * To remove a specific copper cable between two poles, target can be a [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) specifying the other pole. E.g. ````pole1.disconnect_neighbour(pole2)```` .  \n  * To remove a specific wire, pass a table in the same format as for [LuaEntity::connect_neighbour](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.connect_neighbour) :   \n    + wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color  \n    + target_entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n    + source_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n    + target_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n    + source_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n    + target_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n"
}
},
"type": "function",
"doc": "Disconnect wires or cables.  \n  \n**Parameters**  \ntarget :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [table](https://lua-api.factorio.com/latest/Builtin-Types.html#table) (optional) :   \n  + To remove all copper cables, leave this parameter out: ````pole.disconnect_neighbour()````  \n  + To remove all wires of a specific color, pass [defines.wire_type.red](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.red) or [defines.wire_type.green](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.green) .  \n  + To remove a specific copper cable between two poles, target can be a [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) specifying the other pole. E.g. ````pole1.disconnect_neighbour(pole2)```` .  \n  + To remove a specific wire, pass a table in the same format as for [LuaEntity::connect_neighbour](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.connect_neighbour) :   \n    - wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color  \n    - target_entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n    - source_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n    - target_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n    - source_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n    - target_wire_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n  \n  \n"
},
"order_deconstruction": {
"name": "order_deconstruction",
"returns": "boolean",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose robots are supposed to do the deconstruction."
},
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any."
}
},
"type": "function",
"doc": "Sets the entity to be deconstructed by construction robots.  \n  \n**Parameters**  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose robots are supposed to do the deconstruction.  \n* player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  \n  \n**Return value**  \nif the entity was marked for deconstruction."
},
"cancel_deconstruction": {
"name": "cancel_deconstruction",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force who did the deconstruction order."
},
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any."
}
},
"type": "function",
"doc": "Cancels deconstruction if it is scheduled, does nothing otherwise.  \n  \n**Parameters**  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force who did the deconstruction order.  \n* player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  \n"
},
"to_be_deconstructed": {
"name": "to_be_deconstructed",
"returns": "boolean",
"type": "function",
"doc": "Is this entity marked for deconstruction?  \n"
},
"order_upgrade": {
"name": "order_upgrade",
"returns": "boolean",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "Table with the following fields:   \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose robots are supposed to do the upgrade.  \n  * target :: [EntityPrototypeSpecification](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification) :  The prototype of the entity to upgrade to.  \n  * player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n"
}
},
"type": "function",
"doc": "Sets the entity to be upgraded by construction robots.  \n  \n**Parameters**  \nTable with the following fields:   \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose robots are supposed to do the upgrade.  \n  + target :: [EntityPrototypeSpecification](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification) :  The prototype of the entity to upgrade to.  \n  + player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n  \n  \n  \n**Return value**  \nif the entity was marked for upgrade."
},
"cancel_upgrade": {
"name": "cancel_upgrade",
"returns": "boolean",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force who did the upgrade order."
},
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any."
}
},
"type": "function",
"doc": "Cancels upgrade if it is scheduled, does nothing otherwise.  \n  \n**Parameters**  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force who did the upgrade order.  \n* player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  \n  \n**Return value**  \nIf the cancel was successful."
},
"to_be_upgraded": {
"name": "to_be_upgraded",
"returns": "boolean",
"type": "function",
"doc": "Is this entity marked for upgrade?  \n"
},
"get_request_slot": {
"name": "get_request_slot",
"returns": "SimpleItemStack",
"args": {
"slot": {
"name": "slot",
"type": "uint",
"doc": "slot :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index."
}
},
"type": "function",
"doc": "Get a logistic requester slot.  \n  \n**Parameters**  \nslot :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index.  \n  \n  \n**Return value**  \nContents of the specified slot; ````nil```` if the given slot contains no request."
},
"set_request_slot": {
"name": "set_request_slot",
"returns": "boolean",
"args": {
"request": {
"name": "request",
"type": "ItemStackSpecification",
"doc": "request :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  What to request."
},
"slot": {
"name": "slot",
"type": "uint",
"doc": "slot :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index."
}
},
"type": "function",
"doc": "Set a logistic requester slot.  \n  \n**Parameters**  \n* request :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  What to request.  \n* slot :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index.  \n  \n  \n**Return value**  \nIf the slot was set."
},
"clear_request_slot": {
"name": "clear_request_slot",
"args": {
"slot": {
"name": "slot",
"type": "uint",
"doc": "slot :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index."
}
},
"type": "function",
"doc": "Clear a logistic requester slot.  \n  \n**Parameters**  \nslot :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index.  \n  \n"
},
"is_crafting": {
"name": "is_crafting",
"returns": "boolean",
"type": "function",
"doc": "**Return value**  \n````true```` if this machine is currently crafting.  \n_Can only be used if this is CraftingMachine_"
},
"is_opened": {
"name": "is_opened",
"returns": "boolean",
"type": "function",
"doc": "**Return value**  \n````true```` if this gate is currently opened.  \n_Can only be used if this is Gate_"
},
"is_opening": {
"name": "is_opening",
"returns": "boolean",
"type": "function",
"doc": "**Return value**  \n````true```` if this gate is currently opening.  \n_Can only be used if this is Gate_"
},
"is_closed": {
"name": "is_closed",
"returns": "boolean",
"type": "function",
"doc": "**Return value**  \n````true```` if this gate is currently closed.  \n_Can only be used if this is Gate_"
},
"is_closing": {
"name": "is_closing",
"returns": "boolean",
"type": "function",
"doc": "**Return value**  \n````true```` if this gate is currently closing  \n_Can only be used if this is Gate_"
},
"request_to_open": {
"name": "request_to_open",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force that requests the gate to be open."
},
"extra_time": {
"name": "extra_time",
"type": "uint",
"doc": "extra_time :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Extra ticks to stay open."
}
},
"type": "function",
"doc": "**Parameters**  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force that requests the gate to be open.  \n* extra_time :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Extra ticks to stay open.  \n  \n  \n_Can only be used if this is Gate_"
},
"request_to_close": {
"name": "request_to_close",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force that requests the gate to be closed."
}
},
"type": "function",
"doc": "**Parameters**  \nforce :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force that requests the gate to be closed.  \n  \n  \n_Can only be used if this is Gate_"
},
"get_transport_line": {
"name": "get_transport_line",
"returns": "LuaTransportLine",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Index of the requested transport line."
}
},
"type": "function",
"doc": "Get a transport line of a belt or belt connectable entity.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Index of the requested transport line.  \n  \n  \n_Can only be used if this is TransportBeltConnectable_"
},
"get_max_transport_line_index": {
"name": "get_max_transport_line_index",
"returns": "uint",
"type": "function",
"doc": "Get the maximum transport line index of a belt or belt connectable entity.  \n  \n_Can only be used if this is TransportBeltConnectable_"
},
"launch_rocket": {
"name": "launch_rocket",
"returns": "boolean",
"type": "function",
"doc": "**Return value**  \n````true```` if the rocket was successfully launched. Return value of ````false```` means the silo is not ready for launch.  \n_Can only be used if this is RocketSilo_"
},
"revive": {
"name": "revive",
"returns": "dictionarystring\u2192uint",
"args": {
"opts": {
"name": "opts",
"type": "boolean",
"doc": "opts (optional) :  Table with the following fields:   \n  * return_item_request_proxy :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````true```` the function will return item request proxy as the third parameter.  \n  * raise_revive :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, and an entity ghost; [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive) will be called. Else if true, and a tile ghost; [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles) will be called.  \n"
}
},
"type": "function",
"doc": "Revive a ghost. I.e. turn it from a ghost to a real entity or tile.  \n  \n**Parameters**  \nopts (optional) :  Table with the following fields:   \n  + return_item_request_proxy :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````true```` the function will return item request proxy as the third parameter.  \n  + raise_revive :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, and an entity ghost; [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive) will be called. Else if true, and a tile ghost; [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles) will be called.  \n  \n  \n  \n**Return value**  \nAny items the new real entity collided with or ````nil```` if the ghost could not be revived."
},
"silent_revive": {
"name": "silent_revive",
"returns": "dictionarystring\u2192uint",
"args": {
"opts": {
"name": "opts",
"type": "boolean",
"doc": "opts (optional) :  Table with the following fields:   \n  * return_item_request_proxy :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````true```` the function will return item request proxy as the third parameter.  \n  * raise_revive :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, and an entity ghost; [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive) will be called. Else if true, and a tile ghost; [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles) will be called.  \n"
}
},
"type": "function",
"doc": "Revives a ghost silently.  \n  \n**Parameters**  \nopts (optional) :  Table with the following fields:   \n  + return_item_request_proxy :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````true```` the function will return item request proxy as the third parameter.  \n  + raise_revive :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, and an entity ghost; [script_raised_revive](https://lua-api.factorio.com/latest/events.html#script_raised_revive) will be called. Else if true, and a tile ghost; [script_raised_set_tiles](https://lua-api.factorio.com/latest/events.html#script_raised_set_tiles) will be called.  \n  \n  \n  \n**Return value**  \nAny items the new real entity collided with or ````nil```` if the ghost could not be revived."
},
"get_connected_rail": {
"name": "get_connected_rail",
"returns": "LuaEntity",
"args": {
"rail_direction": {
"name": "rail_direction",
"type": "defines.rail_direction",
"doc": "Table with the following fields:   \n  * rail_direction :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n  * rail_connection_direction :: [defines.rail_connection_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_connection_direction)  \n"
}
},
"type": "function",
"doc": "**Parameters**  \nTable with the following fields:   \n  + rail_direction :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n  + rail_connection_direction :: [defines.rail_connection_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_connection_direction)  \n  \n  \n  \n**Return value**  \nRail connected in the specified manner to this one.  \n_Can only be used if this is Rail_"
},
"get_connected_rails": {
"name": "get_connected_rails",
"returns": "array ofLuaEntity",
"type": "function",
"doc": "Get the rails that this signal is connected to.  \n  \n_Can only be used if this is RailSignal_"
},
"get_rail_segment_entity": {
"name": "get_rail_segment_entity",
"returns": "LuaEntity",
"args": {
"direction": {
"name": "direction",
"type": "defines.rail_direction",
"doc": "direction :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction) :  The direction of travel relative to this rail."
},
"in_else_out": {
"name": "in_else_out",
"type": "boolean",
"doc": "in_else_out :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If true, gets the entity at the entrance of the rail segment, otherwise gets the entity at the exit of the rail segment."
}
},
"type": "function",
"doc": "Get the rail signal or train stop at the start/end of the rail segment this rail is in, or ````nil```` if the rail segment doesn't start/end with a signal nor a train stop.  \n  \n**Parameters**  \n* direction :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction) :  The direction of travel relative to this rail.  \n* in_else_out :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If true, gets the entity at the entrance of the rail segment, otherwise gets the entity at the exit of the rail segment.  \n  \n  \n_Can only be used if this is Rail_"
},
"get_rail_segment_end": {
"name": "get_rail_segment_end",
"returns": "LuaEntity",
"args": {
"direction": {
"name": "direction",
"type": "defines.rail_direction",
"doc": "direction :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)"
}
},
"type": "function",
"doc": "Get the rail at the end of the rail segment this rail is in.  \n  \n**Parameters**  \ndirection :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n  \n  \n_Can only be used if this is Rail_"
},
"get_rail_segment_length": {
"name": "get_rail_segment_length",
"returns": "double",
"type": "function",
"doc": "Get the length of the rail segment this rail is in.  \n  \n_Can only be used if this is Rail_"
},
"get_rail_segment_overlaps": {
"name": "get_rail_segment_overlaps",
"returns": "array ofLuaEntity",
"type": "function",
"doc": "Get a rail from each rail segment that overlaps with this rail's rail segment.  \n  \n_Can only be used if this is Rail_"
},
"get_filter": {
"name": "get_filter",
"returns": "string",
"args": {
"uint": {
"name": "uint",
"doc": "uint :  Slot to get the filter of."
}
},
"type": "function",
"doc": "Get the filter for a slot in an inserter or a loader.  \n  \n**Parameters**  \nuint :  Slot to get the filter of.  \n  \n  \n**Return value**  \nPrototype name of the item being filtered; ````nil```` if the given slot\n                 has no filter."
},
"set_filter": {
"name": "set_filter",
"args": {
"uint": {
"name": "uint",
"doc": "uint :  Slot to set the filter of."
},
"string": {
"name": "string",
"doc": "string :  Prototype name of the item to filter."
}
},
"type": "function",
"doc": "Set the filter for a slot in an inserter or a loader  \n  \n**Parameters**  \n* uint :  Slot to set the filter of.  \n* string :  Prototype name of the item to filter.  \n  \n"
},
"get_infinity_container_filter": {
"name": "get_infinity_container_filter",
"returns": "InfinityInventoryFilter",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to get."
}
},
"type": "function",
"doc": "Gets the filter for this infinity container at the given index or ````nil```` if the filter index doesn't exist or is empty.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to get.  \n  \n  \n_Can only be used if this is InfinityContainer_"
},
"set_infinity_container_filter": {
"name": "set_infinity_container_filter",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to set."
},
"filter": {
"name": "filter",
"type": "InfinityInventoryFilter",
"doc": "filter :: [InfinityInventoryFilter](https://lua-api.factorio.com/latest/Concepts.html#InfinityInventoryFilter) :  The new filter or ````nil```` to clear the filter."
}
},
"type": "function",
"doc": "Sets the filter for this infinity container at the given index.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to set.  \n* filter :: [InfinityInventoryFilter](https://lua-api.factorio.com/latest/Concepts.html#InfinityInventoryFilter) :  The new filter or ````nil```` to clear the filter.  \n  \n  \n_Can only be used if this is InfinityContainer_"
},
"get_infinity_pipe_filter": {
"name": "get_infinity_pipe_filter",
"returns": "InfinityPipeFilter",
"type": "function",
"doc": "Gets the filter for this infinity pipe or ````nil```` if the filter is empty.  \n  \n_Can only be used if this is InfinityPipe_"
},
"set_infinity_pipe_filter": {
"name": "set_infinity_pipe_filter",
"args": {
"filter": {
"name": "filter",
"type": "InfinityPipeFilter",
"doc": "filter :: [InfinityPipeFilter](https://lua-api.factorio.com/latest/Concepts.html#InfinityPipeFilter) :  The new filter or ````nil```` to clear the filter."
}
},
"type": "function",
"doc": "Sets the filter for this infinity pipe.  \n  \n**Parameters**  \nfilter :: [InfinityPipeFilter](https://lua-api.factorio.com/latest/Concepts.html#InfinityPipeFilter) :  The new filter or ````nil```` to clear the filter.  \n  \n  \n_Can only be used if this is InfinityPipe_"
},
"get_heat_setting": {
"name": "get_heat_setting",
"returns": "HeatSetting",
"type": "function",
"doc": "Gets the heat setting for this heat interface.  \n  \n_Can only be used if this is HeatInterface_"
},
"set_heat_setting": {
"name": "set_heat_setting",
"args": {
"filter": {
"name": "filter",
"type": "HeatSetting",
"doc": "filter :: [HeatSetting](https://lua-api.factorio.com/latest/Concepts.html#HeatSetting) :  The new setting."
}
},
"type": "function",
"doc": "Sets the heat setting for this heat interface.  \n  \n**Parameters**  \nfilter :: [HeatSetting](https://lua-api.factorio.com/latest/Concepts.html#HeatSetting) :  The new setting.  \n  \n  \n_Can only be used if this is HeatInterface_"
},
"get_control_behavior": {
"name": "get_control_behavior",
"returns": "LuaControlBehavior",
"type": "function",
"doc": "Gets the control behavior of the entity (if any).  \n  \n**Return value**  \nThe control behavior or nil."
},
"get_or_create_control_behavior": {
"name": "get_or_create_control_behavior",
"returns": "LuaControlBehavior",
"type": "function",
"doc": "Gets (and or creates if needed) the control behavior of the entity.  \n  \n**Return value**  \nThe control behavior or nil."
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"get_merged_signal": {
"name": "get_merged_signal",
"returns": "int",
"args": {
"signal": {
"name": "signal",
"type": "SignalID",
"doc": "signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to read."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get signals for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "Read a single signal from the combined circuit networks.  \n  \n**Parameters**  \n* signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  The signal to read.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get signals for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe current value of the signal."
},
"get_merged_signals": {
"name": "get_merged_signals",
"returns": "array ofSignal",
"args": {
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get signals for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "The merged circuit network signals or ````nil```` if there are no signals.  \n  \n**Parameters**  \ncircuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get signals for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe sum of signals on both the red and green networks, or nil if it doesn't have a circuit connector."
},
"supports_backer_name": {
"name": "supports_backer_name",
"returns": "boolean",
"type": "function",
"doc": "**Return value**  \n````true```` if this entity supports a backer name."
},
"copy_settings": {
"name": "copy_settings",
"returns": "dictionarystring\u2192uint",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"by_player": {
"name": "by_player",
"type": "PlayerSpecification",
"doc": "by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If provided, the copying is done 'as' this player and [on_entity_settings_pasted](https://lua-api.factorio.com/latest/events.html#on_entity_settings_pasted) is triggered."
}
},
"type": "function",
"doc": "Copies settings from the given entity onto this entity.  \n  \n**Parameters**  \n* entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If provided, the copying is done 'as' this player and [on_entity_settings_pasted](https://lua-api.factorio.com/latest/events.html#on_entity_settings_pasted) is triggered.  \n  \n  \n**Return value**  \nAny items removed from this entity as a result of copying the settings."
},
"get_logistic_point": {
"name": "get_logistic_point",
"returns": "LuaLogisticPointorarray ofLuaLogisticPoint",
"args": {
"defines.logistic_member_index": {
"name": "defines.logistic_member_index",
"doc": "defines.logistic_member_index (optional)"
}
},
"type": "function",
"doc": "Gets the [LuaLogisticPoint](https://lua-api.factorio.com/latest/LuaLogisticPoint.html) specified by the given index or if not given returns all of the points this entity owns.  \n  \n**Parameters**  \ndefines.logistic_member_index (optional)  \n  \n"
},
"play_note": {
"name": "play_note",
"returns": "boolean",
"args": {
"instrument": {
"name": "instrument",
"type": "uint",
"doc": "instrument :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
},
"note": {
"name": "note",
"type": "uint",
"doc": "note :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Plays a note with the given instrument and note.  \n  \n**Parameters**  \n* instrument :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n* note :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n  \n**Return value**  \nIf the request is valid. The sound may or may not be played depending on polyphony settings.  \n_Can only be used if this is ProgrammableSpeaker_"
},
"connect_rolling_stock": {
"name": "connect_rolling_stock",
"returns": "boolean",
"args": {
"direction": {
"name": "direction",
"type": "defines.rail_direction",
"doc": "direction :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)"
}
},
"type": "function",
"doc": "Connects the rolling stock in the given direction.  \n  \n**Parameters**  \ndirection :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n  \n  \n**Return value**  \nIf any connection was made"
},
"disconnect_rolling_stock": {
"name": "disconnect_rolling_stock",
"returns": "boolean",
"args": {
"direction": {
"name": "direction",
"type": "defines.rail_direction",
"doc": "direction :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)"
}
},
"type": "function",
"doc": "Tries to disconnect this rolling stock in the given direction.  \n  \n**Parameters**  \ndirection :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n  \n  \n**Return value**  \nIf anything was disconnected"
},
"update_connections": {
"name": "update_connections",
"type": "function",
"doc": "Reconnect loader, beacon, cliff and mining drill connections to entities that might have been\n teleported out or in by the script. The game doesn't do this automatically\n as we don't want to loose performance by checking this in normal games.  \n"
},
"get_recipe": {
"name": "get_recipe",
"returns": "LuaRecipe",
"type": "function",
"doc": "Current recipe being assembled by this machine or ````nil```` if no recipe is set.  \n  \n_Can only be used if this is CraftingMachine_"
},
"set_recipe": {
"name": "set_recipe",
"returns": "dictionarystring\u2192uint",
"args": {
"recipe": {
"name": "recipe",
"type": "stringorLuaRecipe",
"doc": "recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The new recipe or ````nil```` to clear the recipe."
}
},
"type": "function",
"doc": "Sets the current recipe in this assembly machine.  \n  \n**Parameters**  \nrecipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The new recipe or ````nil```` to clear the recipe.  \n  \n  \n**Return value**  \nAny items removed from this entity as a result of setting the recipe.  \n_Can only be used if this is CraftingMachine_"
},
"rotate": {
"name": "rotate",
"returns": "boolean",
"args": {
"options": {
"name": "options",
"type": "boolean",
"doc": "options (optional) :  Table with the following fields:   \n  * reverse :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  * by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n  * spill_items :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the player is not given should extra items be spilled or returned as a second return value from this.  \n  * enable_looted :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, each spilled item will be flagged with the [LuaEntity::to_be_looted](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.to_be_looted) flag.  \n  * force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  When provided the spilled items will be marked for deconstruction by this force.  \n"
}
},
"type": "function",
"doc": "Rotates this entity as if the player rotated it  \n  \n**Parameters**  \noptions (optional) :  Table with the following fields:   \n  + reverse :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  + by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n  + spill_items :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the player is not given should extra items be spilled or returned as a second return value from this.  \n  + enable_looted :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, each spilled item will be flagged with the [LuaEntity::to_be_looted](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.to_be_looted) flag.  \n  + force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  When provided the spilled items will be marked for deconstruction by this force.  \n  \n  \n  \n**Return value**  \nIf the rotation was successful."
},
"get_driver": {
"name": "get_driver",
"returns": "LuaEntityorLuaPlayer",
"type": "function",
"doc": "Gets the driver of this vehicle if any.  \n  \n_Can only be used if this is Vehicle_"
},
"set_driver": {
"name": "set_driver",
"args": {
"driver": {
"name": "driver",
"type": "LuaEntityorPlayerSpecification",
"doc": "driver :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) :  The new driver or ````nil```` to eject the current driver if any."
}
},
"type": "function",
"doc": "Sets the driver of this vehicle.  \n  \n**Parameters**  \ndriver :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) :  The new driver or ````nil```` to eject the current driver if any.  \n  \n  \n_Can only be used if this is Vehicle_"
},
"get_passenger": {
"name": "get_passenger",
"returns": "LuaEntityorLuaPlayer",
"type": "function",
"doc": "Gets the passenger of this car or spidertron if any.  \n  \n_Can only be used if this is Vehicle_"
},
"set_passenger": {
"name": "set_passenger",
"args": {
"passenger": {
"name": "passenger",
"type": "LuaEntityorPlayerSpecification",
"doc": "passenger :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
}
},
"type": "function",
"doc": "Sets the passenger of this car or spidertron.  \n  \n**Parameters**  \npassenger :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n  \n  \n_Can only be used if this is Vehicle_"
},
"is_connected_to_electric_network": {
"name": "is_connected_to_electric_network",
"returns": "boolean",
"type": "function",
"doc": "Returns true if this entity is connected to an electric network.  \n"
},
"get_train_stop_trains": {
"name": "get_train_stop_trains",
"returns": "array ofLuaTrain",
"type": "function",
"doc": "The trains scheduled to stop at this train stop.  \n  \n_Can only be used if this is TrainStop_"
},
"get_stopped_train": {
"name": "get_stopped_train",
"returns": "LuaTrain",
"type": "function",
"doc": "The train currently stopped at this train stop or ````nil```` if none.  \n  \n_Can only be used if this is TrainStop_"
},
"clone": {
"name": "clone",
"returns": "LuaEntity",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "Table with the following fields:   \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The destination position  \n  * surface :: [LuaSurface](https://lua-api.factorio.com/latest/LuaSurface.html) (optional) :  The destination surface  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n"
}
},
"type": "function",
"doc": "Clones this entity.  \n  \n**Parameters**  \nTable with the following fields:   \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The destination position  \n  + surface :: [LuaSurface](https://lua-api.factorio.com/latest/LuaSurface.html) (optional) :  The destination surface  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  \n  \n  \n**Return value**  \nThe cloned entity or ````nil```` if this entity can't be cloned/can't be cloned to the given location."
},
"get_fluid_count": {
"name": "get_fluid_count",
"returns": "double",
"args": {
"fluid": {
"name": "fluid",
"type": "string",
"doc": "fluid :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the fluid to count. If not specified, count all fluids."
}
},
"type": "function",
"doc": "Get the amount of all or some fluid in this entity.  \n  \n**Parameters**  \nfluid :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the fluid to count. If not specified, count all fluids.  \n  \n"
},
"get_fluid_contents": {
"name": "get_fluid_contents",
"returns": "dictionarystring\u2192double",
"type": "function",
"doc": "Get amounts of all fluids in this entity.  \n  \n**Return value**  \nThe amounts, indexed by fluid names."
},
"remove_fluid": {
"name": "remove_fluid",
"returns": "double",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Fluid prototype name.  \n  * amount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Amount to remove  \n  * minimum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  * maximum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  * temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n"
}
},
"type": "function",
"doc": "Remove fluid from this entity.  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Fluid prototype name.  \n  + amount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Amount to remove  \n  + minimum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  + maximum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  + temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  \n  \n  \n**Return value**  \nAmount of fluid actually removed."
},
"insert_fluid": {
"name": "insert_fluid",
"returns": "double",
"args": {
"fluid": {
"name": "fluid",
"type": "Fluid",
"doc": "fluid :: [Fluid](https://lua-api.factorio.com/latest/Concepts.html#Fluid) :  Fluid to insert."
}
},
"type": "function",
"doc": "Insert fluid into this entity.\n Fluidbox is chosen automatically.  \n  \n**Parameters**  \nfluid :: [Fluid](https://lua-api.factorio.com/latest/Concepts.html#Fluid) :  Fluid to insert.  \n  \n  \n**Return value**  \nAmount of fluid actually inserted."
},
"clear_fluid_inside": {
"name": "clear_fluid_inside",
"type": "function",
"doc": "Remove all fluids from this entity.  \n"
},
"get_beam_source": {
"name": "get_beam_source",
"returns": "BeamTarget",
"type": "function",
"doc": "Get the source of this beam.  \n  \n_Can only be used if this is Beam_"
},
"set_beam_source": {
"name": "set_beam_source",
"args": {
"source": {
"name": "source",
"type": "LuaEntityorPosition",
"doc": "source :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
}
},
"type": "function",
"doc": "Set the source of this beam.  \n  \n**Parameters**  \nsource :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n  \n_Can only be used if this is Beam_"
},
"get_beam_target": {
"name": "get_beam_target",
"returns": "BeamTarget",
"type": "function",
"doc": "Get the target of this beam.  \n  \n_Can only be used if this is Beam_"
},
"set_beam_target": {
"name": "set_beam_target",
"args": {
"target": {
"name": "target",
"type": "LuaEntityorPosition",
"doc": "target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
}
},
"type": "function",
"doc": "Set the target of this beam.  \n  \n**Parameters**  \ntarget :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n  \n_Can only be used if this is Beam_"
},
"get_radius": {
"name": "get_radius",
"returns": "double",
"type": "function",
"doc": "The radius of this entity.  \n"
},
"get_health_ratio": {
"name": "get_health_ratio",
"returns": "float",
"type": "function",
"doc": "The health ratio of this entity between 1 and 0 (for full health and no health respectively).  \n"
},
"create_build_effect_smoke": {
"name": "create_build_effect_smoke",
"type": "function",
"doc": "Creates the same smoke that is created when you place a building by hand.\n You can play the building sound to go with it by using [LuaSurface::play_sound](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.play_sound) , eg:\n entity.surface.play_sound{path=\"entity-build/\"..entity.prototype.name, position=entity.position}  \n"
},
"release_from_spawner": {
"name": "release_from_spawner",
"type": "function",
"doc": "Release the unit from the spawner which spawned it. This allows the spawner to continue spawning additional units.  \n  \n_Can only be used if this is Unit_"
},
"toggle_equipment_movement_bonus": {
"name": "toggle_equipment_movement_bonus",
"type": "function",
"doc": "Toggle this entity's equipment movement bonus. Does nothing if the entity does not have an equipment grid.  \n"
},
"can_shoot": {
"name": "can_shoot",
"returns": "boolean",
"args": {
"target": {
"name": "target",
"type": "LuaEntity",
"doc": "target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
}
},
"type": "function",
"doc": "If this character can shoot the given entity or position.  \n  \n**Parameters**  \n* target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n"
},
"start_fading_out": {
"name": "start_fading_out",
"type": "function",
"doc": "Only works if the entity is a speech-bubble, with an \"effect\" defined in its wrapper_flow_style.\n Starts animating the opacity of the speech bubble towards zero, and destroys the entity when it hits zero.  \n"
},
"get_upgrade_target": {
"name": "get_upgrade_target",
"returns": "LuaEntityPrototype",
"type": "function",
"doc": "Returns the new entity prototype.  \n  \n**Return value**  \nnil if this entity is not marked for upgrade."
},
"get_damage_to_be_taken": {
"name": "get_damage_to_be_taken",
"returns": "float",
"type": "function",
"doc": "Returns the amount of damage to be taken by this entity.  \n"
},
"deplete": {
"name": "deplete",
"type": "function",
"doc": "Depletes and destroys this resource entity.  \n  \n_Can only be used if this is ResourceEntity_"
},
"mine": {
"name": "mine",
"returns": "boolean",
"args": {
"options": {
"name": "options",
"type": "LuaInventory",
"doc": "options (optional) :  Table with the following fields:   \n  * inventory :: [LuaInventory](https://lua-api.factorio.com/latest/LuaInventory.html) (optional) :  If provided the item(s) will be transferred into this inventory. If provided, this must be an inventory created with [LuaGameScript::create_inventory](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.create_inventory) or be a basic inventory owned by some entity.  \n  * force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, when the item(s) don't fit into the given inventory the entity is force mined.\n                                     If false, the mining operation fails when there isn't enough room to transfer all of the items into the inventory.\n                                     Defaults to false. This is ignored and acts as 'true' if no inventory is provided.  \n  * raise_destroyed :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, [script_raised_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy) will be raised. Defaults to true.  \n  * ignore_minable :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, the minable state of the entity is ignored. Defaults to false. If false, an entity that isn't minable (set as not-minable in the prototype or isn't minable for other reasons) will fail to be mined.  \n"
}
},
"type": "function",
"doc": "Mines this entity.  \n  \n**Parameters**  \noptions (optional) :  Table with the following fields:   \n  + inventory :: [LuaInventory](https://lua-api.factorio.com/latest/LuaInventory.html) (optional) :  If provided the item(s) will be transferred into this inventory. If provided, this must be an inventory created with [LuaGameScript::create_inventory](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.create_inventory) or be a basic inventory owned by some entity.  \n  + force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, when the item(s) don't fit into the given inventory the entity is force mined.\n                                     If false, the mining operation fails when there isn't enough room to transfer all of the items into the inventory.\n                                     Defaults to false. This is ignored and acts as 'true' if no inventory is provided.  \n  + raise_destroyed :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, [script_raised_destroy](https://lua-api.factorio.com/latest/events.html#script_raised_destroy) will be raised. Defaults to true.  \n  + ignore_minable :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, the minable state of the entity is ignored. Defaults to false. If false, an entity that isn't minable (set as not-minable in the prototype or isn't minable for other reasons) will fail to be mined.  \n  \n  \n  \n**Return value**  \nif mining succeeded."
},
"spawn_decorations": {
"name": "spawn_decorations",
"type": "function",
"doc": "Triggers spawn_decoration actions defined in the entity prototype or does nothing if entity is not \"turret\" or \"unit-spawner\".  \n"
},
"can_wires_reach": {
"name": "can_wires_reach",
"returns": "boolean",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
}
},
"type": "function",
"doc": "Can wires reach between these entities.  \n  \n**Parameters**  \nentity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n"
},
"get_connected_rolling_stock": {
"name": "get_connected_rolling_stock",
"returns": "LuaEntity",
"args": {
"direction": {
"name": "direction",
"type": "defines.rail_direction",
"doc": "direction :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)"
}
},
"type": "function",
"doc": "Gets rolling stock connected to the given end of this stock  \n  \n**Parameters**  \ndirection :: [defines.rail_direction](https://lua-api.factorio.com/latest/defines.html#defines.rail_direction)  \n  \n  \n**Return value**  \nOne of connected rolling stocks"
},
"is_registered_for_construction": {
"name": "is_registered_for_construction",
"returns": "boolean",
"type": "function",
"doc": "Is this entity or tile ghost or item request proxy registered for construction?\n If false, it means a construction robot has been dispatched to build the entity, or it is not an entity that can be constructed.  \n"
},
"is_registered_for_deconstruction": {
"name": "is_registered_for_deconstruction",
"returns": "boolean",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force construction manager to check."
}
},
"type": "function",
"doc": "Is this entity registered for deconstruction with this force?\n If false, it means a construction robot has been dispatched to deconstruct it, or it is not marked for deconstruction.\n This is worst-case O(N) complexity where N is the current number of things in the deconstruct queue.  \n  \n**Parameters**  \nforce :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force construction manager to check.  \n  \n"
},
"is_registered_for_upgrade": {
"name": "is_registered_for_upgrade",
"returns": "boolean",
"type": "function",
"doc": "Is this entity registered for upgrade?\n If false, it means a construction robot has been dispatched to upgrade it, or it is not marked for upgrade.\n This is worst-case O(N) complexity where N is the current number of things in the upgrade queue.  \n"
},
"is_registered_for_repair": {
"name": "is_registered_for_repair",
"returns": "boolean",
"type": "function",
"doc": "Is this entity registered for repair?\n If false, it means a construction robot has been dispatched to upgrade it, or it is not damaged.\n This is worst-case O(N) complexity where N is the current number of things in the repair queue.  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of the entity prototype. E.g. \"inserter\" or \"filter-inserter\".  \n"
},
"ghost_name": {
"name": "ghost_name",
"type": "string",
"mode": "[R]",
"doc": "Name of the entity or tile contained in this ghost  \n _Can only be used if this is Ghost_"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]",
"doc": "Localised name of the entity.  \n"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"ghost_localised_name": {
"name": "ghost_localised_name",
"type": "LocalisedString",
"mode": "[R]",
"doc": "Localised name of the entity or tile contained in this ghost.  \n _Can only be used if this is Ghost_"
},
"ghost_localised_description": {
"name": "ghost_localised_description",
"type": "LocalisedString",
"mode": "[R]",
"doc": "_Can only be used if this is Ghost_"
},
"type": {
"name": "type",
"type": "string",
"mode": "[R]",
"doc": "The entity prototype type of this entity.  \n"
},
"ghost_type": {
"name": "ghost_type",
"type": "string",
"mode": "[R]",
"doc": "The prototype type of the entity or tile contained in this ghost.  \n _Can only be used if this is Ghost_"
},
"active": {
"name": "active",
"type": "boolean",
"mode": "[RW]",
"doc": "Deactivating an entity will stop all its operations (car will stop moving, inserters\n will stop working, fish will stop moving etc).  \n **Note:** Entities that are not active naturally can't be set to be active (setting\n       it to be active will do nothing) **Note:** Ghosts, simple smoke, and corpses can't be modified at this time. **Note:** It is even possible to set the character to not be active, so he can't move and\n       perform most of the tasks."
},
"destructible": {
"name": "destructible",
"type": "boolean",
"mode": "[RW]",
"doc": "When the entity is not destructible it can't be damaged.  \n **Note:** An indestructible entity can still be mined. **Note:** Entities that are indestructible naturally (they have no health, like smoke,\n       resource etc) can't be set to be destructible."
},
"minable": {
"name": "minable",
"type": "boolean",
"mode": "[RW]",
"doc": "**Note:** Not minable entities can still be destroyed. **Note:** Entities that are not minable naturally (like smoke, character, enemy units etc)\n       can't be set to minable."
},
"rotatable": {
"name": "rotatable",
"type": "boolean",
"mode": "[RW]",
"doc": "When entity is not to be rotatable (inserter, transport belt etc), it can't be rotated\n by player using the R key.  \n **Note:** Entities that are not rotatable naturally (like chest or furnace) can't be set to\n       be rotatable."
},
"operable": {
"name": "operable",
"type": "boolean",
"mode": "[RW]",
"doc": "Player can't open gui of this entity and he can't quick insert/input stuff in to the entity\n when it is not operable.  \n"
},
"health": {
"name": "health",
"type": "float",
"mode": "[RW]",
"doc": "Health of the entity. Setting health to less than 0 will set health to 0, entities\n with 0 health can not be attacked. Setting health to higher than max health will\n set health to max health.  \n **Note:** If used on an entity that doesn't support health, this field will be ````nil```` ."
},
"direction": {
"name": "direction",
"type": "defines.direction",
"mode": "[RW]",
"doc": "The current direction this entity is facing.  \n **Note:** Writing direction is currently not supported on entity ghosts and will do nothing."
},
"supports_direction": {
"name": "supports_direction",
"type": "boolean",
"mode": "[R]",
"doc": "Whether the entity has direction.\n When it is false for this entity, it will always return north direction when asked for.  \n"
},
"orientation": {
"name": "orientation",
"type": "float",
"mode": "[RW]",
"doc": "The smooth orientation.  \n"
},
"cliff_orientation": {
"name": "cliff_orientation",
"type": "string",
"mode": "[R]",
"doc": "The orientation of this cliff.  \n"
},
"amount": {
"name": "amount",
"type": "uint",
"mode": "[RW]",
"doc": "Count of resource units contained.  \n _Can only be used if this is ResourceEntity_"
},
"initial_amount": {
"name": "initial_amount",
"type": "uint",
"mode": "[RW]",
"doc": "Count of initial resource units contained.  \n **Note:** If this is not an infinite resource reading will give ````nil```` and writing will give an error. _Can only be used if this is ResourceEntity_"
},
"effectivity_modifier": {
"name": "effectivity_modifier",
"type": "float",
"mode": "[RW]",
"doc": "Multiplies the acceleration the vehicle can create for one unit of energy. By default\n is ````1```` .  \n _Can only be used if this is Car_"
},
"consumption_modifier": {
"name": "consumption_modifier",
"type": "float",
"mode": "[RW]",
"doc": "Multiplies the energy consumption.  \n _Can only be used if this is Car_"
},
"friction_modifier": {
"name": "friction_modifier",
"type": "float",
"mode": "[RW]",
"doc": "Multiplies the car friction rate.  \n Example This will allow the car to go much faster ````game.player.vehicle.friction_modifier\u00a0=\u00a00.5```` _Can only be used if this is Car_"
},
"driver_is_gunner": {
"name": "driver_is_gunner",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether the driver of this car or spidertron is the gunner, if false, the passenger is the gunner.  \n"
},
"vehicle_automatic_targeting_parameters": {
"name": "vehicle_automatic_targeting_parameters",
"type": "VehicleAutomaticTargetingParameters",
"mode": "[RW]",
"doc": "Read when this spidertron auto-targets enemies  \n _Can only be used if this is SpiderVehicle_"
},
"speed": {
"name": "speed",
"type": "float",
"mode": "[RW]",
"doc": "The current speed of the car, rolling stock, projectile or spider vehicle, or current max speed of the unit. Only the speed of units, cars, and projectiles are writable.  \n"
},
"effective_speed": {
"name": "effective_speed",
"type": "float",
"mode": "[R]",
"doc": "The current speed of a unit, taking into account any walking speed modifier given by the tile the unit is\n standing on.  \n _Can only be used if this is Unit_"
},
"stack": {
"name": "stack",
"type": "LuaItemStack",
"mode": "[R]",
"doc": "_Can only be used if this is ItemEntity_"
},
"prototype": {
"name": "prototype",
"type": "LuaEntityPrototype",
"mode": "[R]",
"doc": "The entity prototype of this entity.  \n"
},
"ghost_prototype": {
"name": "ghost_prototype",
"type": "LuaEntityPrototypeorLuaTilePrototype",
"mode": "[R]",
"doc": "The prototype of the entity or tile contained in this ghost.  \n _Can only be used if this is Ghost_"
},
"drop_position": {
"name": "drop_position",
"type": "Position",
"mode": "[RW]",
"doc": "Position where the entity puts its stuff.  \n **Note:** Meaningful only for entities that put stuff somewhere, such as mining drills or inserters. Mining drills can't have their drop position changed; inserters must have ````allow_custom_vectors```` set to true on their prototype to allow changing the drop position."
},
"pickup_position": {
"name": "pickup_position",
"type": "Position",
"mode": "[RW]",
"doc": "Where the inserter will pick up items from.  \n **Note:** Inserters must have ````allow_custom_vectors```` set to true on their prototype to allow changing the pickup position. _Can only be used if this is Inserter_"
},
"drop_target": {
"name": "drop_target",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The entity this entity is putting its stuff to or ````nil```` if there is no such entity.  \n **Note:** Meaningful only for entities that put stuff somewhere, such as mining drills or inserters."
},
"pickup_target": {
"name": "pickup_target",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The entity the inserter will attempt to pick up from. For example, this can be a transport belt or a\n storage chest.  \n _Can only be used if this is Inserter_"
},
"selected_gun_index": {
"name": "selected_gun_index",
"type": "uint",
"mode": "[RW]",
"doc": "Index of the currently selected weapon slot of this character, car, or spidertron, or ````nil```` if the car/spidertron doesn't have guns.  \n _Can only be used if this is Character or  Car_"
},
"energy": {
"name": "energy",
"type": "double",
"mode": "[RW]",
"doc": "Energy stored in the entity (heat in furnace, energy stored in electrical devices etc.).\n always 0 for entities that don't have the concept of energy stored inside.  \n Example ````game.player.print(\"Machine\u00a0energy:\u00a0\"\u00a0..\u00a0game.player.selected.energy\u00a0..\u00a0\"J\") game.player.selected.energy\u00a0=\u00a03000````"
},
"temperature": {
"name": "temperature",
"type": "double",
"mode": "[RW]",
"doc": "The temperature of this entities heat energy source if this entity uses a heat energy source or ````nil```` .  \n"
},
"previous_recipe": {
"name": "previous_recipe",
"type": "LuaRecipe",
"mode": "[R]",
"doc": "The previous recipe this furnace was using or nil if the furnace had no previous recipe.  \n _Can only be used if this is Furnace_"
},
"held_stack": {
"name": "held_stack",
"type": "LuaItemStack",
"mode": "[R]",
"doc": "The item stack currently held in an inserter's hand.  \n _Can only be used if this is Inserter_"
},
"held_stack_position": {
"name": "held_stack_position",
"type": "Position",
"mode": "[R]",
"doc": "Current position of the inserter's \"hand\".  \n _Can only be used if this is Inserter_"
},
"train": {
"name": "train",
"type": "LuaTrain",
"mode": "[R]",
"doc": "The train this rolling stock belongs to or nil if not rolling stock.  \n"
},
"neighbours": {
"name": "neighbours",
"type": "dictionarystring\u2192array ofLuaEntityorarray ofarray ofLuaEntityorLuaEntity",
"mode": "[R]",
"doc": "  \n  * When called on an electric pole, this is a dictionary of all connections, indexed\n         by the strings ````\"copper\"```` , ````\"red\"```` , and ````\"green\"```` .  \n  * When called on a pipe-connectable entity, this is an array of entity arrays of all entities a given fluidbox is connected to.  \n  * When called on an underground transport belt, this is the other end of the\n         underground belt connection, or ````nil```` if none.  \n  * When called on a wall-connectable entity or reactor, this is a dictionary of all connections indexed by the connection direction \"north\", \"south\", \"east\", and \"west\".  \n"
},
"belt_neighbours": {
"name": "belt_neighbours",
"type": "dictionarystring\u2192array ofLuaEntity",
"mode": "[R]",
"doc": "The belt connectable neighbours of this belt connectable entity. Only entities that input to or are outputs of this entity.\n Does not contain the other end of an underground belt, see [LuaEntity::neighbours](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.neighbours) for that.\n This is a dictionary with ````\"inputs\"```` , ````\"outputs\"```` entries that are arrays of transport belt connectable entities, or empty tables if no entities.  \n _Can only be used if this is TransportBeltConnectable_"
},
"fluidbox": {
"name": "fluidbox",
"type": "LuaFluidBox",
"mode": "[RW]",
"doc": "Fluidboxes of this entity.  \n"
},
"backer_name": {
"name": "backer_name",
"type": "string",
"mode": "[RW]",
"doc": "The name of a backer (of Factorio) assigned to a lab or train station / stop.  \n **Note:** Only useable on entities that support backer names. Returns ````nil```` when the entity doesn't support a backer name."
},
"time_to_live": {
"name": "time_to_live",
"type": "uint",
"mode": "[RW]",
"doc": "The ticks left before a ghost, combat robot, highlight box or smoke with trigger is destroyed.  \n   \n  * for ghosts set to uint32 max (4,294,967,295) to never expire.  \n  * for ghosts Cannot be set higher than [LuaForce::ghost_time_to_live](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.ghost_time_to_live) of the entity's force.  \n"
},
"color": {
"name": "color",
"type": "Color",
"mode": "[RW]",
"doc": "The character, rolling stock, train stop, car, spider-vehicle, flying text, corpse or simple-entity-with-owner color. Returns ````nil```` if this entity doesn't use custom colors.  \n **Note:** Car color is overridden by the color of the current driver/passenger, if there is one."
},
"text": {
"name": "text",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The text of this flying-text entity.  \n _Can only be used if this is FlyingText_"
},
"signal_state": {
"name": "signal_state",
"type": "defines.signal_state",
"mode": "[R]",
"doc": "The state of this rail signal.  \n _Can only be used if this is RailSignal_"
},
"chain_signal_state": {
"name": "chain_signal_state",
"type": "defines.chain_signal_state",
"mode": "[R]",
"doc": "The state of this chain signal.  \n _Can only be used if this is RailChainSignal_"
},
"to_be_looted": {
"name": "to_be_looted",
"type": "boolean",
"mode": "[RW]",
"doc": "Will this entity be picked up automatically when the player walks over it?  \n _Can only be used if this is ItemEntity_"
},
"crafting_speed": {
"name": "crafting_speed",
"type": "double",
"mode": "[R]",
"doc": "The current crafting speed, including speed bonuses from modules and beacons.  \n _Can only be used if this is CraftingMachine_"
},
"crafting_progress": {
"name": "crafting_progress",
"type": "float",
"mode": "[RW]",
"doc": "The current crafting progress, as a number in range [0, 1].  \n _Can only be used if this is CraftingMachine_"
},
"bonus_progress": {
"name": "bonus_progress",
"type": "double",
"mode": "[RW]",
"doc": "The current productivity bonus progress, as a number in range [0, 1].  \n _Can only be used if this is CraftingMachine_"
},
"productivity_bonus": {
"name": "productivity_bonus",
"type": "double",
"mode": "[R]",
"doc": "The productivity bonus of this entity.  \n **Note:** This includes force based bonuses as well as beacon/module bonuses."
},
"pollution_bonus": {
"name": "pollution_bonus",
"type": "double",
"mode": "[R]",
"doc": "The pollution bonus of this entity.  \n"
},
"speed_bonus": {
"name": "speed_bonus",
"type": "double",
"mode": "[R]",
"doc": "The speed bonus of this entity.  \n **Note:** This includes force based bonuses as well as beacon/module bonuses."
},
"consumption_bonus": {
"name": "consumption_bonus",
"type": "double",
"mode": "[R]",
"doc": "The consumption bonus of this entity.  \n"
},
"belt_to_ground_type": {
"name": "belt_to_ground_type",
"type": "string",
"mode": "[R]",
"doc": "````\"input\"```` or ````\"output\"```` , depending on whether this underground belt goes down or up.  \n _Can only be used if this is TransportBeltToGround_"
},
"loader_type": {
"name": "loader_type",
"type": "string",
"mode": "[RW]",
"doc": "````\"input\"```` or ````\"output\"```` , depending on whether this loader puts to or gets from a container.  \n _Can only be used if this is Loader_"
},
"rocket_parts": {
"name": "rocket_parts",
"type": "uint",
"mode": "[RW]",
"doc": "Number of rocket parts in the silo.  \n _Can only be used if this is RocketSilo_"
},
"logistic_network": {
"name": "logistic_network",
"type": "LuaLogisticNetwork",
"mode": "[RW]",
"doc": "The logistic network this entity is a part of.  \n"
},
"logistic_cell": {
"name": "logistic_cell",
"type": "LuaLogisticCell",
"mode": "[R]",
"doc": "The logistic cell this entity is a part of. Will be ````nil```` if this entity is not a part of any logistic cell.  \n"
},
"item_requests": {
"name": "item_requests",
"type": "dictionarystring\u2192uint",
"mode": "[RW]",
"doc": "Items this ghost will request when revived or items this item request proxy is requesting.\n Result is a dictionary mapping each item prototype name to the required count.  \n"
},
"player": {
"name": "player",
"type": "LuaPlayer",
"mode": "[R]",
"doc": "The player connected to this character or ````nil```` if none.  \n _Can only be used if this is Character_"
},
"unit_group": {
"name": "unit_group",
"type": "LuaUnitGroup",
"mode": "[R]",
"doc": "The unit group this unit is a member of, or ````nil```` if none.  \n _Can only be used if this is Unit_"
},
"damage_dealt": {
"name": "damage_dealt",
"type": "double",
"mode": "[RW]",
"doc": "The damage dealt by this turret, artillery turret, or artillery wagon.  \n _Can only be used if this is Turret_"
},
"kills": {
"name": "kills",
"type": "uint",
"mode": "[RW]",
"doc": "The number of units killed by this turret, artillery turret, or artillery wagon.  \n _Can only be used if this is Turret_"
},
"last_user": {
"name": "last_user",
"type": "LuaPlayer",
"mode": "[RW]",
"doc": "The player who built the entity  \n _Can only be used if this is EntityWithOwner_"
},
"electric_buffer_size": {
"name": "electric_buffer_size",
"type": "double",
"mode": "[RW]",
"doc": "The buffer size for the electric energy source or nil if the entity doesn't have an electric energy source.  \n **Note:** Write access is limited to the ElectricEnergyInterface type"
},
"electric_input_flow_limit": {
"name": "electric_input_flow_limit",
"type": "double",
"mode": "[R]",
"doc": "The input flow limit for the electric energy source or nil if the entity doesn't have an electric energy source.  \n"
},
"electric_output_flow_limit": {
"name": "electric_output_flow_limit",
"type": "double",
"mode": "[R]",
"doc": "The output flow limit for the electric energy source or nil if the entity doesn't have an electric energy source.  \n"
},
"electric_drain": {
"name": "electric_drain",
"type": "double",
"mode": "[R]",
"doc": "The electric drain for the electric energy source or nil if the entity doesn't have an electric energy source.  \n"
},
"electric_emissions": {
"name": "electric_emissions",
"type": "double",
"mode": "[R]",
"doc": "The emissions for the electric energy source or nil if the entity doesn't have an electric energy source.  \n"
},
"unit_number": {
"name": "unit_number",
"type": "uint",
"mode": "[R]",
"doc": "The unit number or nil if the entity doesn't have one. This is universally unique for every entity that has one, for the lifetime of a whole game.  \n"
},
"ghost_unit_number": {
"name": "ghost_unit_number",
"type": "uint",
"mode": "[R]",
"doc": "The unit number of the entity contained in this ghost or nil if the entity doesn't have one.  \n _Can only be used if this is EntityGhost_"
},
"mining_progress": {
"name": "mining_progress",
"type": "double",
"mode": "[RW]",
"doc": "The mining progress for this mining drill or ````nil```` if this isn't a mining drill.  Is a number in range [0, mining_target.prototype.mineable_properties.mining_time]  \n"
},
"bonus_mining_progress": {
"name": "bonus_mining_progress",
"type": "double",
"mode": "[RW]",
"doc": "The bonus mining progress for this mining drill or ````nil```` if this isn't a mining drill.  Read yields a number in range [0, mining_target.prototype.mineable_properties.mining_time]  \n"
},
"power_production": {
"name": "power_production",
"type": "double",
"mode": "[RW]",
"doc": "The power production specific to the ElectricEnergyInterface entity type.  \n _Can only be used if this is ElectricEnergyInterface_"
},
"power_usage": {
"name": "power_usage",
"type": "double",
"mode": "[RW]",
"doc": "The power usage specific to the ElectricEnergyInterface entity type.  \n _Can only be used if this is ElectricEnergyInterface_"
},
"bounding_box": {
"name": "bounding_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "[LuaEntityPrototype::collision_box](https://lua-api.factorio.com/latest/LuaEntityPrototype.html#LuaEntityPrototype.collision_box) around entity's given position and respecting the current entity orientation.  \n"
},
"secondary_bounding_box": {
"name": "secondary_bounding_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The secondary bounding box of this entity or ````nil```` if it doesn't have one.  \n"
},
"selection_box": {
"name": "selection_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "[LuaEntityPrototype::selection_box](https://lua-api.factorio.com/latest/LuaEntityPrototype.html#LuaEntityPrototype.selection_box) around entity's given position and respecting the current entity orientation.  \n"
},
"secondary_selection_box": {
"name": "secondary_selection_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The secondary selection box of this entity or ````nil```` if it doesn't have one.  \n"
},
"mining_target": {
"name": "mining_target",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The mining target or ````nil```` if none  \n _Can only be used if this is MiningDrill_"
},
"circuit_connected_entities": {
"name": "circuit_connected_entities",
"type": "table",
"mode": "[R]",
"doc": "Entities connected to this entity via the circuit network.  \n It is a table:  \n   \n  * red :: array of [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Entities connected via the red wire.  \n  * green :: array of [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Entities connected via the green wire.  \n"
},
"circuit_connection_definitions": {
"name": "circuit_connection_definitions",
"type": "array ofCircuitConnectionDefinition",
"mode": "[R]",
"doc": "The connection definition for entities connected to this entity via the circuit network.  \n Each CircuitConnectionDefinition is a table:  \n   \n  * wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color, either [defines.wire_type.red](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.red) or [defines.wire_type.green](https://lua-api.factorio.com/latest/defines.html#defines.wire_type.green) .  \n  * target_entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * source_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  * target_circuit_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n"
},
"request_slot_count": {
"name": "request_slot_count",
"type": "uint",
"mode": "[R]",
"doc": "The number of request slots this entity has.  \n"
},
"filter_slot_count": {
"name": "filter_slot_count",
"type": "uint",
"mode": "[R]",
"doc": "The number of filter slots this inserter or loader has. 0 if not an inserter or loader.  \n"
},
"loader_container": {
"name": "loader_container",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The container entity this loader is pointing at/pulling from depending on the [LuaEntity::loader_type](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.loader_type) .  \n _Can only be used if this is Loader_"
},
"grid": {
"name": "grid",
"type": "LuaEquipmentGrid",
"mode": "[R]",
"doc": "The equipment grid or ````nil```` if this entity doesn't have an equipment grid.  \n"
},
"graphics_variation": {
"name": "graphics_variation",
"type": "uint8",
"mode": "[RW]",
"doc": "The graphics variation for this entity or ````nil```` if this entity doesn't use graphics variations.  \n"
},
"tree_color_index": {
"name": "tree_color_index",
"type": "uint8",
"mode": "[RW]",
"doc": "Index of the tree color.  \n"
},
"tree_color_index_max": {
"name": "tree_color_index_max",
"type": "uint8",
"mode": "[R]",
"doc": "Maximum index of the tree colors.  \n"
},
"tree_stage_index": {
"name": "tree_stage_index",
"type": "uint8",
"mode": "[RW]",
"doc": "Index of the tree stage.  \n"
},
"tree_stage_index_max": {
"name": "tree_stage_index_max",
"type": "uint8",
"mode": "[R]",
"doc": "Maximum index of the tree stages.  \n"
},
"tree_gray_stage_index": {
"name": "tree_gray_stage_index",
"type": "uint8",
"mode": "[RW]",
"doc": "Index of the tree gray stage  \n"
},
"tree_gray_stage_index_max": {
"name": "tree_gray_stage_index_max",
"type": "uint8",
"mode": "[R]",
"doc": "Maximum index of the tree gray stages.  \n"
},
"burner": {
"name": "burner",
"type": "LuaBurner",
"mode": "[R]",
"doc": "The burner energy source for this entity or ````nil```` if there isn't one.  \n"
},
"shooting_target": {
"name": "shooting_target",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The shooting target for this turret or ````nil```` .  \n"
},
"proxy_target": {
"name": "proxy_target",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The target entity for this item-request-proxy or ````nil````  \n"
},
"stickers": {
"name": "stickers",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "The sticker entities attached to this entity or ````nil```` if none.  \n"
},
"sticked_to": {
"name": "sticked_to",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this sticker is sticked to.  \n"
},
"parameters": {
"name": "parameters",
"type": "ProgrammableSpeakerParameters",
"mode": "[RW]",
"doc": "_Can only be used if this is ProgrammableSpeaker_"
},
"alert_parameters": {
"name": "alert_parameters",
"type": "ProgrammableSpeakerAlertParameters",
"mode": "[RW]",
"doc": "_Can only be used if this is ProgrammableSpeaker_"
},
"electric_network_statistics": {
"name": "electric_network_statistics",
"type": "LuaFlowStatistics",
"mode": "[R]",
"doc": "The electric network statistics for this electric pole.  \n _Can only be used if this is ElectricPole_"
},
"inserter_stack_size_override": {
"name": "inserter_stack_size_override",
"type": "uint",
"mode": "[RW]",
"doc": "Sets the stack size limit on this inserter. If the stack size is > than the force stack size limit the value is ignored.  \n **Note:** Set to 0 to reset."
},
"products_finished": {
"name": "products_finished",
"type": "uint",
"mode": "[RW]",
"doc": "The number of products this machine finished crafting in its lifetime.  \n _Can only be used if this is CraftingMachine_"
},
"spawner": {
"name": "spawner",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The spawner associated with this unit entity or ````nil```` if the unit has no associated spawner.  \n"
},
"units": {
"name": "units",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "The units associated with this spawner entity.  \n"
},
"power_switch_state": {
"name": "power_switch_state",
"type": "boolean",
"mode": "[RW]",
"doc": "The state of this power switch.  \n"
},
"relative_turret_orientation": {
"name": "relative_turret_orientation",
"type": "float",
"mode": "[RW]",
"doc": "The relative orientation of the vehicle turret, artillery turret, artillery wagon\n or ````nil```` if this entity isn't a vehicle with a vehicle turret or artillery turret/wagon.  \n **Note:** Writing does nothing if the vehicle doesn't have a turret."
},
"effects": {
"name": "effects",
"type": "Effects",
"mode": "[R]",
"doc": "The effects being applied to this entity or ````nil```` . For beacons this is the effect the beacon is broadcasting.  \n"
},
"infinity_container_filters": {
"name": "infinity_container_filters",
"type": "array ofInfinityInventoryFilter",
"mode": "[RW]",
"doc": "The filters for this infinity container.  \n _Can only be used if this is InfinityContainer_"
},
"remove_unfiltered_items": {
"name": "remove_unfiltered_items",
"type": "boolean",
"mode": "[RW]",
"doc": "If items not included in this infinity container filters should be removed from the container.  \n _Can only be used if this is InfinityContainer_"
},
"character_corpse_player_index": {
"name": "character_corpse_player_index",
"type": "uint",
"mode": "[RW]",
"doc": "The player index associated with this character corpse.  \n **Note:** The index is not guaranteed to be valid so it should always be checked first if a player with that index actually exists. _Can only be used if this is CharacterCorpse_"
},
"character_corpse_tick_of_death": {
"name": "character_corpse_tick_of_death",
"type": "uint",
"mode": "[RW]",
"doc": "The tick this character corpse died at.  \n _Can only be used if this is CharacterCorpse_"
},
"character_corpse_death_cause": {
"name": "character_corpse_death_cause",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The reason this character corpse character died (if any).  \n _Can only be used if this is CharacterCorpse_"
},
"associated_player": {
"name": "associated_player",
"type": "LuaPlayer",
"mode": "[RW]",
"doc": "The player this character is associated with or ````nil```` if none.\n When the player logs off in multiplayer all of the associated characters will be logged off with him.  \n **Note:** A character associated with a player is not directly controlled by any player. **Note:** Set to ````nil```` to clear. The player will be automatically disassociated when a controller is set on the character. _Can only be used if this is Character_"
},
"tick_of_last_attack": {
"name": "tick_of_last_attack",
"type": "uint",
"mode": "[RW]",
"doc": "The last tick this character entity was attacked.  \n _Can only be used if this is Character_"
},
"tick_of_last_damage": {
"name": "tick_of_last_damage",
"type": "uint",
"mode": "[RW]",
"doc": "The last tick this character entity was damaged.  \n _Can only be used if this is Character_"
},
"splitter_filter": {
"name": "splitter_filter",
"type": "LuaItemPrototype",
"mode": "[RW]",
"doc": "The filter for this splitter or ````nil```` if no filter is set.  \n _Can only be used if this is Splitter_"
},
"inserter_filter_mode": {
"name": "inserter_filter_mode",
"type": "string",
"mode": "[RW]",
"doc": "The filter mode for this filter inserter: \"whitelist\", \"blacklist\", or ````nil```` if this inserter doesn't use filters.  \n _Can only be used if this is Inserter_"
},
"splitter_input_priority": {
"name": "splitter_input_priority",
"type": "string",
"mode": "[RW]",
"doc": "The input priority for this splitter : \"left\", \"none\", or \"right\".  \n _Can only be used if this is Splitter_"
},
"splitter_output_priority": {
"name": "splitter_output_priority",
"type": "string",
"mode": "[RW]",
"doc": "The output priority for this splitter : \"left\", \"none\", or \"right\".  \n _Can only be used if this is Splitter_"
},
"armed": {
"name": "armed",
"type": "boolean",
"mode": "[R]",
"doc": "If this land mine is armed.  \n _Can only be used if this is LandMine_"
},
"recipe_locked": {
"name": "recipe_locked",
"type": "boolean",
"mode": "[RW]",
"doc": "When locked; the recipe in this assembling machine can't be changed by the player.  \n _Can only be used if this is AssemblingMachine_"
},
"connected_rail": {
"name": "connected_rail",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The rail entity this train stop is connected to or ````nil```` if there is none.  \n _Can only be used if this is TrainStop_"
},
"trains_in_block": {
"name": "trains_in_block",
"type": "uint",
"mode": "[R]",
"doc": "The number of trains in this rail block for this rail entity.  \n _Can only be used if this is Rail_"
},
"timeout": {
"name": "timeout",
"type": "uint",
"mode": "[RW]",
"doc": "The timeout left on this landmine in ticks.  \n _Can only be used if this is LandMine_"
},
"neighbour_bonus": {
"name": "neighbour_bonus",
"type": "double",
"mode": "[R]",
"doc": "The current total neighbour bonus of this reactor.  \n _Can only be used if this is Reactor_"
},
"ai_settings": {
"name": "ai_settings",
"type": "LuaAISettings",
"mode": "[R]",
"doc": "The ai settings of this unit.  \n _Can only be used if this is Unit_"
},
"highlight_box_type": {
"name": "highlight_box_type",
"type": "string",
"mode": "[RW]",
"doc": "The hightlight box type of this highlight box entity.  \n _Can only be used if this is HighlightBox_"
},
"highlight_box_blink_interval": {
"name": "highlight_box_blink_interval",
"type": "uint",
"mode": "[RW]",
"doc": "The blink interval of this highlight box entity.\n 0 indicates no blink.  \n _Can only be used if this is HighlightBox_"
},
"status": {
"name": "status",
"type": "defines.entity_status",
"mode": "[R]",
"doc": "The status of this entity or ````nil```` if no status.  \n"
},
"enable_logistics_while_moving": {
"name": "enable_logistics_while_moving",
"type": "boolean",
"mode": "[RW]",
"doc": "If equipment grid logistics are enabled while this vehicle is moving.  \n _Can only be used if this is Vehicle_"
},
"render_player": {
"name": "render_player",
"type": "LuaPlayer",
"mode": "[RW]",
"doc": "The player that this simple-entity-with-owner, simple-entity-with-force, flying-text or highlight-box is visible to or ````nil```` . Set to ````nil```` to clear.  \n"
},
"render_to_forces": {
"name": "render_to_forces",
"type": "array ofForceSpecification",
"mode": "[RW]",
"doc": "The forces that this simple-entity-with-owner, simple-entity-with-force or flying-text is visible to or ````nil```` . Set to ````nil```` to clear.  \n **Note:** Reading will always give an array of [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html)"
},
"pump_rail_target": {
"name": "pump_rail_target",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The rail target of this pump or ````nil```` .  \n _Can only be used if this is Pump_"
},
"moving": {
"name": "moving",
"type": "boolean",
"mode": "[R]",
"doc": "Returns true if this unit is moving.  \n _Can only be used if this is Unit_"
},
"electric_network_id": {
"name": "electric_network_id",
"type": "uint",
"mode": "[R]",
"doc": "Returns the id of the electric network that this entity is connected to or ````nil```` .  \n"
},
"allow_dispatching_robots": {
"name": "allow_dispatching_robots",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this character's personal roboports are allowed to dispatch robots.  \n _Can only be used if this is Character_"
},
"auto_launch": {
"name": "auto_launch",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this rocket silo automatically launches the rocket when cargo is inserted.  \n _Can only be used if this is RocketSilo_"
},
"energy_generated_last_tick": {
"name": "energy_generated_last_tick",
"type": "double",
"mode": "[R]",
"doc": "How much energy this generator generated in the last tick.  \n _Can only be used if this is Generator_"
},
"storage_filter": {
"name": "storage_filter",
"type": "LuaItemPrototype",
"mode": "[RW]",
"doc": "The storage filter for this logistic storage container.  \n"
},
"request_from_buffers": {
"name": "request_from_buffers",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this requester chest is set to also request from buffer chests.  \n **Note:** Useable only on entities that have requester slots."
},
"corpse_expires": {
"name": "corpse_expires",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this corpse will ever fade away.  \n **Note:** Useable only on corpses."
},
"corpse_immune_to_entity_placement": {
"name": "corpse_immune_to_entity_placement",
"type": "boolean",
"mode": "[RW]",
"doc": "If true, corpse won't be destroyed when entities are placed over it.\n If false, whether corpse will be removed or not depends on value of CorpsePrototype::remove_on_entity_placement.  \n **Note:** Useable only on corpses."
},
"tags": {
"name": "tags",
"type": "Tags",
"mode": "[RW]",
"doc": "The tags associated with this entity ghost or ````nil```` if not an entity ghost.  \n"
},
"command": {
"name": "command",
"type": "Command",
"mode": "[R]",
"doc": "The command given to this unit or ````nil```` is the unit has no command.  \n _Can only be used if this is Unit_"
},
"distraction_command": {
"name": "distraction_command",
"type": "Command",
"mode": "[R]",
"doc": "The distraction command given to this unit or ````nil```` is the unit currently isn't distracted.  \n _Can only be used if this is Unit_"
},
"time_to_next_effect": {
"name": "time_to_next_effect",
"type": "uint",
"mode": "[RW]",
"doc": "The ticks until the next trigger effect of this smoke-with-trigger.  \n _Can only be used if this is SmokeWithTrigger_"
},
"autopilot_destination": {
"name": "autopilot_destination",
"type": "Position",
"mode": "[RW]",
"doc": "Destination position of spidertron's autopilot. Returns ````nil```` if autopilot doesn't have destination set.  \n _Can only be used if this is SpiderVehicle_"
},
"trains_count": {
"name": "trains_count",
"type": "uint",
"mode": "[R]",
"doc": "Amount of trains related to this particular train stop. Includes train stopped at this train stop (until it\n  finds a path to next target) and trains having this train stop as goal or waypoint.  \n **Note:** Train may be included multiple times when braking distance covers this train stop multiple times **Note:** Value may be read even when train stop has no control behavior _Can only be used if this is TrainStop_"
},
"trains_limit": {
"name": "trains_limit",
"type": "uint",
"mode": "[RW]",
"doc": "Amount of trains above which no new trains will be sent to this train stop.  \n **Note:** When a train stop has a control behavior with wire connected and set_trains_limit enabled,\n       this value will be overwritten by it _Can only be used if this is TrainStop_"
},
"is_entity_with_force": {
"name": "is_entity_with_force",
"type": "boolean",
"mode": "[R]",
"doc": "If this entity is EntityWithForce  \n"
},
"is_entity_with_owner": {
"name": "is_entity_with_owner",
"type": "boolean",
"mode": "[R]",
"doc": "If this entity is EntityWithOwner  \n"
},
"is_entity_with_health": {
"name": "is_entity_with_health",
"type": "boolean",
"mode": "[R]",
"doc": "If this entity is EntityWithHealth  \n"
},
"combat_robot_owner": {
"name": "combat_robot_owner",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The owner of this combat robot if any.  \n"
},
"link_id": {
"name": "link_id",
"type": "uint",
"mode": "[RW]",
"doc": "The link ID this linked container is using.  \n"
},
"follow_target": {
"name": "follow_target",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The follow target of this spidertron if any.  \n _Can only be used if this is SpiderVehicle_"
},
"follow_offset": {
"name": "follow_offset",
"type": "Position",
"mode": "[RW]",
"doc": "The follow offset of this spidertron if any. If it is not following an entity this will be nil.\n This is randomized each time the follow entity is set.  \n _Can only be used if this is SpiderVehicle_"
},
"get_inventory": {
"name": "get_inventory",
"returns": "LuaInventory",
"args": {
"inventory": {
"name": "inventory",
"type": "defines.inventory",
"doc": "inventory :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)"
}
},
"type": "function",
"doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary\n one, like the module slots or logistic trash slots.  \n  \n**Parameters**  \ninventory :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n  \n  \n**Return value**  \nor ````nil```` if this entity doesn't have an inventory with the given index."
},
"get_main_inventory": {
"name": "get_main_inventory",
"returns": "LuaInventory",
"type": "function",
"doc": "Gets the main inventory for this character or player if this is a character or player.  \n  \n**Return value**  \nor ````nil```` if this entity is not a character or player."
},
"can_insert": {
"name": "can_insert",
"returns": "boolean",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items that would be inserted."
}
},
"type": "function",
"doc": "Can at least some items be inserted?  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items that would be inserted.  \n  \n  \n**Return value**  \n````true```` if at least a part of the given items could be inserted into this inventory."
},
"insert": {
"name": "insert",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert."
}
},
"type": "function",
"doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"best\"\n inventory is chosen automatically.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert.  \n  \n  \n**Return value**  \nNumber of items actually inserted."
},
"set_gui_arrow": {
"name": "set_gui_arrow",
"args": {
"type": {
"name": "type",
"type": "string",
"doc": "Table with the following fields:   \n  * type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Where to point to. This field determines what other fields are mandatory.\n     May be ````\"nowhere\"```` , ````\"goal\"```` , ````\"entity_info\"```` , ````\"active_window\"```` , ````\"entity\"```` , ````\"position\"```` , ````\"crafting_queue\"```` , or ````\"item_stack\"```` .  \n  * Additional ````type```` -specific parameters   \n    + entity   \n      - entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n    + position   \n      - position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n    + crafting_queue   \n      - crafting_queueindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n    + item_stack   \n      - inventory_index :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n      - item_stack_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n      - source :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  May be either ````\"player\"```` or ````\"target\"```` .  \n  \n  \n"
}
},
"type": "function",
"doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````control.lua```` in the campaign missions.  \n  \n**Parameters**  \nTable with the following fields:   \n  + type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Where to point to. This field determines what other fields are mandatory.\n     May be ````\"nowhere\"```` , ````\"goal\"```` , ````\"entity_info\"```` , ````\"active_window\"```` , ````\"entity\"```` , ````\"position\"```` , ````\"crafting_queue\"```` , or ````\"item_stack\"```` .  \n  + Additional ````type```` -specific parameters   \n    - entity   \n      * entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n    - position   \n      * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n    - crafting_queue   \n      * crafting_queueindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n    - item_stack   \n      * inventory_index :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n      * item_stack_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n      * source :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  May be either ````\"player\"```` or ````\"target\"```` .  \n  \n  \n  \n  \n"
},
"clear_gui_arrow": {
"name": "clear_gui_arrow",
"type": "function",
"doc": "Removes the arrow created by ````set_gui_arrow```` .  \n"
},
"get_item_count": {
"name": "get_item_count",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items."
}
},
"type": "function",
"doc": "Get the number of all or some items in this entity.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items.  \n  \n"
},
"has_items_inside": {
"name": "has_items_inside",
"returns": "boolean",
"type": "function",
"doc": "Does this entity have any item inside it?  \n"
},
"can_reach_entity": {
"name": "can_reach_entity",
"returns": "boolean",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
}
},
"type": "function",
"doc": "Can a given entity be opened or accessed?  \n  \n**Parameters**  \nentity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n"
},
"clear_items_inside": {
"name": "clear_items_inside",
"type": "function",
"doc": "Remove all items from this entity.  \n"
},
"remove_item": {
"name": "remove_item",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove."
}
},
"type": "function",
"doc": "Remove items from this entity.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove.  \n  \n  \n**Return value**  \nNumber of items actually removed."
},
"teleport": {
"name": "teleport",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to teleport to."
},
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Surface to teleport to. If not given, will teleport\n   to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface."
}
},
"type": "function",
"doc": "Teleport the entity to a given position, possibly on another surface.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to teleport to.  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Surface to teleport to. If not given, will teleport\n   to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.  \n  \n  \n**Return value**  \n````true```` when the entity was successfully teleported."
},
"update_selected_entity": {
"name": "update_selected_entity",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position of the entity to select"
}
},
"type": "function",
"doc": "Select an entity, as if by hovering the mouse above it.  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position of the entity to select  \n  \n"
},
"clear_selected_entity": {
"name": "clear_selected_entity",
"type": "function",
"doc": "Unselect any selected entity.  \n"
},
"disable_flashlight": {
"name": "disable_flashlight",
"type": "function",
"doc": "Disable the flashlight.  \n"
},
"enable_flashlight": {
"name": "enable_flashlight",
"type": "function",
"doc": "Enable the flashlight.  \n"
},
"is_flashlight_enabled": {
"name": "is_flashlight_enabled",
"type": "function",
"doc": "Is the flashlight enabled.  \n"
},
"get_craftable_count": {
"name": "get_craftable_count",
"returns": "uint",
"args": {
"recipe": {
"name": "recipe",
"type": "stringorLuaRecipe",
"doc": "recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe."
}
},
"type": "function",
"doc": "Gets the count of the given recipe that can be crafted.  \n  \n**Parameters**  \nrecipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe.  \n  \n  \n**Return value**  \nThe count that can be crafted."
},
"begin_crafting": {
"name": "begin_crafting",
"returns": "uint",
"args": {
"count": {
"name": "count",
"type": "uint",
"doc": "  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to craft.  \n  * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe to craft.  \n  * silent :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n"
}
},
"type": "function",
"doc": "Begins crafting the given count of the given recipe  \n  \n**Parameters**  \n  \n  + count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to craft.  \n  + recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe to craft.  \n  + silent :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n  \n  \n  \n**Return value**  \nThe count that was actually started crafting."
},
"cancel_crafting": {
"name": "cancel_crafting",
"args": {
"options": {
"name": "options",
"type": "uint",
"doc": "options : :   \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index.  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to cancel crafting.  \n"
}
},
"type": "function",
"doc": "Cancels crafting the given count of the given crafting queue index  \n  \n**Parameters**  \noptions : :   \n  + index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index.  \n  + count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to cancel crafting.  \n  \n  \n"
},
"mine_entity": {
"name": "mine_entity",
"returns": "boolean",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to mine"
},
"force": {
"name": "force",
"type": "boolean",
"doc": "force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Forces mining the entity even if the items can't fit in the player."
}
},
"type": "function",
"doc": "Mines the given entity as if this player (or character) mined it.  \n  \n**Parameters**  \n* entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to mine  \n* force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Forces mining the entity even if the items can't fit in the player.  \n  \n  \n**Return value**  \nIf the mining succeeded."
},
"mine_tile": {
"name": "mine_tile",
"returns": "boolean",
"args": {
"tile": {
"name": "tile",
"type": "LuaTile",
"doc": "tile :: [LuaTile](https://lua-api.factorio.com/latest/LuaTile.html) :  The tile to mine."
}
},
"type": "function",
"doc": "Mines the given tile as if this player (or character) mined it.  \n  \n**Parameters**  \ntile :: [LuaTile](https://lua-api.factorio.com/latest/LuaTile.html) :  The tile to mine.  \n  \n  \n**Return value**  \nIf the mining succeeded."
},
"is_player": {
"name": "is_player",
"returns": "boolean",
"type": "function",
"doc": "When ````true```` control adapter is a LuaPlayer object, ````false```` for entities including characters with players  \n"
},
"open_technology_gui": {
"name": "open_technology_gui",
"args": {
"technology": {
"name": "technology",
"type": "TechnologySpecification",
"doc": "technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional) :  The technology to select after opening the GUI."
}
},
"type": "function",
"doc": "Open the technology GUI and select a given technology.  \n  \n**Parameters**  \ntechnology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional) :  The technology to select after opening the GUI.  \n  \n"
},
"set_personal_logistic_slot": {
"name": "set_personal_logistic_slot",
"returns": "boolean",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/"
},
"value": {
"name": "value",
"type": "PersonalLogisticParameters",
"doc": "value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)"
}
},
"type": "function",
"doc": "Sets the personal request and trash to the given values.  \n  \n**Parameters**  \n* slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/  \n* value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)  \n  \n  \n**Return value**  \nIf the slot was set."
},
"set_vehicle_logistic_slot": {
"name": "set_vehicle_logistic_slot",
"returns": "boolean",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/"
},
"value": {
"name": "value",
"type": "PersonalLogisticParameters",
"doc": "value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)"
}
},
"type": "function",
"doc": "Sets the vehicle logistic request and trash to the given values.  \n  \n**Parameters**  \n* slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/  \n* value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)  \n  \n  \n**Return value**  \nIf the slot was set."
},
"get_personal_logistic_slot": {
"name": "get_personal_logistic_slot",
"returns": "PersonalLogisticParameters",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get."
}
},
"type": "function",
"doc": "Sets the personal request and trash to the given values.  \n  \n**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get.  \n  \n"
},
"get_vehicle_logistic_slot": {
"name": "get_vehicle_logistic_slot",
"returns": "PersonalLogisticParameters",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get."
}
},
"type": "function",
"doc": "Sets the vehicle logistic request and trash to the given values.  \n  \n**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get.  \n  \n"
},
"clear_personal_logistic_slot": {
"name": "clear_personal_logistic_slot",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear."
}
},
"type": "function",
"doc": "**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear.  \n  \n"
},
"clear_vehicle_logistic_slot": {
"name": "clear_vehicle_logistic_slot",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear."
}
},
"type": "function",
"doc": "**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear.  \n  \n"
},
"is_cursor_blueprint": {
"name": "is_cursor_blueprint",
"returns": "boolean",
"type": "function",
"doc": "Returns whether the player is holding a blueprint, it takes into account a blueprint as an item as well as blueprint\n from the blueprint record from the blueprint library.\n Note that the is_cursor_blueprint and get_cursor_blueprint_entities refer to the currently selected blueprint, so\n it returns blueprint related information also when holding a blueprint book with a blueprint being selected in it.  \n"
},
"get_blueprint_entities": {
"name": "get_blueprint_entities",
"returns": "array ofblueprint entity",
"type": "function",
"doc": "Returns the same type of data as LuaItemStack::readBlueprintEntities, but works for the currently selected blueprint,\n regardless of it being in a blueprint book or picked from the blueprint library.  \n"
},
"surface": {
"name": "surface",
"type": "LuaSurface",
"mode": "[R]",
"doc": "The surface this entity is currently on.  \n"
},
"position": {
"name": "position",
"type": "Position",
"mode": "[R]",
"doc": "Current position of the entity.  \n"
},
"vehicle": {
"name": "vehicle",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The vehicle the player is currently sitting in; ````nil```` if none.  \n"
},
"force": {
"name": "force",
"type": "ForceSpecification",
"mode": "[RW]",
"doc": "The force of this entity. Reading will always give a [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) , but it is possible to\n assign either [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the force.  \n"
},
"selected": {
"name": "selected",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The currently selected entity; ````nil```` if none. Assigning an entity will select it if selectable otherwise clears selection.  \n"
},
"opened": {
"name": "opened",
"type": "LuaEntityorLuaItemStackorLuaEquipmentorLuaEquipmentGridorLuaPlayerorLuaGuiElementordefines.gui_type",
"mode": "[RW]",
"doc": "The GUI target the player currently has open; ````nil```` if none.  \n **Note:** Write supports any of the types. Read will return the entity, equipment, equipment-grid, player, element or nil."
},
"crafting_queue_size": {
"name": "crafting_queue_size",
"type": "uint",
"mode": "[R]",
"doc": "Size of the crafting queue.  \n"
},
"crafting_queue_progress": {
"name": "crafting_queue_progress",
"type": "double",
"mode": "[R]",
"doc": "The crafting queue progress [0-1]\n 0 when no recipe is being crafted.  \n"
},
"walking_state": {
"name": "walking_state",
"type": "table",
"mode": "[RW]",
"doc": "Current walking state.  \n It is a table with two fields:  \n   \n  * walking :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If ````false```` , the player is currently not walking; otherwise it's going somewhere  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) :  Direction where the player is walking  \n Example Make the player go north. Note that a one-shot action like this will only make the player walk for one tick. ````game.player.walking_state\u00a0=\u00a0{walking\u00a0=\u00a0true,\u00a0direction\u00a0=\u00a0defines.direction.north}````"
},
"riding_state": {
"name": "riding_state",
"type": "RidingState",
"mode": "[RW]",
"doc": "Current riding state of this car or the vehicle this player is riding in.  \n"
},
"mining_state": {
"name": "mining_state",
"type": "table",
"mode": "[RW]",
"doc": "Current mining state.  \n It is a table with two fields:  \n   \n  * mining :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Whether the player is mining at all  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n **Note:** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](https://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](https://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity) ."
},
"shooting_state": {
"name": "shooting_state",
"type": "table",
"mode": "[RW]",
"doc": "Current shooting state.  \n It is a table with two fields:  \n   \n  * state :: [defines.shooting](https://lua-api.factorio.com/latest/defines.html#defines.shooting) :  The current state  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position being shot at  \n"
},
"picking_state": {
"name": "picking_state",
"type": "boolean",
"mode": "[RW]",
"doc": "Current item-picking state.  \n"
},
"repair_state": {
"name": "repair_state",
"type": "table",
"mode": "[RW]",
"doc": "Current repair state.  \n It is a table with two fields:  \n   \n  * repairing :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  The current state  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position being repaired  \n"
},
"cursor_stack": {
"name": "cursor_stack",
"type": "LuaItemStack",
"mode": "[R]",
"doc": "The player's cursor stack, or ````nil```` if the player controller is a spectator.  \n"
},
"cursor_ghost": {
"name": "cursor_ghost",
"type": "ItemPrototypeSpecification",
"mode": "[RW]",
"doc": "The ghost prototype in the player's cursor.  \n **Note:** When read, it will be a [LuaItemPrototype](https://lua-api.factorio.com/latest/LuaItemPrototype.html) . **Note:** Items in the cursor stack will take priority over the cursor ghost."
},
"driving": {
"name": "driving",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the player is in a vehicle. Writing to this attribute puts the player in or out of a\n vehicle.  \n"
},
"crafting_queue": {
"name": "crafting_queue",
"type": "array ofCraftingQueueItem",
"mode": "[R]",
"doc": "Gets the current crafting queue items.  \n Each CraftingQueueItem is a table:  \n   \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index  \n  * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The recipe.  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count being crafted.  \n"
},
"following_robots": {
"name": "following_robots",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "The current combat robots following the character  \n **Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character(see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"cheat_mode": {
"name": "cheat_mode",
"type": "boolean",
"mode": "[RW]",
"doc": "When ````true```` hand crafting is free and instant  \n"
},
"character_crafting_speed_modifier": {
"name": "character_crafting_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_mining_speed_modifier": {
"name": "character_mining_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_additional_mining_categories": {
"name": "character_additional_mining_categories",
"type": "array ofstring",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_running_speed_modifier": {
"name": "character_running_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_build_distance_bonus": {
"name": "character_build_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_item_drop_distance_bonus": {
"name": "character_item_drop_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_reach_distance_bonus": {
"name": "character_reach_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_resource_reach_distance_bonus": {
"name": "character_resource_reach_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_item_pickup_distance_bonus": {
"name": "character_item_pickup_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_loot_pickup_distance_bonus": {
"name": "character_loot_pickup_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_inventory_slots_bonus": {
"name": "character_inventory_slots_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_trash_slot_count_bonus": {
"name": "character_trash_slot_count_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_maximum_following_robot_count_bonus": {
"name": "character_maximum_following_robot_count_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_health_bonus": {
"name": "character_health_bonus",
"type": "float",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_personal_logistic_requests_enabled": {
"name": "character_personal_logistic_requests_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "If personal logistic requests are enabled for this character or players character.  \n"
},
"vehicle_logistic_requests_enabled": {
"name": "vehicle_logistic_requests_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "If personal logistic requests are enabled for this vehicle (spidertron).  \n"
},
"opened_gui_type": {
"name": "opened_gui_type",
"type": "defines.gui_type",
"mode": "[R]",
"doc": "Returns the [defines.gui_type](https://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````nil```` .  \n"
},
"build_distance": {
"name": "build_distance",
"type": "uint",
"mode": "[R]",
"doc": "The build distance of this character or max uint when not a character or player connected to a character.  \n"
},
"drop_item_distance": {
"name": "drop_item_distance",
"type": "uint",
"mode": "[R]",
"doc": "The item drop distance of this character or max uint when not a character or player connected to a character.  \n"
},
"reach_distance": {
"name": "reach_distance",
"type": "uint",
"mode": "[R]",
"doc": "The reach distance of this character or max uint when not a character or player connected to a character.  \n"
},
"item_pickup_distance": {
"name": "item_pickup_distance",
"type": "double",
"mode": "[R]",
"doc": "The item pickup distance of this character or max double when not a character or player connected to a character.  \n"
},
"loot_pickup_distance": {
"name": "loot_pickup_distance",
"type": "double",
"mode": "[R]",
"doc": "The loot pickup distance of this character or max double when not a character or player connected to a character.  \n"
},
"resource_reach_distance": {
"name": "resource_reach_distance",
"type": "double",
"mode": "[R]",
"doc": "The resource reach distance of this character or max double when not a character or player connected to a character.  \n"
},
"in_combat": {
"name": "in_combat",
"type": "boolean",
"mode": "[R]",
"doc": "If this character entity is in combat.  \n"
},
"character_running_speed": {
"name": "character_running_speed",
"type": "double",
"mode": "[R]",
"doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting.  \n"
},
"character_mining_progress": {
"name": "character_mining_progress",
"type": "double",
"mode": "[R]",
"doc": "Gets the current mining progress between 0 and 1 of this character, or 0 if they aren't mining.  \n"
}
},
"inherits": [
"Inherited from LuaControl : get_inventory , get_main_inventory , can_insert , insert , set_gui_arrow , clear_gui_arrow , get_item_count , has_items_inside , can_reach_entity , clear_items_inside , remove_item , teleport , update_selected_entity , clear_selected_entity , disable_flashlight , enable_flashlight , is_flashlight_enabled , get_craftable_count , begin_crafting , cancel_crafting , mine_entity , mine_tile , is_player , open_technology_gui , set_personal_logistic_slot , set_vehicle_logistic_slot , get_personal_logistic_slot , get_vehicle_logistic_slot , clear_personal_logistic_slot , clear_vehicle_logistic_slot , is_cursor_blueprint , get_blueprint_entities , surface , position , vehicle , force , selected , opened , crafting_queue_size , crafting_queue_progress , walking_state , riding_state , mining_state , shooting_state , picking_state , repair_state , cursor_stack , cursor_ghost , driving , crafting_queue , following_robots , cheat_mode , character_crafting_speed_modifier , character_mining_speed_modifier , character_additional_mining_categories , character_running_speed_modifier , character_build_distance_bonus , character_item_drop_distance_bonus , character_reach_distance_bonus , character_resource_reach_distance_bonus , character_item_pickup_distance_bonus , character_loot_pickup_distance_bonus , character_inventory_slots_bonus , character_trash_slot_count_bonus , character_maximum_following_robot_count_bonus , character_health_bonus , character_personal_logistic_requests_enabled , vehicle_logistic_requests_enabled , opened_gui_type , build_distance , drop_item_distance , reach_distance , item_pickup_distance , loot_pickup_distance , resource_reach_distance , in_combat , character_running_speed , character_mining_progress"
]
},
"LuaEntityPrototype": {
"name": "LuaEntityPrototype",
"type": "LuaEntityPrototype",
"doc": "Prototype of an entity.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"has_flag": {
"name": "has_flag",
"returns": "boolean",
"args": {
"flag": {
"name": "flag",
"type": "string",
"doc": "flag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The flag to check. Must be one of   \n  * ````\"not-rotatable\"````  \n  * ````\"placeable-neutral\"````  \n  * ````\"placeable-player\"````  \n  * ````\"placeable-enemy\"````  \n  * ````\"placeable-off-grid\"````  \n  * ````\"player-creation\"````  \n  * ````\"building-direction-8-way\"````  \n  * ````\"filter-directions\"````  \n  * ````\"fast-replaceable-no-build-while-moving\"````  \n  * ````\"breaths-air\"````  \n  * ````\"not-repairable\"````  \n  * ````\"not-on-map\"````  \n  * ````\"not-deconstructable\"````  \n  * ````\"not-blueprintable\"````  \n  * ````\"hide-from-bonus-gui\"````  \n  * ````\"hide-alt-info\"````  \n  * ````\"fast-replaceable-no-cross-type-while-moving\"````  \n  * ````\"no-gap-fill-while-building\"````  \n  * ````\"not-flammable\"````  \n  * ````\"no-automated-item-removal\"````  \n  * ````\"no-automated-item-insertion\"````  \n  * ````\"not-upgradable\"````  \n"
}
},
"type": "function",
"doc": "Does this prototype have a flag enabled?  \n  \n**Parameters**  \nflag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The flag to check. Must be one of   \n  + ````\"not-rotatable\"````  \n  + ````\"placeable-neutral\"````  \n  + ````\"placeable-player\"````  \n  + ````\"placeable-enemy\"````  \n  + ````\"placeable-off-grid\"````  \n  + ````\"player-creation\"````  \n  + ````\"building-direction-8-way\"````  \n  + ````\"filter-directions\"````  \n  + ````\"fast-replaceable-no-build-while-moving\"````  \n  + ````\"breaths-air\"````  \n  + ````\"not-repairable\"````  \n  + ````\"not-on-map\"````  \n  + ````\"not-deconstructable\"````  \n  + ````\"not-blueprintable\"````  \n  + ````\"hide-from-bonus-gui\"````  \n  + ````\"hide-alt-info\"````  \n  + ````\"fast-replaceable-no-cross-type-while-moving\"````  \n  + ````\"no-gap-fill-while-building\"````  \n  + ````\"not-flammable\"````  \n  + ````\"no-automated-item-removal\"````  \n  + ````\"no-automated-item-insertion\"````  \n  + ````\"not-upgradable\"````  \n  \n  \n"
},
"get_inventory_size": {
"name": "get_inventory_size",
"returns": "uint",
"args": {
"index": {
"name": "index",
"type": "defines.inventory",
"doc": "index :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)"
}
},
"type": "function",
"doc": "Gets the base size of the given inventory on this entity or ````nil```` if the given inventory doesn't exist.  \n  \n**Parameters**  \nindex :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n  \n"
},
"type": {
"name": "type",
"type": "string",
"mode": "[R]",
"doc": "Type of this prototype.  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"max_health": {
"name": "max_health",
"type": "float",
"mode": "[R]",
"doc": "Max health of this entity. Will be ````0```` if this is not an entity with health.  \n"
},
"infinite_resource": {
"name": "infinite_resource",
"type": "boolean",
"mode": "[R]",
"doc": "Is this resource infinite? Will be ````nil```` when used on a non-resource.  \n"
},
"minimum_resource_amount": {
"name": "minimum_resource_amount",
"type": "uint",
"mode": "[R]",
"doc": "Minimum amount of this resource. Will be ````nil```` when used on a non-resource.  \n"
},
"normal_resource_amount": {
"name": "normal_resource_amount",
"type": "uint",
"mode": "[R]",
"doc": "The normal amount for this resource. ````nil```` when not a resource.  \n"
},
"infinite_depletion_resource_amount": {
"name": "infinite_depletion_resource_amount",
"type": "uint",
"mode": "[R]",
"doc": "Every time this infinite resource 'ticks' down it is reduced by this amount. ````nil```` when not a resource. Meaningless if this isn't an infinite type resource.  \n"
},
"resource_category": {
"name": "resource_category",
"type": "string",
"mode": "[R]",
"doc": "Name of the category of this resource or ````nil```` when not a resource.  \n **Note:** During data stage this property is named \"category\"."
},
"mineable_properties": {
"name": "mineable_properties",
"type": "table",
"mode": "[R]",
"doc": "Whether this entity is minable and what can be obtained by mining it.  \n Table with the following fields:   \n  * minable :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Is this entity mineable at all?  \n  * mining_time :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Energy required to mine an entity.  \n  * mining_particle :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the particle produced when mining this entity.\n     Will only be present if this entity produces any particle during mining.  \n  * products :: array of [Product](https://lua-api.factorio.com/latest/Concepts.html#Product) (optional) :  Products obtained by mining this entity.  \n  * fluid_amount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The required fluid amount if any.  \n  * required_fluid :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The prototype name of the required fluid if any.  \n  * mining_trigger :: [Trigger](https://lua-api.factorio.com/latest/Concepts.html#Trigger) (optional) :  The mining trigger if any.  \n"
},
"items_to_place_this": {
"name": "items_to_place_this",
"type": "array ofSimpleItemStack",
"mode": "[R]",
"doc": "Items that when placed will produce this entity. It is an array of items or ````nil```` for no items.  \n"
},
"collision_box": {
"name": "collision_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The bounding box used for collision checking.  \n"
},
"secondary_collision_box": {
"name": "secondary_collision_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The secondary bounding box used for collision checking, or ````nil```` if it doesn't have one. This is only used in rails and rail remnants.  \n"
},
"map_generator_bounding_box": {
"name": "map_generator_bounding_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The bounding box used for map generator collision checking.  \n"
},
"selection_box": {
"name": "selection_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The bounding box used for drawing selection.  \n"
},
"drawing_box": {
"name": "drawing_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The bounding box used for drawing the entity icon.  \n"
},
"sticker_box": {
"name": "sticker_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The bounding box used to attach sticker type entities.  \n"
},
"collision_mask": {
"name": "collision_mask",
"type": "CollisionMask",
"mode": "[R]",
"doc": "The collision masks this entity uses  \n"
},
"collision_mask_with_flags": {
"name": "collision_mask_with_flags",
"type": "CollisionMaskWithFlags",
"mode": "[R]"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"group": {
"name": "group",
"type": "LuaGroup",
"mode": "[R]",
"doc": "Group of this entity.  \n"
},
"subgroup": {
"name": "subgroup",
"type": "LuaGroup",
"mode": "[R]",
"doc": "Subgroup of this entity.  \n"
},
"healing_per_tick": {
"name": "healing_per_tick",
"type": "float",
"mode": "[R]",
"doc": "Amount this entity can heal per tick.  \n"
},
"emissions_per_second": {
"name": "emissions_per_second",
"type": "double",
"mode": "[R]",
"doc": "Amount of pollution emissions per second this entity will create.  \n"
},
"corpses": {
"name": "corpses",
"type": "dictionarystring\u2192LuaEntityPrototype",
"mode": "[R]",
"doc": "Corpses used when this entity is destroyed. It is a dictionary indexed by the corpse's prototype\n name.  \n"
},
"selectable_in_game": {
"name": "selectable_in_game",
"type": "boolean",
"mode": "[R]",
"doc": "Is this entity selectable?  \n"
},
"selection_priority": {
"name": "selection_priority",
"type": "uint",
"mode": "[R]",
"doc": "The selection priority of this entity - a value between 0 and 255  \n"
},
"weight": {
"name": "weight",
"type": "double",
"mode": "[R]",
"doc": "The weight of this vehicle prototype or ````nil```` if not a vehicle prototype.  \n"
},
"resistances": {
"name": "resistances",
"type": "Resistances",
"mode": "[R]"
},
"fast_replaceable_group": {
"name": "fast_replaceable_group",
"type": "string",
"mode": "[R]",
"doc": "The group of mutually fast-replaceable entities. Possibly ````nil```` .  \n"
},
"next_upgrade": {
"name": "next_upgrade",
"type": "LuaEntityPrototype",
"mode": "[R]",
"doc": "The next upgrade for this entity or ````nil```` .  \n"
},
"loot": {
"name": "loot",
"type": "Loot",
"mode": "[R]",
"doc": "Loot that will be dropped when this entity is killed. ````nil```` if there is no loot.  \n"
},
"repair_speed_modifier": {
"name": "repair_speed_modifier",
"type": "uint",
"mode": "[R]",
"doc": "Repair-speed modifier for this entity. Actual repair speed will be ````tool_repair_speed * entity_repair_speed_modifier```` . May be ````nil```` .  \n"
},
"turret_range": {
"name": "turret_range",
"type": "uint",
"mode": "[R]",
"doc": "The range of this turret or ````nil```` if this isn't a turret related prototype.  \n"
},
"autoplace_specification": {
"name": "autoplace_specification",
"type": "AutoplaceSpecification",
"mode": "[R]",
"doc": "Autoplace specification for this entity prototype. ````nil```` if none.  \n"
},
"belt_speed": {
"name": "belt_speed",
"type": "double",
"mode": "[R]",
"doc": "The speed of this transport belt or ````nil```` if this isn't a transport belt related prototype.  \n"
},
"result_units": {
"name": "result_units",
"type": "array ofUnitSpawnDefinition",
"mode": "[R]",
"doc": "The result units and spawn points with weight and evolution factor for a biter spawner entity.  \n Each UnitSpawnDefinition is a table:  \n   \n  * unit :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the unit that would be spawned  \n  * spawn_points :: array of SpawnPoint :  Each SpawnPoint is a table:   \n    + evolution_factor :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Evolution factor for which this weight applies.  \n    + weight :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Probability of spawning this unit at this evolution factor.  \n  \n"
},
"attack_result": {
"name": "attack_result",
"type": "Trigger",
"mode": "[R]",
"doc": "The attack result of this entity if the entity has one, else ````nil```` .  \n"
},
"final_attack_result": {
"name": "final_attack_result",
"type": "Trigger",
"mode": "[R]",
"doc": "The final attack result for projectiles ````nil```` if not a projectile  \n"
},
"attack_parameters": {
"name": "attack_parameters",
"type": "AttackParameters",
"mode": "[R]",
"doc": "The attack parameters for this entity or ````nil```` if the entity doesn't use attack parameters.  \n"
},
"spawn_cooldown": {
"name": "spawn_cooldown",
"type": "table",
"mode": "[R]",
"doc": "The spawning cooldown for this enemy spawner prototype or ````nil```` .\n It is a table:  \n   \n  * min :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  * max :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n"
},
"mining_drill_radius": {
"name": "mining_drill_radius",
"type": "double",
"mode": "[R]",
"doc": "The mining radius of this mining drill prototype or ````nil```` if this isn't a mining drill prototype.  \n"
},
"mining_speed": {
"name": "mining_speed",
"type": "double",
"mode": "[R]",
"doc": "The mining speed of this mining drill/character prototype or ````nil```` .  \n"
},
"logistic_mode": {
"name": "logistic_mode",
"type": "string",
"mode": "[R]",
"doc": "The logistic mode of this logistic container or ````nil```` if this isn't a logistic container prototype.  \n"
},
"max_underground_distance": {
"name": "max_underground_distance",
"type": "uint8",
"mode": "[R]",
"doc": "The max underground distance for underground belts and underground pipes or ````nil```` if this isn't one of those prototypes.  \n"
},
"flags": {
"name": "flags",
"type": "EntityPrototypeFlags",
"mode": "[R]",
"doc": "The entity prototype flags for this entity.  \n"
},
"remains_when_mined": {
"name": "remains_when_mined",
"type": "array ofLuaEntityPrototype",
"mode": "[R]",
"doc": "The remains left behind when this entity is mined.  \n"
},
"additional_pastable_entities": {
"name": "additional_pastable_entities",
"type": "array ofLuaEntityPrototype",
"mode": "[R]",
"doc": "Entities this entity can be pasted onto in addition to the normal allowed ones.  \n"
},
"allow_copy_paste": {
"name": "allow_copy_paste",
"type": "boolean",
"mode": "[R]",
"doc": "When false copy-paste is not allowed for this entity.  \n"
},
"shooting_cursor_size": {
"name": "shooting_cursor_size",
"type": "double",
"mode": "[R]",
"doc": "The cursor size used when shooting at this entity.  \n"
},
"created_smoke": {
"name": "created_smoke",
"type": "table",
"mode": "[R]",
"doc": "The smoke trigger run when this entity is built or ````nil```` .  \n It is a table:  \n"
},
"created_effect": {
"name": "created_effect",
"type": "Trigger",
"mode": "[R]",
"doc": "The trigger run when this entity is created or ````nil```` .  \n"
},
"map_color": {
"name": "map_color",
"type": "Color",
"mode": "[R]",
"doc": "The map color used when charting this entity if a friendly or enemy color isn't defined or ````nil```` .  \n"
},
"friendly_map_color": {
"name": "friendly_map_color",
"type": "Color",
"mode": "[R]",
"doc": "The friendly map color used when charting this entity.  \n"
},
"enemy_map_color": {
"name": "enemy_map_color",
"type": "Color",
"mode": "[R]",
"doc": "The enemy map color used when charting this entity.  \n"
},
"build_base_evolution_requirement": {
"name": "build_base_evolution_requirement",
"type": "double",
"mode": "[R]",
"doc": "The evolution requirement to build this entity as a base when expanding enemy bases.  \n"
},
"instruments": {
"name": "instruments",
"type": "array ofProgrammableSpeakerInstrument",
"mode": "[R]",
"doc": "The instruments for this programmable speaker or ````nil```` .  \n"
},
"max_polyphony": {
"name": "max_polyphony",
"type": "uint",
"mode": "[R]",
"doc": "The maximum polyphony for this programmable speaker or ````nil```` .  \n"
},
"module_inventory_size": {
"name": "module_inventory_size",
"type": "uint",
"mode": "[R]",
"doc": "The module inventory size or ````nil```` if this entity doesn't support modules.  \n"
},
"ingredient_count": {
"name": "ingredient_count",
"type": "uint",
"mode": "[R]",
"doc": "The max number of ingredients this crafting-machine prototype supports or ````nil```` if this isn't a crafting-machine prototype.  \n"
},
"crafting_speed": {
"name": "crafting_speed",
"type": "double",
"mode": "[R]",
"doc": "The crafting speed of this crafting-machine or ````nil```` .  \n"
},
"crafting_categories": {
"name": "crafting_categories",
"type": "dictionarystring\u2192boolean",
"mode": "[R]",
"doc": "The crafting categories this entity supports. Only meaningful when this is a crafting-machine or player entity type.  \n **Note:** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
},
"resource_categories": {
"name": "resource_categories",
"type": "dictionarystring\u2192boolean",
"mode": "[R]",
"doc": "The resource categories this mining drill supports or ````nil```` if not a mining dill.  \n **Note:** The value in the dictionary is meaningless and exists just to allow the dictionary type for easy lookup."
},
"supply_area_distance": {
"name": "supply_area_distance",
"type": "double",
"mode": "[R]",
"doc": "The supply area of this electric pole, beacon, or ````nil```` if this is neither.  \n"
},
"max_wire_distance": {
"name": "max_wire_distance",
"type": "double",
"mode": "[R]",
"doc": "The maximum wire distance for this entity. 0 when the entity doesn't support wires.  \n"
},
"max_circuit_wire_distance": {
"name": "max_circuit_wire_distance",
"type": "double",
"mode": "[R]",
"doc": "The maximum circuit wire distance for this entity. 0 when the entity doesn't support circuit wires.  \n"
},
"energy_usage": {
"name": "energy_usage",
"type": "double",
"mode": "[R]",
"doc": "The direct energy usage of this entity or ````nil```` if this entity doesn't have a direct energy usage.  \n"
},
"max_energy_usage": {
"name": "max_energy_usage",
"type": "double",
"mode": "[R]",
"doc": "The theoretical maximum energy usage for this entity.  \n"
},
"max_energy_production": {
"name": "max_energy_production",
"type": "double",
"mode": "[R]",
"doc": "The theoretical maximum energy production for this this entity.  \n"
},
"effectivity": {
"name": "effectivity",
"type": "double",
"mode": "[R]",
"doc": "The effectivity of this car prototype, generator prototype or ````nil```` .  \n"
},
"consumption": {
"name": "consumption",
"type": "double",
"mode": "[R]",
"doc": "The energy consumption of this car prototype or ````nil```` if not a car prototype.  \n"
},
"friction_force": {
"name": "friction_force",
"type": "double",
"mode": "[R]",
"doc": "The friction of this vehicle prototype or ````nil```` if not a vehicle prototype.  \n"
},
"braking_force": {
"name": "braking_force",
"type": "double",
"mode": "[R]",
"doc": "The braking force of this vehicle prototype or ````nil```` if not a vehicle prototype.  \n"
},
"tank_driving": {
"name": "tank_driving",
"type": "boolean",
"mode": "[R]",
"doc": "If this car prototype uses tank controls to drive or ````nil```` if this is not a car prototype.  \n"
},
"rotation_speed": {
"name": "rotation_speed",
"type": "double",
"mode": "[R]",
"doc": "The rotation speed of this car prototype or ````nil```` if not a car prototype.  \n"
},
"turret_rotation_speed": {
"name": "turret_rotation_speed",
"type": "double",
"mode": "[R]",
"doc": "The turret rotation speed of this car prototype or ````nil```` if not a car prototype.  \n"
},
"guns": {
"name": "guns",
"type": "dictionarystring\u2192LuaItemPrototype",
"mode": "[R]",
"doc": "The guns this prototype uses or ````nil```` .  \n"
},
"speed": {
"name": "speed",
"type": "double",
"mode": "[R]",
"doc": "The default speed of this flying robot, rolling stock, unit or ````nil```` .  \n"
},
"speed_multiplier_when_out_of_energy": {
"name": "speed_multiplier_when_out_of_energy",
"type": "float",
"mode": "[R]",
"doc": "The speed multiplier when this flying robot is out of energy or ````nil```` .  \n"
},
"max_payload_size": {
"name": "max_payload_size",
"type": "uint",
"mode": "[R]",
"doc": "The max payload size of this logistics or construction robot or ````nil```` .  \n"
},
"draw_cargo": {
"name": "draw_cargo",
"type": "boolean",
"mode": "[R]",
"doc": "Whether this logistics or construction robot renders its cargo when flying or ````nil```` .  \n"
},
"energy_per_move": {
"name": "energy_per_move",
"type": "double",
"mode": "[R]",
"doc": "The energy consumed per tile moved for this flying robot or ````nil```` .  \n"
},
"energy_per_tick": {
"name": "energy_per_tick",
"type": "double",
"mode": "[R]",
"doc": "The energy consumed per tick for this flying robot or ````nil```` .  \n"
},
"max_energy": {
"name": "max_energy",
"type": "double",
"mode": "[R]",
"doc": "The max energy for this flying robot or ````nil```` .  \n"
},
"min_to_charge": {
"name": "min_to_charge",
"type": "float",
"mode": "[R]",
"doc": "The minimum energy for this flying robot before it tries to recharge or ````nil```` .  \n"
},
"max_to_charge": {
"name": "max_to_charge",
"type": "float",
"mode": "[R]",
"doc": "The maximum energy for this flying robot above which it won't try to recharge when stationing or ````nil```` .  \n"
},
"burner_prototype": {
"name": "burner_prototype",
"type": "LuaBurnerPrototype",
"mode": "[R]",
"doc": "The burner energy source prototype this entity uses or ````nil```` .  \n"
},
"electric_energy_source_prototype": {
"name": "electric_energy_source_prototype",
"type": "LuaElectricEnergySourcePrototype",
"mode": "[R]",
"doc": "The electric energy source prototype this entity uses or ````nil```` .  \n"
},
"heat_energy_source_prototype": {
"name": "heat_energy_source_prototype",
"type": "LuaHeatEnergySourcePrototype",
"mode": "[R]",
"doc": "The heat energy source prototype this entity uses or ````nil```` .  \n"
},
"fluid_energy_source_prototype": {
"name": "fluid_energy_source_prototype",
"type": "LuaFluidEnergySourcePrototype",
"mode": "[R]",
"doc": "The fluid energy source prototype this entity uses or ````nil```` .  \n"
},
"void_energy_source_prototype": {
"name": "void_energy_source_prototype",
"type": "LuaVoidEnergySourcePrototype",
"mode": "[R]",
"doc": "The void energy source prototype this entity uses or ````nil```` .  \n"
},
"building_grid_bit_shift": {
"name": "building_grid_bit_shift",
"type": "uint",
"mode": "[R]",
"doc": "The log2 of grid size of the building  \n"
},
"fluid_usage_per_tick": {
"name": "fluid_usage_per_tick",
"type": "double",
"mode": "[R]",
"doc": "The fluid usage of this generator prototype or ````nil```` .  \n"
},
"maximum_temperature": {
"name": "maximum_temperature",
"type": "double",
"mode": "[R]",
"doc": "The maximum fluid temperature of this generator prototype or ````nil```` .  \n"
},
"target_temperature": {
"name": "target_temperature",
"type": "double",
"mode": "[R]",
"doc": "The target temperature of this boiler prototype or ````nil```` .  \n"
},
"fluid": {
"name": "fluid",
"type": "LuaFluidPrototype",
"mode": "[R]",
"doc": "The fluid this offshore pump produces or ````nil```` .  \n"
},
"fluid_capacity": {
"name": "fluid_capacity",
"type": "double",
"mode": "[R]",
"doc": "The fluid capacity of this entity or 0 if this entity doesn't support fluids.  \n **Note:** Crafting machines will report 0 due to their fluid capacity being what ever a given recipe needs."
},
"pumping_speed": {
"name": "pumping_speed",
"type": "double",
"mode": "[R]",
"doc": "The pumping speed of this offshore pump, normal pump, or ````nil```` .  \n"
},
"stack": {
"name": "stack",
"type": "boolean",
"mode": "[R]",
"doc": "If this inserter is a stack-type.  \n"
},
"allow_custom_vectors": {
"name": "allow_custom_vectors",
"type": "boolean",
"mode": "[R]",
"doc": "If this inserter allows custom pickup and drop vectors.  \n"
},
"allow_burner_leech": {
"name": "allow_burner_leech",
"type": "boolean",
"mode": "[R]",
"doc": "If this inserter allows burner leeching.  \n"
},
"inserter_extension_speed": {
"name": "inserter_extension_speed",
"type": "double",
"mode": "[R]",
"doc": "The extension speed of this inserter or ````nil```` .  \n"
},
"inserter_rotation_speed": {
"name": "inserter_rotation_speed",
"type": "double",
"mode": "[R]",
"doc": "The rotation speed of this inserter or ````nil```` .  \n"
},
"inserter_pickup_position": {
"name": "inserter_pickup_position",
"type": "Vector",
"mode": "[R]",
"doc": "The pickup position for this inserter or ````nil```` .  \n"
},
"inserter_drop_position": {
"name": "inserter_drop_position",
"type": "Vector",
"mode": "[R]",
"doc": "The drop position for this inserter or ````nil```` .  \n"
},
"inserter_chases_belt_items": {
"name": "inserter_chases_belt_items",
"type": "boolean",
"mode": "[R]",
"doc": "True if this inserter chases items on belts for pickup or ````nil```` .  \n"
},
"count_as_rock_for_filtered_deconstruction": {
"name": "count_as_rock_for_filtered_deconstruction",
"type": "boolean",
"mode": "[R]",
"doc": "If this simple-entity is counted as a rock for the deconstruction planner \"trees and rocks only\" filter.  \n"
},
"filter_count": {
"name": "filter_count",
"type": "uint",
"mode": "[R]",
"doc": "The filter count of this inserter, loader, or logistic chest or ````nil```` .\n For logistic containers, ````nil```` means no limit.  \n"
},
"time_to_live": {
"name": "time_to_live",
"type": "uint",
"mode": "[R]",
"doc": "The time to live for this prototype or ````0```` if prototype doesn't have time_to_live or time_before_removed.  \n"
},
"distribution_effectivity": {
"name": "distribution_effectivity",
"type": "double",
"mode": "[R]",
"doc": "The distribution effectivity for this beacon prototype or ````nil```` if not a beacon prototype.  \n"
},
"explosion_beam": {
"name": "explosion_beam",
"type": "double",
"mode": "[R]",
"doc": "Does this explosion have a beam or ````nil```` if not an explosion prototype.  \n"
},
"explosion_rotate": {
"name": "explosion_rotate",
"type": "double",
"mode": "[R]",
"doc": "Does this explosion rotate or ````nil```` if not an explosion prototype.  \n"
},
"tree_color_count": {
"name": "tree_color_count",
"type": "uint8",
"mode": "[R]",
"doc": "If it is a tree, return the number of colors it supports. ````nil```` otherwise.  \n"
},
"alert_when_damaged": {
"name": "alert_when_damaged",
"type": "boolean",
"mode": "[R]",
"doc": "Does this entity with health prototype alert when damaged? or ````nil```` if not entity with health prototype.  \n"
},
"alert_when_attacking": {
"name": "alert_when_attacking",
"type": "boolean",
"mode": "[R]",
"doc": "Does this turret prototype alert when attacking? or ````nil```` if not turret prototype.  \n"
},
"color": {
"name": "color",
"type": "Color",
"mode": "[R]",
"doc": "The color of the prototype, or ````nil```` if the prototype doesn't have color.  \n"
},
"collision_mask_collides_with_self": {
"name": "collision_mask_collides_with_self",
"type": "boolean",
"mode": "[R]",
"doc": "Does this prototype collision mask collide with itself?  \n"
},
"collision_mask_collides_with_tiles_only": {
"name": "collision_mask_collides_with_tiles_only",
"type": "boolean",
"mode": "[R]",
"doc": "Does this prototype collision mask collide with tiles only?  \n"
},
"collision_mask_considers_tile_transitions": {
"name": "collision_mask_considers_tile_transitions",
"type": "boolean",
"mode": "[R]",
"doc": "Does this prototype collision mask consider tile transitions?  \n"
},
"allowed_effects": {
"name": "allowed_effects",
"type": "dictionarystring\u2192boolean",
"mode": "[R]",
"doc": "The allowed module effects for this entity or ````nil```` .  \n"
},
"rocket_parts_required": {
"name": "rocket_parts_required",
"type": "uint",
"mode": "[R]",
"doc": "The rocket parts required for this rocket silo prototype or ````nil```` .  \n"
},
"rocket_rising_delay": {
"name": "rocket_rising_delay",
"type": "uint8",
"mode": "[R]",
"doc": "The rocket rising delay for this rocket silo prototype or ````nil```` .  \n"
},
"launch_wait_time": {
"name": "launch_wait_time",
"type": "uint8",
"mode": "[R]",
"doc": "The rocket launch delay for this rocket silo prototype or ````nil```` .  \n"
},
"light_blinking_speed": {
"name": "light_blinking_speed",
"type": "double",
"mode": "[R]",
"doc": "The light blinking speed for this rocket silo prototype or ````nil```` .  \n"
},
"door_opening_speed": {
"name": "door_opening_speed",
"type": "double",
"mode": "[R]",
"doc": "The door opening speed for this rocket silo prototype or ````nil```` .  \n"
},
"rising_speed": {
"name": "rising_speed",
"type": "double",
"mode": "[R]",
"doc": "The rising speed for this rocket silo rocket prototype or ````nil```` .  \n"
},
"engine_starting_speed": {
"name": "engine_starting_speed",
"type": "double",
"mode": "[R]",
"doc": "The engine starting speed for this rocket silo rocket prototype or ````nil```` .  \n"
},
"flying_speed": {
"name": "flying_speed",
"type": "double",
"mode": "[R]",
"doc": "The flying speed for this rocket silo rocket prototype or ````nil```` .  \n"
},
"flying_acceleration": {
"name": "flying_acceleration",
"type": "double",
"mode": "[R]",
"doc": "The flying acceleration for this rocket silo rocket prototype or ````nil```` .  \n"
},
"fixed_recipe": {
"name": "fixed_recipe",
"type": "string",
"mode": "[R]",
"doc": "The fixed recipe name for this assembling machine prototype or ````nil```` .  \n"
},
"construction_radius": {
"name": "construction_radius",
"type": "double",
"mode": "[R]",
"doc": "The construction radius for this roboport prototype or ````nil```` .  \n"
},
"logistic_radius": {
"name": "logistic_radius",
"type": "double",
"mode": "[R]",
"doc": "The logistic radius for this roboport prototype or ````nil```` .  \n"
},
"energy_per_hit_point": {
"name": "energy_per_hit_point",
"type": "double",
"mode": "[R]",
"doc": "The energy used per hitpoint taken for this vehicle during collisions or ````nil```` .  \n"
},
"create_ghost_on_death": {
"name": "create_ghost_on_death",
"type": "boolean",
"mode": "[R]",
"doc": "If this prototype will attempt to create a ghost of itself on death.  \n **Note:** If this is false then a ghost will never be made, if it's true a ghost may be made."
},
"timeout": {
"name": "timeout",
"type": "uint",
"mode": "[R]",
"doc": "The time it takes this land mine to arm.  \n"
},
"fluidbox_prototypes": {
"name": "fluidbox_prototypes",
"type": "array ofLuaFluidBoxPrototype",
"mode": "[R]",
"doc": "The fluidbox prototypes for this entity.  \n"
},
"neighbour_bonus": {
"name": "neighbour_bonus",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Reactor_"
},
"neighbour_collision_increase": {
"name": "neighbour_collision_increase",
"type": "double",
"mode": "[R]",
"doc": "Controls how much a reactor extends when connected to other reactors.  \n _Can only be used if this is Reactor_"
},
"container_distance": {
"name": "container_distance",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Loader_"
},
"belt_distance": {
"name": "belt_distance",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Loader_"
},
"belt_length": {
"name": "belt_length",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Loader_"
},
"is_building": {
"name": "is_building",
"type": "boolean",
"mode": "[R]"
},
"automated_ammo_count": {
"name": "automated_ammo_count",
"type": "uint",
"mode": "[R]",
"doc": "The amount of ammo that inserters automatically insert into this ammo-turret or artillery-turret or ````nil```` .  \n"
},
"max_speed": {
"name": "max_speed",
"type": "double",
"mode": "[R]",
"doc": "The max speed of this projectile prototype or flying robot prototype or ````nil```` .  \n"
},
"darkness_for_all_lamps_on": {
"name": "darkness_for_all_lamps_on",
"type": "float",
"mode": "[R]",
"doc": "Value between 0 and 1 darkness where all lamps of this lamp prototype are on or ````nil```` .  \n"
},
"darkness_for_all_lamps_off": {
"name": "darkness_for_all_lamps_off",
"type": "float",
"mode": "[R]",
"doc": "Value between 0 and 1 darkness where all lamps of this lamp prototype are off or ````nil```` .  \n"
},
"always_on": {
"name": "always_on",
"type": "boolean",
"mode": "[R]",
"doc": "Whether the lamp is always on (except when out of power or turned off by the circuit network) or ````nil```` .  \n"
},
"min_darkness_to_spawn": {
"name": "min_darkness_to_spawn",
"type": "float",
"mode": "[R]",
"doc": "The minimum darkness at which this unit spawner can spawn entities.  \n"
},
"max_darkness_to_spawn": {
"name": "max_darkness_to_spawn",
"type": "float",
"mode": "[R]",
"doc": "The maximum darkness at which this unit spawner can spawn entities.  \n"
},
"call_for_help_radius": {
"name": "call_for_help_radius",
"type": "double",
"mode": "[R]"
},
"max_count_of_owned_units": {
"name": "max_count_of_owned_units",
"type": "double",
"mode": "[R]",
"doc": "Count of enemies this spawner can sustain.  \n"
},
"max_friends_around_to_spawn": {
"name": "max_friends_around_to_spawn",
"type": "double",
"mode": "[R]",
"doc": "How many friendly units are required within the spawning_radius of this spawner for it to stop producing more units.  \n"
},
"spawning_radius": {
"name": "spawning_radius",
"type": "double",
"mode": "[R]",
"doc": "How far from the spawner can the units be spawned.  \n"
},
"spawning_spacing": {
"name": "spawning_spacing",
"type": "double",
"mode": "[R]",
"doc": "What spaces should be between the spawned units.  \n"
},
"radius": {
"name": "radius",
"type": "double",
"mode": "[R]",
"doc": "The radius of this entity prototype.  \n"
},
"cliff_explosive_prototype": {
"name": "cliff_explosive_prototype",
"type": "string",
"mode": "[R]",
"doc": "The item prototype name used to destroy this cliff or ````nil```` .  \n"
},
"rocket_entity_prototype": {
"name": "rocket_entity_prototype",
"type": "LuaEntityPrototype",
"mode": "[R]",
"doc": "The rocket entity prototype associated with this rocket silo prototype or ````nil```` .  \n"
},
"has_belt_immunity": {
"name": "has_belt_immunity",
"type": "boolean",
"mode": "[R]",
"doc": "Whether this unit, car, or character prototype has belt immunity, ````nil```` if not car, unit, or character prototype.  \n"
},
"vision_distance": {
"name": "vision_distance",
"type": "double",
"mode": "[R]",
"doc": "The vision distance of this unit prototype or ````nil```` .  \n"
},
"pollution_to_join_attack": {
"name": "pollution_to_join_attack",
"type": "float",
"mode": "[R]",
"doc": "The amount of pollution that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollution. ````nil```` when prototype is not a unit prototype.  \n"
},
"min_pursue_time": {
"name": "min_pursue_time",
"type": "uint",
"mode": "[R]",
"doc": "The minimum pursue time of this unit prototype or ````nil```` .  \n"
},
"max_pursue_distance": {
"name": "max_pursue_distance",
"type": "double",
"mode": "[R]",
"doc": "The maximum pursue distance of this unit prototype or ````nil```` .  \n"
},
"radar_range": {
"name": "radar_range",
"type": "uint",
"mode": "[R]",
"doc": "The radar range of this unit prototype or ````nil```` .  \n"
},
"move_while_shooting": {
"name": "move_while_shooting",
"type": "boolean",
"mode": "[R]",
"doc": "Whether this unit prototype can move while shooting or ````nil```` .  \n"
},
"can_open_gates": {
"name": "can_open_gates",
"type": "boolean",
"mode": "[R]",
"doc": "Whether this unit prototype can open gates or ````nil```` .  \n"
},
"affected_by_tiles": {
"name": "affected_by_tiles",
"type": "boolean",
"mode": "[R]",
"doc": "Whether this unit prototype is affected by tile walking speed modifiers or ````nil```` .  \n"
},
"distraction_cooldown": {
"name": "distraction_cooldown",
"type": "uint",
"mode": "[R]",
"doc": "The distraction cooldown of this unit prototype or ````nil```` .  \n"
},
"spawning_time_modifier": {
"name": "spawning_time_modifier",
"type": "double",
"mode": "[R]",
"doc": "The spawning time modifier of this unit prototype or ````nil```` .  \n"
},
"alert_icon_shift": {
"name": "alert_icon_shift",
"type": "Vector",
"mode": "[R]",
"doc": "The alert icon shift of this entity prototype.  \n"
},
"lab_inputs": {
"name": "lab_inputs",
"type": "array ofstring",
"mode": "[R]",
"doc": "The item prototype names that are the inputs of this lab prototype or ````nil```` .  \n"
},
"researching_speed": {
"name": "researching_speed",
"type": "double",
"mode": "[R]",
"doc": "The base researching speed of this lab prototype or ````nil```` .  \n"
},
"item_slot_count": {
"name": "item_slot_count",
"type": "uint",
"mode": "[R]",
"doc": "The item slot count of this constant combinator prototype or ````nil```` .  \n"
},
"base_productivity": {
"name": "base_productivity",
"type": "double",
"mode": "[R]",
"doc": "The base productivity of this crafting machine, lab, or mining drill, or ````nil```` .  \n"
},
"allow_access_to_all_forces": {
"name": "allow_access_to_all_forces",
"type": "boolean",
"mode": "[R]",
"doc": "If this market allows access to all forces or just friendly ones.  \n"
},
"supports_direction": {
"name": "supports_direction",
"type": "boolean",
"mode": "[R]",
"doc": "If this entity prototype could possibly ever be rotated.  \n"
},
"terrain_friction_modifier": {
"name": "terrain_friction_modifier",
"type": "float",
"mode": "[R]",
"doc": "The terrain friction modifier for this vehicle.  \n"
},
"max_distance_of_sector_revealed": {
"name": "max_distance_of_sector_revealed",
"type": "uint",
"mode": "[R]",
"doc": "The radius of the area this radar can chart, in chunks.  \n"
},
"max_distance_of_nearby_sector_revealed": {
"name": "max_distance_of_nearby_sector_revealed",
"type": "uint",
"mode": "[R]",
"doc": "The radius of the area constantly revealed by this radar, in chunks.  \n"
},
"adjacent_tile_collision_box": {
"name": "adjacent_tile_collision_box",
"type": "BoundingBox",
"mode": "[R]",
"doc": "The bounding box that specifies which tiles adjacent to the offshore pump should be checked.  \n _Can only be used if this is OffshorePump_"
},
"adjacent_tile_collision_mask": {
"name": "adjacent_tile_collision_mask",
"type": "CollisionMask",
"mode": "[R]",
"doc": "Tiles adjacent to the offshore pump must not collide with this collision mask.  \n _Can only be used if this is OffshorePump_"
},
"adjacent_tile_collision_test": {
"name": "adjacent_tile_collision_test",
"type": "CollisionMask",
"mode": "[R]",
"doc": "If this mask is not empty, tiles adjacent to the offshore pump must not collide with this collision mask.  \n _Can only be used if this is OffshorePump_"
},
"center_collision_mask": {
"name": "center_collision_mask",
"type": "CollisionMask",
"mode": "[R]",
"doc": "The collision mask used only for collision test with tile directly at offshore pump position.  \n _Can only be used if this is OffshorePump_"
},
"grid_prototype": {
"name": "grid_prototype",
"type": "LuaEquipmentGridPrototype",
"mode": "[R]",
"doc": "The equipment grid prototype for this entity or ````nil```` .  \n"
},
"remove_decoratives": {
"name": "remove_decoratives",
"type": "string",
"mode": "[R]"
},
"running_speed": {
"name": "running_speed",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"maximum_corner_sliding_distance": {
"name": "maximum_corner_sliding_distance",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"build_distance": {
"name": "build_distance",
"type": "uint",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"drop_item_distance": {
"name": "drop_item_distance",
"type": "uint",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"reach_distance": {
"name": "reach_distance",
"type": "uint",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"reach_resource_distance": {
"name": "reach_resource_distance",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"item_pickup_distance": {
"name": "item_pickup_distance",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"loot_pickup_distance": {
"name": "loot_pickup_distance",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"enter_vehicle_distance": {
"name": "enter_vehicle_distance",
"type": "double",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"ticks_to_keep_gun": {
"name": "ticks_to_keep_gun",
"type": "uint",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"ticks_to_keep_aiming_direction": {
"name": "ticks_to_keep_aiming_direction",
"type": "uint",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"ticks_to_stay_in_combat": {
"name": "ticks_to_stay_in_combat",
"type": "uint",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"respawn_time": {
"name": "respawn_time",
"type": "uint",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"damage_hit_tint": {
"name": "damage_hit_tint",
"type": "Color",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
},
"character_corpse": {
"name": "character_corpse",
"type": "LuaEntityPrototype",
"mode": "[R]",
"doc": "_Can only be used if this is Character_"
}
},
"inherits": []
},
"LuaEquipment": {
"name": "LuaEquipment",
"type": "LuaEquipment",
"doc": "An item in a [LuaEquipmentGrid](https://lua-api.factorio.com/latest/LuaEquipmentGrid.html) , for example one's power armor.  \n **Note:** An equipment reference becomes invalid once the equipment is removed or the\n       equipment grid it resides in is destroyed.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this equipment.  \n"
},
"type": {
"name": "type",
"type": "string",
"mode": "[R]",
"doc": "Type of this equipment.  \n"
},
"position": {
"name": "position",
"type": "Position",
"mode": "[R]",
"doc": "Position of this equipment in the equipment grid.  \n"
},
"shape": {
"name": "shape",
"type": "table",
"mode": "[R]",
"doc": "Shape of this equipment. It is a table:  \n   \n  * width :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  * height :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n"
},
"shield": {
"name": "shield",
"type": "double",
"mode": "[RW]",
"doc": "Current shield value of the equipment.  \n **Note:** Can't be set higher than [LuaEquipment::max_shield](https://lua-api.factorio.com/latest/LuaEquipment.html#LuaEquipment.max_shield) ."
},
"max_shield": {
"name": "max_shield",
"type": "double",
"mode": "[R]",
"doc": "Maximum shield value.  \n"
},
"max_solar_power": {
"name": "max_solar_power",
"type": "double",
"mode": "[R]",
"doc": "Maximum solar power generated.  \n"
},
"movement_bonus": {
"name": "movement_bonus",
"type": "double",
"mode": "[R]",
"doc": "Movement speed bonus.  \n"
},
"generator_power": {
"name": "generator_power",
"type": "double",
"mode": "[R]",
"doc": "Energy generated per tick.  \n"
},
"energy": {
"name": "energy",
"type": "double",
"mode": "[RW]",
"doc": "Current available energy.  \n"
},
"max_energy": {
"name": "max_energy",
"type": "double",
"mode": "[R]",
"doc": "Maximum amount of energy that can be stored in this equipment.  \n"
},
"prototype": {
"name": "prototype",
"type": "LuaEquipmentPrototype",
"mode": "[R]"
},
"burner": {
"name": "burner",
"type": "LuaBurner",
"mode": "[R]",
"doc": "The burner energy source for this equipment or ````nil```` if there isn't one.  \n"
}
},
"inherits": []
},
"LuaEquipmentCategoryPrototype": {
"name": "LuaEquipmentCategoryPrototype",
"type": "LuaEquipmentCategoryPrototype",
"doc": "Prototype of a equipment category.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
}
},
"inherits": []
},
"LuaEquipmentGrid": {
"name": "LuaEquipmentGrid",
"type": "LuaEquipmentGrid",
"doc": "An equipment grid is for example the inside of a power armor.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"take": {
"name": "take",
"returns": "SimpleItemStack",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "Table with the following fields:   \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Take the equipment that contains this position in the grid.  \n  * equipment :: [LuaEquipment](https://lua-api.factorio.com/latest/LuaEquipment.html) (optional) :  Take this exact equipment.  \n  * by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If provided the action is done 'as' this player and [on_player_removed_equipment](https://lua-api.factorio.com/latest/events.html#on_player_removed_equipment) is triggered.  \n Either ````position```` or ````equipment```` must be specified."
}
},
"type": "function",
"doc": "Remove an equipment from the grid.  \n  \n**Parameters**  \nTable with the following fields:   \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Take the equipment that contains this position in the grid.  \n  + equipment :: [LuaEquipment](https://lua-api.factorio.com/latest/LuaEquipment.html) (optional) :  Take this exact equipment.  \n  + by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If provided the action is done 'as' this player and [on_player_removed_equipment](https://lua-api.factorio.com/latest/events.html#on_player_removed_equipment) is triggered.  \n Either ````position```` or ````equipment```` must be specified.  \n  \n  \n**Return value**  \nThe removed equipment, or ````nil```` if no equipment was removed."
},
"take_all": {
"name": "take_all",
"returns": "dictionarystring\u2192uint",
"type": "function",
"doc": "Remove all equipment from the grid.  \n  \n**Return value**  \nCount of each removed equipment, indexed by their prototype names."
},
"clear": {
"name": "clear",
"type": "function",
"doc": "Clear all equipment from the grid. I.e. remove it without actually returning it.  \n"
},
"put": {
"name": "put",
"returns": "LuaEquipment",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Equipment prototype name  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Grid position to put the equipment in.  \n  * by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If provided the action is done 'as' this player and [on_player_placed_equipment](https://lua-api.factorio.com/latest/events.html#on_player_placed_equipment) is triggered.  \n"
}
},
"type": "function",
"doc": "Insert an equipment into the grid.  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Equipment prototype name  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Grid position to put the equipment in.  \n  + by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If provided the action is done 'as' this player and [on_player_placed_equipment](https://lua-api.factorio.com/latest/events.html#on_player_placed_equipment) is triggered.  \n  \n  \n  \n**Return value**  \nThe newly-added equipment, or ````nil```` if the equipment could not be added."
},
"can_move": {
"name": "can_move",
"returns": "boolean",
"args": {
"equipment": {
"name": "equipment",
"type": "LuaEquipment",
"doc": "Table with the following fields:   \n  * equipment :: [LuaEquipment](https://lua-api.factorio.com/latest/LuaEquipment.html) :  The equipment to move  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to put it  \n"
}
},
"type": "function",
"doc": "Check whether moving an equipment would succeed.  \n  \n**Parameters**  \nTable with the following fields:   \n  + equipment :: [LuaEquipment](https://lua-api.factorio.com/latest/LuaEquipment.html) :  The equipment to move  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to put it  \n  \n  \n"
},
"move": {
"name": "move",
"returns": "boolean",
"args": {
"equipment": {
"name": "equipment",
"type": "LuaEquipment",
"doc": "Table with the following fields:   \n  * equipment :: [LuaEquipment](https://lua-api.factorio.com/latest/LuaEquipment.html) :  The equipment to move  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to put it  \n"
}
},
"type": "function",
"doc": "Move an equipment within this grid.  \n  \n**Parameters**  \nTable with the following fields:   \n  + equipment :: [LuaEquipment](https://lua-api.factorio.com/latest/LuaEquipment.html) :  The equipment to move  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to put it  \n  \n  \n  \n**Return value**  \n````true```` if the equipment was successfully moved."
},
"get": {
"name": "get",
"returns": "LuaEquipment",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position"
}
},
"type": "function",
"doc": "Find equipment in the Equipment Grid based off a position.  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position  \n  \n  \n**Return value**  \nThe found equipment, or ````nil```` if equipment could not be found at the given position."
},
"get_contents": {
"name": "get_contents",
"returns": "dictionarystring\u2192uint",
"type": "function",
"doc": "Get counts of all equipment in this grid.  \n  \n**Return value**  \nThe counts, indexed by equipment names."
},
"prototype": {
"name": "prototype",
"type": "LuaEquipmentGridPrototype",
"mode": "[R]"
},
"width": {
"name": "width",
"type": "uint",
"mode": "[R]",
"doc": "Width of the equipment grid.  \n"
},
"height": {
"name": "height",
"type": "uint",
"mode": "[R]",
"doc": "Height of the equipment grid.  \n"
},
"equipment": {
"name": "equipment",
"type": "array ofLuaEquipment",
"mode": "[R]",
"doc": "All the equipment in this grid.  \n"
},
"generator_energy": {
"name": "generator_energy",
"type": "double",
"mode": "[R]",
"doc": "Total energy per tick generated by the equipment inside this grid.  \n"
},
"max_solar_energy": {
"name": "max_solar_energy",
"type": "double",
"mode": "[R]",
"doc": "Maximum energy per tick that can be created by any solar panels in the equipment grid. Actual generated\n energy varies depending on the daylight levels.  \n"
},
"available_in_batteries": {
"name": "available_in_batteries",
"type": "double",
"mode": "[R]",
"doc": "The total energy stored in all batteries in the equipment grid.  \n"
},
"battery_capacity": {
"name": "battery_capacity",
"type": "double",
"mode": "[R]",
"doc": "Total energy storage capacity of all batteries in the equipment grid.  \n"
},
"shield": {
"name": "shield",
"type": "float",
"mode": "[R]",
"doc": "The amount of shields this equipment grid has.  \n"
},
"max_shield": {
"name": "max_shield",
"type": "float",
"mode": "[R]",
"doc": "The maximum amount of shields this equipment grid has.  \n"
},
"inhibit_movement_bonus": {
"name": "inhibit_movement_bonus",
"type": "boolean",
"mode": "[RW]",
"doc": "True if this movement bonus equipment is turned off, otherwise false.  \n"
}
},
"inherits": []
},
"LuaEquipmentGridPrototype": {
"name": "LuaEquipmentGridPrototype",
"type": "LuaEquipmentGridPrototype",
"doc": "Prototype of an equipment grid.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"equipment_categories": {
"name": "equipment_categories",
"type": "array ofstring",
"mode": "[R]",
"doc": "Equipment category names for the categories that may be inserted into this equipment grid. The grid will accept\n any equipment that has at least one category in this list.  \n See also   \n  * [LuaEquipmentPrototype::equipment_categories](https://lua-api.factorio.com/latest/LuaEquipmentPrototype.html#LuaEquipmentPrototype.equipment_categories)  \n"
},
"width": {
"name": "width",
"type": "uint",
"mode": "[R]"
},
"height": {
"name": "height",
"type": "uint",
"mode": "[R]"
},
"locked": {
"name": "locked",
"type": "boolean",
"mode": "[R]",
"doc": "If the player can move equipment into or out of this grid.  \n"
}
},
"inherits": []
},
"LuaEquipmentPrototype": {
"name": "LuaEquipmentPrototype",
"type": "LuaEquipmentPrototype",
"doc": "Prototype of a modular equipment.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"type": {
"name": "type",
"type": "string",
"mode": "[R]",
"doc": "Type of this equipment prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"shape": {
"name": "shape",
"type": "table",
"mode": "[R]",
"doc": "Shape of this equipment prototype. It is a table:  \n   \n  * width :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  * height :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  * points :: array of point (optional) :  A point is a table with x and y values. Only set when the shape is \"manual\"  \n"
},
"take_result": {
"name": "take_result",
"type": "LuaItemPrototype",
"mode": "[R]",
"doc": "The result item when taking this equipment out of an equipment grid. ````nil```` if there is no result item.  \n"
},
"energy_production": {
"name": "energy_production",
"type": "double",
"mode": "[R]",
"doc": "The max power generated by this equipment.  \n"
},
"shield": {
"name": "shield",
"type": "float",
"mode": "[R]",
"doc": "The shield value of this equipment. 0 for non-shield equipment.  \n"
},
"energy_per_shield": {
"name": "energy_per_shield",
"type": "double",
"mode": "[R]",
"doc": "The energy per shield point restored. 0 for non-shield equipment.  \n"
},
"logistic_parameters": {
"name": "logistic_parameters",
"type": "table",
"mode": "[R]",
"doc": "The logistic parameters for roboport equipment.  \n Table with the following fields:   \n  * spawn_and_station_height :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * charge_approach_distance :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * logistic_radius :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * construction_radius :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * charging_station_count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  * charging_distance :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * charging_station_shift :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n  * charging_energy :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  * charging_threshold_distance :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * robot_vertical_acceleration :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * stationing_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n  * robot_limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  * logistics_connection_distance :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n"
},
"energy_consumption": {
"name": "energy_consumption",
"type": "double",
"mode": "[R]"
},
"movement_bonus": {
"name": "movement_bonus",
"type": "float",
"mode": "[R]",
"doc": "_Can only be used if this is MovementBonusEquipmentPrototype_"
},
"energy_source": {
"name": "energy_source",
"type": "LuaElectricEnergySourcePrototype",
"mode": "[R]",
"doc": "The energy source prototype for the equipment.  \n"
},
"equipment_categories": {
"name": "equipment_categories",
"type": "array ofstring",
"mode": "[R]",
"doc": "Category names for this equipment. These categories will be used to determine whether this equipment is allowed\n in a particular equipment grid.  \n See also   \n  * [LuaEquipmentGridPrototype::equipment_categories](https://lua-api.factorio.com/latest/LuaEquipmentGridPrototype.html#LuaEquipmentGridPrototype.equipment_categories)  \n"
},
"burner_prototype": {
"name": "burner_prototype",
"type": "LuaBurnerPrototype",
"mode": "[R]",
"doc": "The burner energy source prototype this equipment uses or ````nil```` .  \n"
},
"electric_energy_source_prototype": {
"name": "electric_energy_source_prototype",
"type": "LuaElectricEnergySourcePrototype",
"mode": "[R]",
"doc": "The electric energy source prototype this equipment uses or ````nil```` .  \n"
},
"background_color": {
"name": "background_color",
"type": "Color",
"mode": "[R]",
"doc": "The background color of this equipment prototype.  \n"
},
"attack_parameters": {
"name": "attack_parameters",
"type": "AttackParameters",
"mode": "[R]",
"doc": "The equipment attack parameters or ````nil```` .  \n"
},
"automatic": {
"name": "automatic",
"type": "boolean",
"mode": "[R]",
"doc": "Is this active defense equipment automatic.\n Returns false if not active defense equipment.  \n"
}
},
"inherits": []
},
"LuaFlowStatistics": {
"name": "LuaFlowStatistics",
"type": "LuaFlowStatistics",
"doc": "Encapsulates statistic data for different parts of the game.\n In the context of flow statistics, ````input```` and ````output```` describe on which side of the associated GUI the values are shown. Input values are shown on the left side, output values on the right side.  \n Examples:   \n  * The item production GUI shows \"consumption\" on the right, thus ````output```` describes the item consumption numbers. The same goes for fluid consumption.  \n  * The kills gui shows \"losses\" on the right, so ````output```` describes how many of the force's entities were killed by enemies.  \n  * The electric network GUI shows \"power consumption\" on the left side, so in this case ````input```` describes the power consumption numbers.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_input_count": {
"name": "get_input_count",
"returns": "uint64ordouble",
"args": {
"string": {
"name": "string",
"doc": "string :  The prototype name."
}
},
"type": "function",
"doc": "Gets the total input count for a given prototype.  \n  \n**Parameters**  \nstring :  The prototype name.  \n  \n"
},
"set_input_count": {
"name": "set_input_count",
"args": {
"string": {
"name": "string",
"doc": "string :  The prototype name."
},
"count": {
"name": "count",
"type": "uint64ordouble",
"doc": "count :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The new count. The type depends on the instance of the statistics."
}
},
"type": "function",
"doc": "Sets the total input count for a given prototype.  \n  \n**Parameters**  \n* string :  The prototype name.  \n* count :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The new count. The type depends on the instance of the statistics.  \n  \n"
},
"get_output_count": {
"name": "get_output_count",
"returns": "uint64ordouble",
"args": {
"string": {
"name": "string",
"doc": "string :  The prototype name."
}
},
"type": "function",
"doc": "Gets the total output count for a given prototype.  \n  \n**Parameters**  \nstring :  The prototype name.  \n  \n"
},
"set_output_count": {
"name": "set_output_count",
"args": {
"string": {
"name": "string",
"doc": "string :  The prototype name."
},
"count": {
"name": "count",
"type": "uint64ordouble",
"doc": "count :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The new count. The type depends on the instance of the statistics."
}
},
"type": "function",
"doc": "Sets the total output count for a given prototype.  \n  \n**Parameters**  \n* string :  The prototype name.  \n* count :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64) or [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The new count. The type depends on the instance of the statistics.  \n  \n"
},
"get_flow_count": {
"name": "get_flow_count",
"returns": "double",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The prototype name.  \n  * input :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Read the input values or the output values  \n  * precision_index :: [defines.flow_precision_index](https://lua-api.factorio.com/latest/defines.html#defines.flow_precision_index) :  The precision to read.  \n  * count :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, the count is returned instead of the per-time-frame value.  \n"
}
},
"type": "function",
"doc": "Gets the flow count value for the given time frame.  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The prototype name.  \n  + input :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Read the input values or the output values  \n  + precision_index :: [defines.flow_precision_index](https://lua-api.factorio.com/latest/defines.html#defines.flow_precision_index) :  The precision to read.  \n  + count :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, the count is returned instead of the per-time-frame value.  \n  \n  \n"
},
"on_flow": {
"name": "on_flow",
"args": {
"string": {
"name": "string",
"doc": "string :  The prototype name."
},
"count": {
"name": "count",
"type": "float",
"doc": "count :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  The count: positive or negative determines if the value goes in the input or output statistics."
}
},
"type": "function",
"doc": "Adds a value to this flow statistics.  \n  \n**Parameters**  \n* string :  The prototype name.  \n* count :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  The count: positive or negative determines if the value goes in the input or output statistics.  \n  \n"
},
"clear": {
"name": "clear",
"type": "function",
"doc": "Reset all the statistics data to 0.  \n"
},
"input_counts": {
"name": "input_counts",
"type": "dictionarystring\u2192array ofuint64ordouble",
"mode": "[R]",
"doc": "List of input counts indexed by name <> value.\n Represents the data that is shown on the left side of the GUI for the given statistics.  \n"
},
"output_counts": {
"name": "output_counts",
"type": "dictionarystring\u2192array ofuint64ordouble",
"mode": "[R]",
"doc": "List of output counts indexed by name <> value.\n Represents the data that is shown on the right side of the GUI for the given statistics.  \n"
},
"force": {
"name": "force",
"type": "LuaForce",
"mode": "[R]",
"doc": "The force these statistics belong to or ````nil```` for pollution statistics.  \n"
}
},
"inherits": []
},
"LuaFluidBox": {
"name": "LuaFluidBox",
"type": "LuaFluidBox",
"doc": "An array of fluid boxes of an entity. Entities may contain more than one fluid box, and some can change the number\n of fluid boxes -- for instance, an assembling machine will change its number of fluid boxes depending\n on its active recipe.  \n See [Fluid](https://lua-api.factorio.com/latest/Concepts.html#Fluid)  \n Do note that reading from a [LuaFluidBox](https://lua-api.factorio.com/latest/LuaFluidBox.html) creates a new table and writing will copy the given\n fields from the table into the engine's own fluid box structure. Therefore, the correct way to update\n a fluidbox of an entity is to read it first, modify the table, then write the modified table back.\n Directly accessing the returned table's attributes won't have the desired effect.  \n Example Double the temperature of the fluid in ````entity```` 's first fluid box. ````fluid\u00a0=\u00a0entity.fluidbox[1] fluid.temperature\u00a0=\u00a0fluid.temperature\u00a0*\u00a02 entity.fluidbox[1]\u00a0=\u00a0fluid````",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_prototype": {
"name": "get_prototype",
"returns": "LuaFluidBoxPrototype",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "The prototype of this fluidbox index.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"get_capacity": {
"name": "get_capacity",
"returns": "double",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "The capacity of the given fluidbox index.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"get_connections": {
"name": "get_connections",
"returns": "array ofLuaFluidBox",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "The fluidbox connections for the given fluidbox index.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"get_filter": {
"name": "get_filter",
"returns": "table",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "The filter of the given fluidbox index, 'nil' if none.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n  \n**Return value**  \n  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Fluid prototype name of the filtered fluid.  \n  * minimum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The minimum temperature allowed into the fluidbox  \n  * maximum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The maximum temperature allowed into the fluidbox  \n or 'nil'."
},
"set_filter": {
"name": "set_filter",
"returns": "boolean",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
},
"table": {
"name": "table",
"type": "string",
"doc": "table :  Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Fluid prototype name of the filtered fluid.  \n  * minimum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The minimum temperature allowed into the fluidbox  \n  * maximum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The maximum temperature allowed into the fluidbox  \n  * force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Force the filter to be set, regardless of current fluid content.  \n or 'nil'."
}
},
"type": "function",
"doc": "Set the filter of the given fluidbox index, 'nil' to clear.\n Some entities cannot have their fluidbox filter set, notably fluid wagons and crafting machines.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n* table :  Table with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Fluid prototype name of the filtered fluid.  \n  + minimum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The minimum temperature allowed into the fluidbox  \n  + maximum_temperature :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The maximum temperature allowed into the fluidbox  \n  + force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Force the filter to be set, regardless of current fluid content.  \n or 'nil'.  \n  \n  \n**Return value**  \nIf the filter was set successfully."
},
"get_flow": {
"name": "get_flow",
"returns": "double",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Flow through the fluidbox in the last tick. It is the larger of in-flow and out-flow.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"get_locked_fluid": {
"name": "get_locked_fluid",
"returns": "string",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Returns the fluid the fluidbox is locked onto\n Returns 'nil' for no lock  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"flush": {
"name": "flush",
"returns": "dictionarystring\u2192float",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
},
"fluid": {
"name": "fluid",
"type": "FluidSpecification",
"doc": "fluid :: [FluidSpecification](https://lua-api.factorio.com/latest/Concepts.html#FluidSpecification) (optional) :  If provided, only this fluid is flushed."
}
},
"type": "function",
"doc": "Flushes all fluid from this fluidbox and its fluid system.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n* fluid :: [FluidSpecification](https://lua-api.factorio.com/latest/Concepts.html#FluidSpecification) (optional) :  If provided, only this fluid is flushed.  \n  \n  \n**Return value**  \nThe fluid removed."
},
"operator #": {
"name": "operator #",
"type": "uint",
"mode": "[R]",
"doc": "Number of fluid boxes.  \n"
},
"owner": {
"name": "owner",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity that owns this fluidbox.  \n"
},
"operator []": {
"name": "operator []",
"type": "Fluidornil",
"mode": "[R]",
"doc": "Access, set or clear a fluid box. The index must always be in bounds (see [LuaFluidBox::operator #](https://lua-api.factorio.com/latest/LuaFluidBox.html#LuaFluidBox.operator #) );\n new fluidboxes may not be added or removed using this operator. If the given fluid box doesn't contain any\n fluid, ````nil```` is returned. Similarly, ````nil```` can be written to a fluid box to remove all fluid from it.  \n"
}
},
"inherits": []
},
"LuaFluidBoxPrototype": {
"name": "LuaFluidBoxPrototype",
"type": "LuaFluidBoxPrototype",
"doc": "A prototype of a fluidbox owned by some [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html) .  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"entity": {
"name": "entity",
"type": "LuaEntityPrototype",
"mode": "[R]",
"doc": "The entity that this belongs to.  \n"
},
"index": {
"name": "index",
"type": "uint",
"mode": "[R]",
"doc": "The index of this fluidbox prototype in the owning entity.  \n"
},
"pipe_connections": {
"name": "pipe_connections",
"type": "array ofFluidBoxConnection",
"mode": "[R]",
"doc": "The pipe connection points.  \n"
},
"production_type": {
"name": "production_type",
"type": "string",
"mode": "[R]",
"doc": "The production type. \"input\", \"output\", \"input-output\", or \"none\".  \n"
},
"base_area": {
"name": "base_area",
"type": "double",
"mode": "[R]"
},
"base_level": {
"name": "base_level",
"type": "double",
"mode": "[R]"
},
"height": {
"name": "height",
"type": "double",
"mode": "[R]"
},
"volume": {
"name": "volume",
"type": "double",
"mode": "[R]"
},
"filter": {
"name": "filter",
"type": "LuaFluidPrototype",
"mode": "[R]",
"doc": "The filter or ````nil```` if no filter is set.  \n"
},
"minimum_temperature": {
"name": "minimum_temperature",
"type": "double",
"mode": "[R]",
"doc": "The minimum temperature or ````nil```` if none is set.  \n"
},
"maximum_temperature": {
"name": "maximum_temperature",
"type": "double",
"mode": "[R]",
"doc": "The maximum temperature or ````nil```` if none is set.  \n"
},
"secondary_draw_orders": {
"name": "secondary_draw_orders",
"type": "array ofint",
"mode": "[R]",
"doc": "The secondary draw orders for the 4 possible connection directions.  \n"
},
"render_layer": {
"name": "render_layer",
"type": "string",
"mode": "[R]",
"doc": "The render layer.  \n"
}
},
"inherits": []
},
"LuaFluidEnergySourcePrototype": {
"name": "LuaFluidEnergySourcePrototype",
"type": "LuaFluidEnergySourcePrototype",
"doc": "Prototype of a fluid energy source.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"emissions": {
"name": "emissions",
"type": "double",
"mode": "[R]"
},
"render_no_network_icon": {
"name": "render_no_network_icon",
"type": "boolean",
"mode": "[R]"
},
"render_no_power_icon": {
"name": "render_no_power_icon",
"type": "boolean",
"mode": "[R]"
},
"effectivity": {
"name": "effectivity",
"type": "double",
"mode": "[R]"
},
"burns_fluid": {
"name": "burns_fluid",
"type": "boolean",
"mode": "[R]"
},
"scale_fluid_usage": {
"name": "scale_fluid_usage",
"type": "boolean",
"mode": "[R]"
},
"fluid_usage_per_tick": {
"name": "fluid_usage_per_tick",
"type": "double",
"mode": "[R]"
},
"smoke": {
"name": "smoke",
"type": "array ofSmokeSource",
"mode": "[R]",
"doc": "The smoke sources for this prototype if any.  \n"
},
"maximum_temperature": {
"name": "maximum_temperature",
"type": "double",
"mode": "[R]"
},
"fluid_box": {
"name": "fluid_box",
"mode": "[R]",
"doc": "The fluid box for this energy source.  \n"
}
},
"inherits": []
},
"LuaFluidPrototype": {
"name": "LuaFluidPrototype",
"type": "LuaFluidPrototype",
"doc": "Prototype of a fluid.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"default_temperature": {
"name": "default_temperature",
"type": "double",
"mode": "[R]",
"doc": "Default temperature of the fluid.  \n"
},
"max_temperature": {
"name": "max_temperature",
"type": "double",
"mode": "[R]",
"doc": "Maximum temperature the fluid can reach.  \n"
},
"heat_capacity": {
"name": "heat_capacity",
"type": "double",
"mode": "[R]",
"doc": "How much energy the fluid will generate at max temperature assuming 100% efficiency steam engine.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string for this prototype.  \n"
},
"group": {
"name": "group",
"type": "LuaGroup",
"mode": "[R]",
"doc": "Group of this prototype.  \n"
},
"subgroup": {
"name": "subgroup",
"type": "LuaGroup",
"mode": "[R]",
"doc": "Subgroup of this prototype.  \n"
},
"base_color": {
"name": "base_color",
"type": "Color",
"mode": "[R]"
},
"flow_color": {
"name": "flow_color",
"type": "Color",
"mode": "[R]"
},
"gas_temperature": {
"name": "gas_temperature",
"type": "double",
"mode": "[R]"
},
"emissions_multiplier": {
"name": "emissions_multiplier",
"type": "double",
"mode": "[R]"
},
"fuel_value": {
"name": "fuel_value",
"type": "double",
"mode": "[R]"
},
"hidden": {
"name": "hidden",
"type": "boolean",
"mode": "[R]"
}
},
"inherits": []
},
"LuaForce": {
"name": "LuaForce",
"type": "LuaForce",
"doc": "````LuaForce```` encapsulates data local to each \"force\" or \"faction\" of the game.\n Default forces are player, enemy and neutral. Players and mods can create\n additional forces (up to 64 total).  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_entity_count": {
"name": "get_entity_count",
"returns": "uint",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the entity."
}
},
"type": "function",
"doc": "Count entities of given type.  \n  \n**Parameters**  \nname :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the entity.  \n  \n  \n**Return value**  \nNumber of entities of given prototype belonging to this force."
},
"disable_research": {
"name": "disable_research",
"type": "function",
"doc": "Disable research for this force.  \n"
},
"enable_research": {
"name": "enable_research",
"type": "function",
"doc": "Enable research for this force.  \n"
},
"disable_all_prototypes": {
"name": "disable_all_prototypes",
"type": "function",
"doc": "Disable all recipes and technologies. Only recipes and technologies enabled explicitly will\n be useable from this point.  \n"
},
"enable_all_prototypes": {
"name": "enable_all_prototypes",
"type": "function",
"doc": "Enables all recipes and technologies.\n The opposite of [LuaForce::disable_all_prototypes](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.disable_all_prototypes)  \n"
},
"reset_recipes": {
"name": "reset_recipes",
"type": "function",
"doc": "Load the original version of all recipes from the prototypes.  \n"
},
"enable_all_recipes": {
"name": "enable_all_recipes",
"type": "function",
"doc": "Unlock all recipes.  \n"
},
"enable_all_technologies": {
"name": "enable_all_technologies",
"type": "function",
"doc": "Unlock all technologies.  \n"
},
"research_all_technologies": {
"name": "research_all_technologies",
"args": {
"include_disabled_prototypes": {
"name": "include_disabled_prototypes",
"doc": "include_disabled_prototypes (optional) :  If technologies that are explicitly disabled in the prototype are also researched. This defaults to false."
}
},
"type": "function",
"doc": "Research all technologies.  \n  \n**Parameters**  \ninclude_disabled_prototypes (optional) :  If technologies that are explicitly disabled in the prototype are also researched. This defaults to false.  \n  \n"
},
"reset_technologies": {
"name": "reset_technologies",
"type": "function",
"doc": "Load the original versions of technologies from prototypes. Preserves research state of technologies.  \n"
},
"reset": {
"name": "reset",
"type": "function",
"doc": "Reset everything. All technologies are set to not researched, all modifiers are set to default values.  \n"
},
"reset_technology_effects": {
"name": "reset_technology_effects",
"type": "function",
"doc": "Reapplies all possible research effects, including unlocked recipes. Any custom changes are lost. Preserves research state of technologies.  \n"
},
"chart": {
"name": "chart",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
},
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area on the given surface to chart."
}
},
"type": "function",
"doc": "Chart a portion of the map. The chart for the given area is refreshed; it creates chart for\n any parts of the given area that haven't been charted yet.  \n  \n**Parameters**  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n* area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area on the given surface to chart.  \n  \n"
},
"clear_chart": {
"name": "clear_chart",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Which surface to erase chart data for or if not provided all surfaces charts are erased."
}
},
"type": "function",
"doc": "Erases chart data for this force.  \n  \n**Parameters**  \nsurface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Which surface to erase chart data for or if not provided all surfaces charts are erased.  \n  \n"
},
"rechart": {
"name": "rechart",
"type": "function",
"doc": "Force a rechart of the whole chart.  \n"
},
"chart_all": {
"name": "chart_all",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Which surface to chart or all if not given."
}
},
"type": "function",
"doc": "Chart all generated chunks.  \n  \n**Parameters**  \nsurface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Which surface to chart or all if not given.  \n  \n"
},
"is_chunk_charted": {
"name": "is_chunk_charted",
"returns": "boolean",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
},
"position": {
"name": "position",
"type": "ChunkPosition",
"doc": "position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  Position of the chunk."
}
},
"type": "function",
"doc": "Has a chunk been charted?  \n  \n**Parameters**  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n* position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  Position of the chunk.  \n  \n"
},
"is_chunk_visible": {
"name": "is_chunk_visible",
"returns": "boolean",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
},
"position": {
"name": "position",
"type": "ChunkPosition",
"doc": "position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition)"
}
},
"type": "function",
"doc": "Is the given chunk currently charted and visible (not covered by fog of war) on the map.  \n  \n**Parameters**  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n* position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition)  \n  \n"
},
"cancel_charting": {
"name": "cancel_charting",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)"
}
},
"type": "function",
"doc": "Cancels pending chart requests for the given surface or all surfaces.  \n  \n**Parameters**  \nsurface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  \n"
},
"get_ammo_damage_modifier": {
"name": "get_ammo_damage_modifier",
"returns": "double",
"args": {
"ammo": {
"name": "ammo",
"type": "string",
"doc": "ammo :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Ammo category"
}
},
"type": "function",
"doc": "**Parameters**  \nammo :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Ammo category  \n  \n"
},
"set_ammo_damage_modifier": {
"name": "set_ammo_damage_modifier",
"args": {
"ammo": {
"name": "ammo",
"type": "string",
"doc": "ammo :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Ammo category"
},
"modifier": {
"name": "modifier",
"type": "double",
"doc": "modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "**Parameters**  \n* ammo :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Ammo category  \n* modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n"
},
"get_gun_speed_modifier": {
"name": "get_gun_speed_modifier",
"returns": "double",
"args": {
"ammo": {
"name": "ammo",
"type": "string",
"doc": "ammo :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Ammo category"
}
},
"type": "function",
"doc": "**Parameters**  \nammo :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Ammo category  \n  \n"
},
"set_gun_speed_modifier": {
"name": "set_gun_speed_modifier",
"args": {
"ammo": {
"name": "ammo",
"type": "string",
"doc": "ammo :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Ammo category"
},
"modifier": {
"name": "modifier",
"type": "double",
"doc": "modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "**Parameters**  \n* ammo :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Ammo category  \n* modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n"
},
"get_turret_attack_modifier": {
"name": "get_turret_attack_modifier",
"returns": "double",
"args": {
"turret": {
"name": "turret",
"type": "string",
"doc": "turret :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Turret prototype name"
}
},
"type": "function",
"doc": "**Parameters**  \nturret :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Turret prototype name  \n  \n"
},
"set_turret_attack_modifier": {
"name": "set_turret_attack_modifier",
"args": {
"turret": {
"name": "turret",
"type": "string",
"doc": "turret :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Turret prototype name"
},
"modifier": {
"name": "modifier",
"type": "double",
"doc": "modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "**Parameters**  \n* turret :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Turret prototype name  \n* modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n"
},
"set_cease_fire": {
"name": "set_cease_fire",
"args": {
"other": {
"name": "other",
"type": "ForceSpecification",
"doc": "other :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
},
"cease_fire": {
"name": "cease_fire",
"type": "boolean",
"doc": "cease_fire :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  When ````true```` , this force won't attack ````other```` ; otherwise it will."
}
},
"type": "function",
"doc": "Stop attacking members of a given force.  \n  \n**Parameters**  \n* other :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \n* cease_fire :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  When ````true```` , this force won't attack ````other```` ; otherwise it will.  \n  \n"
},
"get_cease_fire": {
"name": "get_cease_fire",
"returns": "boolean",
"args": {
"other": {
"name": "other",
"type": "ForceSpecification",
"doc": "other :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
}
},
"type": "function",
"doc": "Will this force attack members of another force?  \n  \n**Parameters**  \nother :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \n  \n"
},
"set_friend": {
"name": "set_friend",
"args": {
"other": {
"name": "other",
"type": "ForceSpecification",
"doc": "other :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
},
"friend": {
"name": "friend",
"type": "boolean",
"doc": "friend :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Friends have unrestricted access to buildings and turrets won't fire at them.  \n  \n**Parameters**  \n* other :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \n* friend :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"get_friend": {
"name": "get_friend",
"returns": "boolean",
"args": {
"other": {
"name": "other",
"type": "ForceSpecification",
"doc": "other :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)"
}
},
"type": "function",
"doc": "Is this force a friend?  \n  \n**Parameters**  \nother :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \n  \n"
},
"is_pathfinder_busy": {
"name": "is_pathfinder_busy",
"returns": "boolean",
"type": "function",
"doc": "Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.  \n"
},
"kill_all_units": {
"name": "kill_all_units",
"type": "function",
"doc": "Kill all units and flush the pathfinder.  \n"
},
"find_logistic_network_by_position": {
"name": "find_logistic_network_by_position",
"returns": "LuaLogisticNetwork",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position to find a network for"
},
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to search on"
}
},
"type": "function",
"doc": "**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position to find a network for  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to search on  \n  \n  \n**Return value**  \nThe found network or ````nil```` ."
},
"set_spawn_position": {
"name": "set_spawn_position",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The new position on the given surface."
},
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to set the spawn position for."
}
},
"type": "function",
"doc": "**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The new position on the given surface.  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to set the spawn position for.  \n  \n"
},
"get_spawn_position": {
"name": "get_spawn_position",
"returns": "Position",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
}
},
"type": "function",
"doc": "**Parameters**  \nsurface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  \n"
},
"unchart_chunk": {
"name": "unchart_chunk",
"args": {
"position": {
"name": "position",
"type": "ChunkPosition",
"doc": "position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk position to unchart."
},
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to unchart on."
}
},
"type": "function",
"doc": "**Parameters**  \n* position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk position to unchart.  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to unchart on.  \n  \n"
},
"get_item_launched": {
"name": "get_item_launched",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item to get"
}
},
"type": "function",
"doc": "Gets the count of a given item launched in rockets.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item to get  \n  \n  \n**Return value**  \nThe count of the item that has been launched."
},
"set_item_launched": {
"name": "set_item_launched",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item to set"
},
"count": {
"name": "count",
"type": "uint",
"doc": "count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to set"
}
},
"type": "function",
"doc": "Sets the count of a given item launched in rockets.  \n  \n**Parameters**  \n* item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item to set  \n* count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to set  \n  \n"
},
"print": {
"name": "print",
"args": {
"message": {
"name": "message",
"type": "LocalisedString",
"doc": "message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
},
"color": {
"name": "color",
"type": "Color",
"doc": "color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
}
},
"type": "function",
"doc": "Print text to the chat console of all players on this force.  \n  \n**Parameters**  \n* message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n* color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  \n"
},
"get_trains": {
"name": "get_trains",
"returns": "array ofLuaTrain",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  If given only trains on the surface are returned."
}
},
"type": "function",
"doc": "**Parameters**  \nsurface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  If given only trains on the surface are returned.  \n  \n"
},
"add_chart_tag": {
"name": "add_chart_tag",
"returns": "LuaCustomChartTag",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Which surface to add the tag to."
},
"tag": {
"name": "tag",
"type": "SignalID",
"doc": "tag :  Table with the following fields:   \n  * icon :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional) : )  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  * text :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * last_user :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n"
}
},
"type": "function",
"doc": "Adds a custom chart tag to the given surface and returns the new tag or ````nil```` if the given position isn't valid for a chart tag.  \n  \n**Parameters**  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Which surface to add the tag to.  \n* tag :  Table with the following fields:   \n  + icon :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional) : )  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  + text :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + last_user :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n  \n  \n"
},
"find_chart_tags": {
"name": "find_chart_tags",
"returns": "array ofLuaCustomChartTag",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)"
},
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)"
}
},
"type": "function",
"doc": "Finds all custom chart tags within the given bounding box on the given surface.  \n  \n**Parameters**  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n* area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  \n"
},
"get_saved_technology_progress": {
"name": "get_saved_technology_progress",
"returns": "double",
"args": {
"technology": {
"name": "technology",
"type": "TechnologySpecification",
"doc": "technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) :  The technology"
}
},
"type": "function",
"doc": "Gets the saved progress for the given technology or ````nil```` if there is no saved progress.  \n  \n**Parameters**  \ntechnology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) :  The technology  \n  \n  \n**Return value**  \nThe progress as a percent."
},
"set_saved_technology_progress": {
"name": "set_saved_technology_progress",
"args": {
"technology": {
"name": "technology",
"type": "TechnologySpecification",
"doc": "technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) :  The technology"
},
"double": {
"name": "double",
"doc": "double :  Progress as a percent. Set to ````nil```` to remove the saved progress."
}
},
"type": "function",
"doc": "Sets the saved progress for the given technology.\n The technology must not be in progress, must not be completed, and the new progress must be < 100%.  \n  \n**Parameters**  \n* technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) :  The technology  \n* double :  Progress as a percent. Set to ````nil```` to remove the saved progress.  \n  \n"
},
"reset_evolution": {
"name": "reset_evolution",
"type": "function",
"doc": "Resets evolution for this force to zero.  \n"
},
"play_sound": {
"name": "play_sound",
"returns": "boolean",
"args": {
"path": {
"name": "path",
"type": "SoundPath",
"doc": "Table with the following fields:   \n  * path :: [SoundPath](https://lua-api.factorio.com/latest/Concepts.html#SoundPath) :  The sound to play  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Where the sound should be played. If not given it's played 'everywhere'.  \n  * volume_modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Must be between 0 and 1 inclusive.  \n"
}
},
"type": "function",
"doc": "Plays a sound for every player on this force  \n  \n**Parameters**  \nTable with the following fields:   \n  + path :: [SoundPath](https://lua-api.factorio.com/latest/Concepts.html#SoundPath) :  The sound to play  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Where the sound should be played. If not given it's played 'everywhere'.  \n  + volume_modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Must be between 0 and 1 inclusive.  \n  \n  \n"
},
"get_train_stops": {
"name": "get_train_stops",
"returns": "array ofLuaEntity",
"args": {
"opts": {
"name": "opts",
"type": "stringorarray ofstring",
"doc": "opts (optional) :  Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n"
}
},
"type": "function",
"doc": "Gets train stops matching the given filters.  \n  \n**Parameters**  \nopts (optional) :  Table with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  \n  \n"
},
"get_hand_crafting_disabled_for_recipe": {
"name": "get_hand_crafting_disabled_for_recipe",
"returns": "boolean",
"args": {
"recipe": {
"name": "recipe",
"type": "stringorLuaRecipe",
"doc": "recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html)"
}
},
"type": "function",
"doc": "Gets if the given recipe is explicitly disabled from being hand crafted.  \n  \n**Parameters**  \nrecipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html)  \n  \n"
},
"set_hand_crafting_disabled_for_recipe": {
"name": "set_hand_crafting_disabled_for_recipe",
"args": {
"recipe": {
"name": "recipe",
"type": "stringorLuaRecipe",
"doc": "recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html)"
},
"hand_crafting_disabled": {
"name": "hand_crafting_disabled",
"type": "boolean",
"doc": "hand_crafting_disabled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Sets if the given recipe can be hand-crafted. This is used to explicitly disable hand crafting a recipe - it won't allow hand-crafting otherwise not hand-craftable recipes.  \n  \n**Parameters**  \n* recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html)  \n* hand_crafting_disabled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"add_research": {
"name": "add_research",
"returns": "boolean",
"args": {
"technology": {
"name": "technology",
"type": "TechnologySpecification",
"doc": "technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification)"
}
},
"type": "function",
"doc": "Add this technology to the back of the research queue if the queue is enabled.\n Otherwise, set this technology to be researched now.  \n  \n**Parameters**  \ntechnology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification)  \n  \n  \n**Return value**  \nIf the technology was added."
},
"cancel_current_research": {
"name": "cancel_current_research",
"type": "function",
"doc": "Stop the research currently in progress.\n This will remove any dependent technologies from the research queue.  \n"
},
"get_linked_inventory": {
"name": "get_linked_inventory",
"returns": "LuaInventory",
"args": {
"prototype": {
"name": "prototype",
"type": "EntityPrototypeSpecification",
"doc": "prototype :: [EntityPrototypeSpecification](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification)"
},
"link_id": {
"name": "link_id",
"type": "uint",
"doc": "link_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Gets the linked inventory for the given prototype and link ID if it exists or ````nil```` .  \n  \n**Parameters**  \n* prototype :: [EntityPrototypeSpecification](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification)  \n* link_id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of the force.  \n Example Prints \" ````player```` \" ````game.player.print(game.player.force.name)````"
},
"technologies": {
"name": "technologies",
"type": "CustomDictionarystring\u2192LuaTechnology",
"mode": "[R]",
"doc": "Technologies owned by this force, indexed by their name.  \n Example Researches the technology for the player's force ````game.player.force.technologies[\"steel-processing\"].researched\u00a0=\u00a0true````"
},
"recipes": {
"name": "recipes",
"type": "CustomDictionarystring\u2192LuaRecipe",
"mode": "[R]",
"doc": "Recipes available to this force, indexed by their name.  \n Example Prints the category of the given recipe ````game.player.print(game.player.force.recipes[\"transport-belt\"].category)````"
},
"manual_mining_speed_modifier": {
"name": "manual_mining_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "Multiplier of the manual mining speed. Default value is ````0```` .\n The actual mining speed will be multiplied by ````1 + manual_mining_speed_modifier```` .  \n Example Double the player's mining speed ````game.player.force.manual_mining_speed_modifier\u00a0=\u00a01````"
},
"manual_crafting_speed_modifier": {
"name": "manual_crafting_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "Multiplier of the manual crafting speed. Default value is ````0```` .\n The actual crafting speed will be multiplied by ````1 + manual_crafting_speed_modifier```` .  \n Example Double the player's crafting speed ````game.player.force.manual_crafting_speed_modifier\u00a0=\u00a01````"
},
"laboratory_speed_modifier": {
"name": "laboratory_speed_modifier",
"type": "double",
"mode": "[RW]"
},
"laboratory_productivity_bonus": {
"name": "laboratory_productivity_bonus",
"type": "double",
"mode": "[RW]"
},
"worker_robots_speed_modifier": {
"name": "worker_robots_speed_modifier",
"type": "double",
"mode": "[RW]"
},
"worker_robots_battery_modifier": {
"name": "worker_robots_battery_modifier",
"type": "double",
"mode": "[RW]"
},
"worker_robots_storage_bonus": {
"name": "worker_robots_storage_bonus",
"type": "double",
"mode": "[RW]"
},
"current_research": {
"name": "current_research",
"type": "LuaTechnology",
"mode": "[R]",
"doc": "The current technology in research, or ````nil```` if no research is currently ongoing.  \n"
},
"research_progress": {
"name": "research_progress",
"type": "double",
"mode": "[RW]",
"doc": "Progress of current research, as a number in range [0, 1].  \n"
},
"previous_research": {
"name": "previous_research",
"type": "LuaTechnology",
"mode": "[RW]",
"doc": "The previous research if any.  \n"
},
"inserter_stack_size_bonus": {
"name": "inserter_stack_size_bonus",
"type": "double",
"mode": "[RW]",
"doc": "The inserter stack size bonus for non stack inserters  \n"
},
"stack_inserter_capacity_bonus": {
"name": "stack_inserter_capacity_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "Number of items that can be transferred by stack inserters. When writing to this value, it must be >= 0 and <= 254.  \n"
},
"character_trash_slot_count": {
"name": "character_trash_slot_count",
"type": "double",
"mode": "[RW]",
"doc": "Number of character trash slots.  \n"
},
"maximum_following_robot_count": {
"name": "maximum_following_robot_count",
"type": "uint",
"mode": "[RW]",
"doc": "Maximum number of follower robots.  \n"
},
"following_robots_lifetime_modifier": {
"name": "following_robots_lifetime_modifier",
"type": "double",
"mode": "[RW]",
"doc": "Additional lifetime for following robots.  \n"
},
"ghost_time_to_live": {
"name": "ghost_time_to_live",
"type": "uint",
"mode": "[RW]",
"doc": "The time, in ticks, before a placed ghost disappears.  \n"
},
"players": {
"name": "players",
"type": "array ofLuaPlayer",
"mode": "[R]",
"doc": "Players belonging to this force.  \n"
},
"ai_controllable": {
"name": "ai_controllable",
"type": "boolean",
"mode": "[RW]",
"doc": "Enables some higher-level AI behaviour for this force. When set to ````true```` , biters belonging to\n this force will automatically expand into new territories, build new spawners, and form unit\n groups. By default, this value is ````true```` for the enemy force and ````false```` for all others.  \n **Note:** Setting this to ````false```` does not turn off biters' AI. They will still move around and attack\n       players who come close. **Note:** It is necessary for a force to be AI controllable in order to be able to create unit groups\n       or build bases from scripts."
},
"logistic_networks": {
"name": "logistic_networks",
"type": "dictionarystring\u2192array ofLuaLogisticNetwork",
"mode": "[R]",
"doc": "List of logistic networks, grouped by surface.  \n"
},
"item_production_statistics": {
"name": "item_production_statistics",
"type": "LuaFlowStatistics",
"mode": "[R]",
"doc": "The item production statistics for this force.  \n"
},
"fluid_production_statistics": {
"name": "fluid_production_statistics",
"type": "LuaFlowStatistics",
"mode": "[R]",
"doc": "The fluid production statistics for this force.  \n"
},
"kill_count_statistics": {
"name": "kill_count_statistics",
"type": "LuaFlowStatistics",
"mode": "[R]",
"doc": "The kill counter statistics for this force.  \n"
},
"entity_build_count_statistics": {
"name": "entity_build_count_statistics",
"type": "LuaFlowStatistics",
"mode": "[R]",
"doc": "The entity build statistics for this force (built and mined)  \n"
},
"character_running_speed_modifier": {
"name": "character_running_speed_modifier",
"type": "double",
"mode": "[RW]"
},
"artillery_range_modifier": {
"name": "artillery_range_modifier",
"type": "double",
"mode": "[RW]"
},
"character_build_distance_bonus": {
"name": "character_build_distance_bonus",
"type": "uint",
"mode": "[RW]"
},
"character_item_drop_distance_bonus": {
"name": "character_item_drop_distance_bonus",
"type": "uint",
"mode": "[RW]"
},
"character_reach_distance_bonus": {
"name": "character_reach_distance_bonus",
"type": "uint",
"mode": "[RW]"
},
"character_resource_reach_distance_bonus": {
"name": "character_resource_reach_distance_bonus",
"type": "double",
"mode": "[RW]"
},
"character_item_pickup_distance_bonus": {
"name": "character_item_pickup_distance_bonus",
"type": "double",
"mode": "[RW]"
},
"character_loot_pickup_distance_bonus": {
"name": "character_loot_pickup_distance_bonus",
"type": "double",
"mode": "[RW]"
},
"character_inventory_slots_bonus": {
"name": "character_inventory_slots_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "the number of additional inventory slots the character main inventory has.  \n"
},
"deconstruction_time_to_live": {
"name": "deconstruction_time_to_live",
"type": "uint",
"mode": "[RW]",
"doc": "The time, in ticks, before a deconstruction order is removed.  \n"
},
"character_health_bonus": {
"name": "character_health_bonus",
"type": "double",
"mode": "[RW]"
},
"max_successful_attempts_per_tick_per_construction_queue": {
"name": "max_successful_attempts_per_tick_per_construction_queue",
"type": "uint",
"mode": "[RW]"
},
"max_failed_attempts_per_tick_per_construction_queue": {
"name": "max_failed_attempts_per_tick_per_construction_queue",
"type": "uint",
"mode": "[RW]"
},
"zoom_to_world_enabled": {
"name": "zoom_to_world_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Ability to use zoom-to-world on map.  \n"
},
"zoom_to_world_ghost_building_enabled": {
"name": "zoom_to_world_ghost_building_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Ability to build ghosts through blueprint or direct ghost placement, or \"mine\" ghosts when using zoom-to-world.  \n"
},
"zoom_to_world_blueprint_enabled": {
"name": "zoom_to_world_blueprint_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Ability to create new blueprints using empty blueprint item when using zoom-to-world.  \n"
},
"zoom_to_world_deconstruction_planner_enabled": {
"name": "zoom_to_world_deconstruction_planner_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Ability to use deconstruction planner when using zoom-to-world.  \n"
},
"zoom_to_world_selection_tool_enabled": {
"name": "zoom_to_world_selection_tool_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Ability to use custom selection tools when using zoom-to-world.  \n"
},
"character_logistic_requests": {
"name": "character_logistic_requests",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if character requester logistics is enabled.  \n"
},
"rockets_launched": {
"name": "rockets_launched",
"type": "uint",
"mode": "[RW]",
"doc": "The number of rockets launched.  \n"
},
"items_launched": {
"name": "items_launched",
"type": "dictionarystring\u2192uint",
"mode": "[R]",
"doc": "All of the items that have been launched in rockets.  \n"
},
"connected_players": {
"name": "connected_players",
"type": "array ofLuaPlayer",
"mode": "[R]",
"doc": "The connected players belonging to this force.  \n This is primarily useful when you want to do some action against all online players of this force.  \n **Note:** This does *not* index using player index. See [LuaPlayer::index](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index."
},
"mining_drill_productivity_bonus": {
"name": "mining_drill_productivity_bonus",
"type": "double",
"mode": "[RW]"
},
"train_braking_force_bonus": {
"name": "train_braking_force_bonus",
"type": "double",
"mode": "[RW]"
},
"evolution_factor": {
"name": "evolution_factor",
"type": "double",
"mode": "[RW]",
"doc": "Evolution factor of this force.  \n"
},
"evolution_factor_by_pollution": {
"name": "evolution_factor_by_pollution",
"type": "double",
"mode": "[RW]"
},
"evolution_factor_by_time": {
"name": "evolution_factor_by_time",
"type": "double",
"mode": "[RW]"
},
"evolution_factor_by_killing_spawners": {
"name": "evolution_factor_by_killing_spawners",
"type": "double",
"mode": "[RW]"
},
"friendly_fire": {
"name": "friendly_fire",
"type": "boolean",
"mode": "[RW]",
"doc": "If friendly fire is enabled for this force.  \n"
},
"share_chart": {
"name": "share_chart",
"type": "boolean",
"mode": "[RW]",
"doc": "If sharing chart data is enabled for this force.  \n"
},
"research_queue_enabled": {
"name": "research_queue_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether the research queue is available for this force.  \n"
},
"index": {
"name": "index",
"type": "uint",
"mode": "[R]",
"doc": "Unique ID associated with this force.  \n"
},
"research_queue": {
"name": "research_queue",
"type": "array ofTechnologySpecification",
"mode": "[RW]",
"doc": "The research queue of this force.\n Reading this attribute gives an array of [LuaTechnology](https://lua-api.factorio.com/latest/LuaTechnology.html) .  \n To write to this, the entire table must be written. Providing an empty table or ````nil```` will empty the research queue and cancel the current research.\n Writing to this when the research queue is disabled will simply set the last research in the table as the current research.  \n **Note:** The first research in the queue is the current research."
},
"research_enabled": {
"name": "research_enabled",
"type": "boolean",
"mode": "[R]",
"doc": "Whether research is enabled for this force, see [LuaForce::enable_research](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.enable_research) and [LuaForce::disable_research](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.disable_research)  \n"
}
},
"inherits": []
},
"LuaFuelCategoryPrototype": {
"name": "LuaFuelCategoryPrototype",
"type": "LuaFuelCategoryPrototype",
"doc": "Prototype of a fuel category.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
}
},
"inherits": []
},
"LuaGameScript": {
"name": "LuaGameScript",
"type": "LuaGameScript",
"doc": "Main toplevel type, provides access to most of the API though its members. An instance\n of LuaGameScript is available as the global object named ````game```` .  \n",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "This objects name.  \n"
},
"set_game_state": {
"name": "set_game_state",
"args": {
"game_finished": {
"name": "game_finished",
"type": "boolean",
"doc": "Table with the following fields:   \n  * game_finished :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  * player_won :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  * next_level :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  * can_continue :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  * victorious_force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \n"
}
},
"type": "function",
"doc": "Set scenario state.  \n  \n**Parameters**  \nTable with the following fields:   \n  + game_finished :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  + player_won :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  + next_level :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  + can_continue :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  + victorious_force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification)  \n  \n  \n"
},
"get_entity_by_tag": {
"name": "get_entity_by_tag",
"returns": "LuaEntity",
"args": {
"tag": {
"name": "tag",
"type": "string",
"doc": "tag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)"
}
},
"type": "function",
"doc": "**Parameters**  \ntag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  \n"
},
"show_message_dialog": {
"name": "show_message_dialog",
"args": {
"text": {
"name": "text",
"type": "LocalisedString",
"doc": "Table with the following fields:   \n  * text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  What the dialog should say  \n  * image :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Path to an image to show on the dialog  \n  * point_to :: [GuiArrowSpecification](https://lua-api.factorio.com/latest/Concepts.html#GuiArrowSpecification) (optional) : \n     If specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's position.\n     (Use ````point_to={type=\"nowhere\"}```` to remove the arrow entirely.) The dialog itself will be placed near the arrow's target.  \n  * style :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The gui style to use for this speech bubble. Must be of type speech_bubble.  \n  * wrapper_frame_style :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Must be of type flow_style.  \n"
}
},
"type": "function",
"doc": "Show an in-game message dialog.  \n  \n**Parameters**  \nTable with the following fields:   \n  + text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  What the dialog should say  \n  + image :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Path to an image to show on the dialog  \n  + point_to :: [GuiArrowSpecification](https://lua-api.factorio.com/latest/Concepts.html#GuiArrowSpecification) (optional) : \n     If specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's position.\n     (Use ````point_to={type=\"nowhere\"}```` to remove the arrow entirely.) The dialog itself will be placed near the arrow's target.  \n  + style :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The gui style to use for this speech bubble. Must be of type speech_bubble.  \n  + wrapper_frame_style :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Must be of type flow_style.  \n  \n  \n"
},
"is_demo": {
"name": "is_demo",
"returns": "boolean",
"type": "function",
"doc": "Is this the demo version of Factorio?  \n"
},
"reload_script": {
"name": "reload_script",
"type": "function",
"doc": "Forces a reload of the scenario script from the original scenario location.  \n"
},
"reload_mods": {
"name": "reload_mods",
"type": "function",
"doc": "Forces a reload of all mods.  \n"
},
"save_atlas": {
"name": "save_atlas",
"type": "function",
"doc": "Saves the current configuration of Atlas to a file. This will result in huge file containing all\n of the game graphics moved to as small space as possible.  \n"
},
"check_consistency": {
"name": "check_consistency",
"type": "function",
"doc": "Run internal consistency checks. Allegedly prints any errors it finds.  \n"
},
"regenerate_entity": {
"name": "regenerate_entity",
"args": {
"entities": {
"name": "entities",
"type": "stringorarray ofstring",
"doc": "entities :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) : \n   Prototype names of entity or entities to autoplace."
}
},
"type": "function",
"doc": "Regenerate autoplacement of some entities on all surfaces. This can be used to autoplace newly-added entities.  \n  \n**Parameters**  \nentities :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) : \n   Prototype names of entity or entities to autoplace.  \n  \n"
},
"take_screenshot": {
"name": "take_screenshot",
"args": {
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "Table with the following fields:   \n  * player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n  * by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If defined, the screenshot will only be taken for this player.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  If defined, the screenshot will be taken on this surface.  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  If defined, the screenshot will be centered on this position.  \n  * resolution :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Maximum allowed resolution is 16384x16384 (resp. 8192x8192 when anti_alias is true), but maximum recommended resolution is 4096x4096 (resp. 2048x2048).  \n  * zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  * path :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Path to save the screenshot in  \n  * show_gui :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Include game GUI in the screenshot?  \n  * show_entity_info :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Include entity info (alt-mode)?  \n  * show_cursor_building_preview :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, and player is specified, building preview for item in player's cursor will be rendered also.  \n  * anti_alias :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Render in double resolution and scale down (including GUI)?  \n  * quality :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  The render quality if using jpg format (0-100 inclusive).  \n  * allow_in_replay :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, the screenshot will be saved even during replay playback, otherwise this function call does nothing in replays.  \n  * daytime :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Overrides current surface daytime for duration of screenshot rendering.  \n  * water_tick :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Overrides tick of water animation (if animated water is enabled).  \n  * force_render :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) : \n     Screenshot requests are processed in between update and render. The game may skip rendering (drop frames) if previous frame has not finished rendering or the game simulation\n     starts to fall under 60 updates per second. If force_render is set to true, the game won't drop frames and process the screenshot request at the end of the update\n     in which the request was created. This is not honored on multiplayer clients that are catching up to server.  \n"
}
},
"type": "function",
"doc": "Take a screenshot and save it to a file.  \n  \n**Parameters**  \nTable with the following fields:   \n  + player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional)  \n  + by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If defined, the screenshot will only be taken for this player.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  If defined, the screenshot will be taken on this surface.  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  If defined, the screenshot will be centered on this position.  \n  + resolution :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Maximum allowed resolution is 16384x16384 (resp. 8192x8192 when anti_alias is true), but maximum recommended resolution is 4096x4096 (resp. 2048x2048).  \n  + zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  + path :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Path to save the screenshot in  \n  + show_gui :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Include game GUI in the screenshot?  \n  + show_entity_info :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Include entity info (alt-mode)?  \n  + show_cursor_building_preview :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, and player is specified, building preview for item in player's cursor will be rendered also.  \n  + anti_alias :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Render in double resolution and scale down (including GUI)?  \n  + quality :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  The render quality if using jpg format (0-100 inclusive).  \n  + allow_in_replay :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, the screenshot will be saved even during replay playback, otherwise this function call does nothing in replays.  \n  + daytime :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Overrides current surface daytime for duration of screenshot rendering.  \n  + water_tick :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Overrides tick of water animation (if animated water is enabled).  \n  + force_render :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) : \n     Screenshot requests are processed in between update and render. The game may skip rendering (drop frames) if previous frame has not finished rendering or the game simulation\n     starts to fall under 60 updates per second. If force_render is set to true, the game won't drop frames and process the screenshot request at the end of the update\n     in which the request was created. This is not honored on multiplayer clients that are catching up to server.  \n  \n  \n"
},
"set_wait_for_screenshots_to_finish": {
"name": "set_wait_for_screenshots_to_finish",
"type": "function",
"doc": "Forces the screenshot saving system to wait until all queued screenshots have been written to disk.  \n"
},
"take_technology_screenshot": {
"name": "take_technology_screenshot",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "Table with the following fields:   \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The force to use. If not given the ````\"player```` \" force is used.  \n  * path :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Path to save the screenshot in.  \n  * by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If defined, the screenshot will only be taken for this player.  \n  * selected_technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional) :  The technology to highlight.  \n  * skip_disabled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````true```` , disabled technologies will be skipped. Their successors\n     will be attached to the disabled technology's parents. Defaults to ````false```` .  \n  * quality :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  The render quality if using jpg format (0-100 inclusive).  \n"
}
},
"type": "function",
"doc": "**Parameters**  \nTable with the following fields:   \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The force to use. If not given the ````\"player```` \" force is used.  \n  + path :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Path to save the screenshot in.  \n  + by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If defined, the screenshot will only be taken for this player.  \n  + selected_technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional) :  The technology to highlight.  \n  + skip_disabled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````true```` , disabled technologies will be skipped. Their successors\n     will be attached to the disabled technology's parents. Defaults to ````false```` .  \n  + quality :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  The render quality if using jpg format (0-100 inclusive).  \n  \n  \n"
},
"table_to_json": {
"name": "table_to_json",
"returns": "string",
"args": {
"data": {
"name": "data",
"type": "table",
"doc": "data :: [table](https://lua-api.factorio.com/latest/Builtin-Types.html#table)"
}
},
"type": "function",
"doc": "Convert a table to a JSON string  \n  \n**Parameters**  \ndata :: [table](https://lua-api.factorio.com/latest/Builtin-Types.html#table)  \n  \n"
},
"json_to_table": {
"name": "json_to_table",
"returns": "Any",
"args": {
"json": {
"name": "json",
"type": "string",
"doc": "json :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The string to convert"
}
},
"type": "function",
"doc": "Convert a JSON string to a table  \n  \n**Parameters**  \njson :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The string to convert  \n  \n  \n**Return value**  \nThe returned object, or ````nil```` if the json was invalid."
},
"write_file": {
"name": "write_file",
"args": {
"filename": {
"name": "filename",
"type": "string",
"doc": "filename :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Path to the file to write to."
},
"data": {
"name": "data",
"type": "LocalisedString",
"doc": "data :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  File content"
},
"append": {
"name": "append",
"type": "boolean",
"doc": "append :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When ````true```` , this will append to the end of the file. Defaults to ````false```` , which will overwrite any pre-existing file with the new data."
},
"for_player": {
"name": "for_player",
"type": "uint",
"doc": "for_player :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  If given, the file will only be written for this player_index. 0 means only the server if one exists."
}
},
"type": "function",
"doc": "Write a string to a file.  \n  \n**Parameters**  \n* filename :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Path to the file to write to.  \n* data :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  File content  \n* append :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When ````true```` , this will append to the end of the file. Defaults to ````false```` , which will overwrite any pre-existing file with the new data.  \n* for_player :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  If given, the file will only be written for this player_index. 0 means only the server if one exists.  \n  \n"
},
"remove_path": {
"name": "remove_path",
"args": {
"path": {
"name": "path",
"type": "string",
"doc": "path :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Path to remove, relative to the script output directory"
}
},
"type": "function",
"doc": "Remove file or directory. Given path is taken relative to the script output directory. Can be used\n to remove files created by [LuaGameScript::write_file](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.write_file) .  \n  \n**Parameters**  \npath :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Path to remove, relative to the script output directory  \n  \n"
},
"remove_offline_players": {
"name": "remove_offline_players",
"args": {
"players": {
"name": "players",
"type": "array ofLuaPlayerorstring",
"doc": "players :: array of [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  List of players to remove. If not specified,\n   remove all offline players."
}
},
"type": "function",
"doc": "Remove players who are currently not connected from the map.  \n  \n**Parameters**  \nplayers :: array of [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  List of players to remove. If not specified,\n   remove all offline players.  \n  \n"
},
"force_crc": {
"name": "force_crc",
"type": "function",
"doc": "Force a CRC check. Tells all peers to calculate their current map CRC; these CRC are then compared\n against each other. If a mismatch is detected, the game is desynced and some peers are forced to\n reconnect.  \n"
},
"create_force": {
"name": "create_force",
"returns": "LuaForce",
"args": {
"force": {
"name": "force",
"type": "string",
"doc": "force :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the new force"
}
},
"type": "function",
"doc": "Create a new force.  \n  \n**Parameters**  \nforce :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the new force  \n  \n  \n**Return value**  \nThe force that was just created"
},
"merge_forces": {
"name": "merge_forces",
"args": {
"source": {
"name": "source",
"type": "ForceSpecification",
"doc": "source :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force to remove"
},
"destination": {
"name": "destination",
"type": "ForceSpecification",
"doc": "destination :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force to reassign all entities to"
}
},
"type": "function",
"doc": "Marks two forces to be merge together. All entities in the source force will be reassigned to the target force.\n The source force will then be destroyed.  \n  \n**Parameters**  \n* source :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force to remove  \n* destination :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force to reassign all entities to  \n  \n"
},
"create_surface": {
"name": "create_surface",
"returns": "LuaSurface",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the new surface"
},
"settings": {
"name": "settings",
"type": "MapGenSettings",
"doc": "settings :: [MapGenSettings](https://lua-api.factorio.com/latest/Concepts.html#MapGenSettings) (optional) :  Map generation settings"
}
},
"type": "function",
"doc": "Create a new surface  \n  \n**Parameters**  \n* name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the new surface  \n* settings :: [MapGenSettings](https://lua-api.factorio.com/latest/Concepts.html#MapGenSettings) (optional) :  Map generation settings  \n  \n  \n**Return value**  \nThe surface that was just created"
},
"server_save": {
"name": "server_save",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Save name. If not specified, writes into the currently-running save."
}
},
"type": "function",
"doc": "Instruct the server to save the map.  \n  \n**Parameters**  \nname :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Save name. If not specified, writes into the currently-running save.  \n  \n"
},
"auto_save": {
"name": "auto_save",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The autosave name if any. Saves will be named _autosave-*name* when provided."
}
},
"type": "function",
"doc": "Instruct the game to perform an auto-save.  \n  \n**Parameters**  \nname :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The autosave name if any. Saves will be named _autosave-*name* when provided.  \n  \n"
},
"delete_surface": {
"name": "delete_surface",
"args": {
"surface": {
"name": "surface",
"type": "stringorLuaSurface",
"doc": "surface :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaSurface](https://lua-api.factorio.com/latest/LuaSurface.html) :  The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted."
}
},
"type": "function",
"doc": "Deletes the given surface and all entities on it.  \n  \n**Parameters**  \nsurface :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaSurface](https://lua-api.factorio.com/latest/LuaSurface.html) :  The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted.  \n  \n"
},
"disable_replay": {
"name": "disable_replay",
"type": "function",
"doc": "Disables replay saving for the current save file. Once done there's no way to re-enable replay saving for the save file without loading an old save.  \n"
},
"disable_tutorial_triggers": {
"name": "disable_tutorial_triggers",
"type": "function",
"doc": "Disables tutorial triggers, that unlock new tutorials and show notices about unlocked tutorials.  \n"
},
"direction_to_string": {
"name": "direction_to_string",
"args": {
"direction": {
"name": "direction",
"type": "defines.direction",
"doc": "direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction)"
}
},
"type": "function",
"doc": "Converts the given direction into the string version of the direction.  \n  \n**Parameters**  \ndirection :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction)  \n  \n"
},
"print": {
"name": "print",
"args": {
"message": {
"name": "message",
"type": "LocalisedString",
"doc": "message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
},
"color": {
"name": "color",
"type": "Color",
"doc": "color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
}
},
"type": "function",
"doc": "Print text to the chat console all players.  \n  \n**Parameters**  \n* message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n* color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  \n"
},
"create_random_generator": {
"name": "create_random_generator",
"returns": "LuaRandomGenerator",
"args": {
"seed": {
"name": "seed",
"type": "uint",
"doc": "seed :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)"
}
},
"type": "function",
"doc": "Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is used.  \n  \n**Parameters**  \nseed :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n"
},
"check_prototype_translations": {
"name": "check_prototype_translations",
"type": "function",
"doc": "Goes over all items, entities, tiles, recipes, technologies among other things and logs if the locale is incorrect.  \n"
},
"play_sound": {
"name": "play_sound",
"returns": "boolean",
"args": {
"path": {
"name": "path",
"type": "SoundPath",
"doc": "Table with the following fields:   \n  * path :: [SoundPath](https://lua-api.factorio.com/latest/Concepts.html#SoundPath) :  The sound to play  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Where the sound should be played. If not given it's played 'everywhere'.  \n  * volume_modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Must be between 0 and 1 inclusive.  \n"
}
},
"type": "function",
"doc": "Plays a sound for every player in the game on every surface.  \n  \n**Parameters**  \nTable with the following fields:   \n  + path :: [SoundPath](https://lua-api.factorio.com/latest/Concepts.html#SoundPath) :  The sound to play  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Where the sound should be played. If not given it's played 'everywhere'.  \n  + volume_modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Must be between 0 and 1 inclusive.  \n  \n  \n"
},
"is_valid_sound_path": {
"name": "is_valid_sound_path",
"returns": "boolean",
"type": "function",
"doc": "Checks if the given sound path is valid.  \n  \n**Parameters**  \n  \n"
},
"is_valid_sprite_path": {
"name": "is_valid_sprite_path",
"returns": "boolean",
"args": {
"sprite_path": {
"name": "sprite_path",
"type": "SpritePath",
"doc": "sprite_path :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) :  Path to a image."
}
},
"type": "function",
"doc": "Returns ````true```` if sprite_path is valid and contains loaded sprite, otherwise ````false```` . Sprite path of type ````file```` doesn't validate if file exists.  \n  \n**Parameters**  \nsprite_path :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) :  Path to a image.  \n  \n"
},
"kick_player": {
"name": "kick_player",
"args": {
"PlayerSpecification": {
"name": "PlayerSpecification",
"doc": "PlayerSpecification :  The player to kick."
},
"reason": {
"name": "reason",
"type": "LocalisedString",
"doc": "reason :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The reason given if any."
}
},
"type": "function",
"doc": "Kicks the given player from this multiplayer game. Does nothing if this is a single player game or if the player running this isn't an admin.  \n  \n**Parameters**  \n* PlayerSpecification :  The player to kick.  \n* reason :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The reason given if any.  \n  \n"
},
"ban_player": {
"name": "ban_player",
"args": {
"PlayerSpecification": {
"name": "PlayerSpecification",
"doc": "PlayerSpecification :  The player to ban."
},
"reason": {
"name": "reason",
"type": "LocalisedString",
"doc": "reason :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The reason given if any."
}
},
"type": "function",
"doc": "Bans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.  \n  \n**Parameters**  \n* PlayerSpecification :  The player to ban.  \n* reason :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The reason given if any.  \n  \n"
},
"unban_player": {
"name": "unban_player",
"args": {
"PlayerSpecification": {
"name": "PlayerSpecification",
"doc": "PlayerSpecification :  The player to unban."
}
},
"type": "function",
"doc": "Unbans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.  \n  \n**Parameters**  \nPlayerSpecification :  The player to unban.  \n  \n"
},
"purge_player": {
"name": "purge_player",
"args": {
"PlayerSpecification": {
"name": "PlayerSpecification",
"doc": "PlayerSpecification :  The player to purge."
}
},
"type": "function",
"doc": "Purges the given players messages from the game. Does nothing if the player running this isn't an admin.  \n  \n**Parameters**  \nPlayerSpecification :  The player to purge.  \n  \n"
},
"mute_player": {
"name": "mute_player",
"args": {
"PlayerSpecification": {
"name": "PlayerSpecification",
"doc": "PlayerSpecification :  The player to mute."
}
},
"type": "function",
"doc": "Mutes the given player. Does nothing if the player running this isn't an admin.  \n  \n**Parameters**  \nPlayerSpecification :  The player to mute.  \n  \n"
},
"unmute_player": {
"name": "unmute_player",
"args": {
"PlayerSpecification": {
"name": "PlayerSpecification",
"doc": "PlayerSpecification :  The player to unmute."
}
},
"type": "function",
"doc": "Unmutes the given player. Does nothing if the player running this isn't an admin.  \n  \n**Parameters**  \nPlayerSpecification :  The player to unmute.  \n  \n"
},
"count_pipe_groups": {
"name": "count_pipe_groups",
"type": "function",
"doc": "Counts how many distinct groups of pipes exist in the world.  \n"
},
"is_multiplayer": {
"name": "is_multiplayer",
"returns": "boolean",
"type": "function",
"doc": "Is the map loaded is multiplayer?  \n"
},
"get_active_entities_count": {
"name": "get_active_entities_count",
"returns": "uint",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  If give, only the entities active on this surface are counted."
}
},
"type": "function",
"doc": "Gets the number of entities that are active (updated each tick).  \n  \n**Parameters**  \nsurface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  If give, only the entities active on this surface are counted.  \n  \n"
},
"get_map_exchange_string": {
"name": "get_map_exchange_string",
"returns": "string",
"type": "function",
"doc": "Gets the map exchange string for the map generation settings that were used to create this map.  \n"
},
"parse_map_exchange_string": {
"name": "parse_map_exchange_string",
"returns": "MapExchangeStringData",
"args": {
"map_exchange_string": {
"name": "map_exchange_string",
"type": "string",
"doc": "map_exchange_string :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)"
}
},
"type": "function",
"doc": "Convert a map exchange string to map gen settings and map settings.  \n  \n**Parameters**  \nmap_exchange_string :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  \n"
},
"get_train_stops": {
"name": "get_train_stops",
"returns": "array ofLuaEntity",
"args": {
"opts": {
"name": "opts",
"type": "stringorarray ofstring",
"doc": "opts (optional) :  Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n"
}
},
"type": "function",
"doc": "Gets train stops matching the given filters.  \n  \n**Parameters**  \nopts (optional) :  Table with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  \n  \n"
},
"get_player": {
"name": "get_player",
"returns": "LuaPlayer",
"args": {
"player": {
"name": "player",
"type": "uintorstring",
"doc": "player :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The player index or name."
}
},
"type": "function",
"doc": "Gets the given player or returns ````nil```` if no player is found.  \n  \n**Parameters**  \nplayer :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The player index or name.  \n  \n"
},
"get_surface": {
"name": "get_surface",
"returns": "LuaSurface",
"args": {
"surface": {
"name": "surface",
"type": "uintorstring",
"doc": "surface :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The surface index or name."
}
},
"type": "function",
"doc": "Gets the given surface or returns ````nil```` if no surface is found.  \n  \n**Parameters**  \nsurface :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The surface index or name.  \n  \n"
},
"create_profiler": {
"name": "create_profiler",
"returns": "LuaProfiler",
"args": {
"stopped": {
"name": "stopped",
"type": "boolean",
"doc": "stopped :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Create the timer stopped"
}
},
"type": "function",
"doc": "Creates a [LuaProfiler](https://lua-api.factorio.com/latest/LuaProfiler.html) , which is used for measuring script performance.  \n  \n**Parameters**  \nstopped :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Create the timer stopped  \n  \n"
},
"evaluate_expression": {
"name": "evaluate_expression",
"returns": "double",
"args": {
"expression": {
"name": "expression",
"type": "string",
"doc": "expression :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The expression to evaluate."
},
"variables": {
"name": "variables",
"type": "dictionarystring\u2192double",
"doc": "variables :: dictionary [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) \u2192 [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Variables to be substituted."
}
},
"type": "function",
"doc": "Evaluate an expression, substituting variables as provided.\n For details on the formula, see the relevant page on the [Factorio wiki](https://lua-api.factorio.com/latest/https://wiki.factorio.com/Prototype/Technology#unit) .  \n  \n**Parameters**  \n* expression :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The expression to evaluate.  \n* variables :: dictionary [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) \u2192 [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Variables to be substituted.  \n  \n"
},
"get_filtered_entity_prototypes": {
"name": "get_filtered_entity_prototypes",
"returns": "CustomDictionarystring\u2192LuaEntityPrototype",
"args": {
"filters": {
"name": "filters",
"type": "EntityPrototypeFilters",
"doc": "filters :: [EntityPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [EntityPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeFilters)  \n  \n"
},
"get_filtered_item_prototypes": {
"name": "get_filtered_item_prototypes",
"returns": "CustomDictionarystring\u2192LuaItemPrototype",
"args": {
"filters": {
"name": "filters",
"type": "ItemPrototypeFilters",
"doc": "filters :: [ItemPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#ItemPrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [ItemPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#ItemPrototypeFilters)  \n  \n"
},
"get_filtered_equipment_prototypes": {
"name": "get_filtered_equipment_prototypes",
"returns": "CustomDictionarystring\u2192LuaEquipmentPrototype",
"args": {
"filters": {
"name": "filters",
"type": "EquipmentPrototypeFilters",
"doc": "filters :: [EquipmentPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#EquipmentPrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [EquipmentPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#EquipmentPrototypeFilters)  \n  \n"
},
"get_filtered_mod_setting_prototypes": {
"name": "get_filtered_mod_setting_prototypes",
"returns": "CustomDictionarystring\u2192LuaModSettingPrototype",
"args": {
"filters": {
"name": "filters",
"type": "ModSettingPrototypeFilters",
"doc": "filters :: [ModSettingPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#ModSettingPrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [ModSettingPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#ModSettingPrototypeFilters)  \n  \n"
},
"get_filtered_achievement_prototypes": {
"name": "get_filtered_achievement_prototypes",
"returns": "CustomDictionarystring\u2192LuaAchievementPrototype",
"args": {
"filters": {
"name": "filters",
"type": "AchievementPrototypeFilters",
"doc": "filters :: [AchievementPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#AchievementPrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [AchievementPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#AchievementPrototypeFilters)  \n  \n"
},
"get_filtered_tile_prototypes": {
"name": "get_filtered_tile_prototypes",
"returns": "CustomDictionarystring\u2192LuaTilePrototype",
"args": {
"filters": {
"name": "filters",
"type": "TilePrototypeFilters",
"doc": "filters :: [TilePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#TilePrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [TilePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#TilePrototypeFilters)  \n  \n"
},
"get_filtered_decorative_prototypes": {
"name": "get_filtered_decorative_prototypes",
"returns": "CustomDictionarystring\u2192LuaDecorativePrototype",
"args": {
"filters": {
"name": "filters",
"type": "DecorativePrototypeFilters",
"doc": "filters :: [DecorativePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#DecorativePrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [DecorativePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#DecorativePrototypeFilters)  \n  \n"
},
"get_filtered_fluid_prototypes": {
"name": "get_filtered_fluid_prototypes",
"returns": "CustomDictionarystring\u2192LuaFluidPrototype",
"args": {
"filters": {
"name": "filters",
"type": "FluidPrototypeFilters",
"doc": "filters :: [FluidPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#FluidPrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [FluidPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#FluidPrototypeFilters)  \n  \n"
},
"get_filtered_recipe_prototypes": {
"name": "get_filtered_recipe_prototypes",
"returns": "CustomDictionarystring\u2192LuaRecipePrototype",
"args": {
"filters": {
"name": "filters",
"type": "RecipePrototypeFilters",
"doc": "filters :: [RecipePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#RecipePrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [RecipePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#RecipePrototypeFilters)  \n  \n"
},
"get_filtered_technology_prototypes": {
"name": "get_filtered_technology_prototypes",
"returns": "CustomDictionarystring\u2192LuaTechnologyPrototype",
"args": {
"filters": {
"name": "filters",
"type": "TechnologyPrototypeFilters",
"doc": "filters :: [TechnologyPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#TechnologyPrototypeFilters)"
}
},
"type": "function",
"doc": "**Parameters**  \nfilters :: [TechnologyPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#TechnologyPrototypeFilters)  \n  \n"
},
"create_inventory": {
"name": "create_inventory",
"returns": "LuaInventory",
"args": {
"size": {
"name": "size",
"type": "uint16",
"doc": "size :: [uint16](https://lua-api.factorio.com/latest/Builtin-Types.html#uint16) :  The number of slots the inventory initially has."
}
},
"type": "function",
"doc": "Creates an inventory that is not owned by any game object.\n It can be resized later with [LuaInventory::resize](https://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.resize) .  \n  \n**Parameters**  \nsize :: [uint16](https://lua-api.factorio.com/latest/Builtin-Types.html#uint16) :  The number of slots the inventory initially has.  \n  \n"
},
"get_script_inventories": {
"name": "get_script_inventories",
"returns": "dictionarystring\u2192array ofLuaInventory",
"args": {
"mod": {
"name": "mod",
"type": "string",
"doc": "mod :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The mod who's inventories to get. If not provided all inventories are returned."
}
},
"type": "function",
"doc": "Gets the inventories created through [LuaGameScript::create_inventory](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.create_inventory)  \n  \n**Parameters**  \nmod :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The mod who's inventories to get. If not provided all inventories are returned.  \n  \n  \n**Return value**  \nA mapping of mod name to array of inventories owned by that mod."
},
"reset_time_played": {
"name": "reset_time_played",
"type": "function",
"doc": "Resets the amount of time played for this map.  \n"
},
"encode_string": {
"name": "encode_string",
"returns": "string",
"args": {
"string": {
"name": "string",
"type": "string",
"doc": "string :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The string to encode."
}
},
"type": "function",
"doc": "Deflates and base64 encodes the given string.  \n  \n**Parameters**  \nstring :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The string to encode.  \n  \n  \n**Return value**  \nThe encoded string or ````nil```` if the encode failed."
},
"decode_string": {
"name": "decode_string",
"returns": "string",
"args": {
"string": {
"name": "string",
"type": "string",
"doc": "string :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The string to decode."
}
},
"type": "function",
"doc": "Base64 decodes and inflates the given string.  \n  \n**Parameters**  \nstring :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The string to decode.  \n  \n  \n**Return value**  \nThe decoded string or ````nil```` if the decode failed."
},
"player": {
"name": "player",
"type": "LuaPlayer",
"mode": "[R]",
"doc": "The player typing at the console - ````nil```` in all other instances. See [LuaGameScript::players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) for accessing all players.  \n"
},
"players": {
"name": "players",
"type": "CustomDictionaryuintorstring\u2192LuaPlayer",
"mode": "[R]",
"doc": "**Note:** This is a sparse table so pairs(), a known player index, or player name should be used to access elements."
},
"map_settings": {
"name": "map_settings",
"type": "MapSettings",
"mode": "[R]"
},
"difficulty_settings": {
"name": "difficulty_settings",
"type": "DifficultySettings",
"mode": "[R]",
"doc": "Although it can be done; because different difficulties can have different technology or recipe trees it's not recommended to change difficulty settings mid-game.  \n"
},
"difficulty": {
"name": "difficulty",
"type": "defines.difficulty",
"mode": "[R]",
"doc": "Current scenario difficulty.  \n"
},
"forces": {
"name": "forces",
"type": "CustomDictionaryuintorstring\u2192LuaForce",
"mode": "[R]"
},
"entity_prototypes": {
"name": "entity_prototypes",
"type": "CustomDictionarystring\u2192LuaEntityPrototype",
"mode": "[R]"
},
"item_prototypes": {
"name": "item_prototypes",
"type": "CustomDictionarystring\u2192LuaItemPrototype",
"mode": "[R]"
},
"fluid_prototypes": {
"name": "fluid_prototypes",
"type": "CustomDictionarystring\u2192LuaFluidPrototype",
"mode": "[R]"
},
"tile_prototypes": {
"name": "tile_prototypes",
"type": "CustomDictionarystring\u2192LuaTilePrototype",
"mode": "[R]"
},
"equipment_prototypes": {
"name": "equipment_prototypes",
"type": "CustomDictionarystring\u2192LuaEquipmentPrototype",
"mode": "[R]"
},
"damage_prototypes": {
"name": "damage_prototypes",
"type": "CustomDictionarystring\u2192LuaDamagePrototype",
"mode": "[R]"
},
"virtual_signal_prototypes": {
"name": "virtual_signal_prototypes",
"type": "CustomDictionarystring\u2192LuaVirtualSignalPrototype",
"mode": "[R]"
},
"equipment_grid_prototypes": {
"name": "equipment_grid_prototypes",
"type": "CustomDictionarystring\u2192LuaEquipmentGridPrototype",
"mode": "[R]"
},
"recipe_prototypes": {
"name": "recipe_prototypes",
"type": "CustomDictionarystring\u2192LuaRecipePrototype",
"mode": "[R]"
},
"technology_prototypes": {
"name": "technology_prototypes",
"type": "CustomDictionarystring\u2192LuaTechnologyPrototype",
"mode": "[R]"
},
"decorative_prototypes": {
"name": "decorative_prototypes",
"type": "CustomDictionarystring\u2192LuaDecorativePrototype",
"mode": "[R]"
},
"particle_prototypes": {
"name": "particle_prototypes",
"type": "CustomDictionarystring\u2192LuaParticlePrototype",
"mode": "[R]"
},
"autoplace_control_prototypes": {
"name": "autoplace_control_prototypes",
"type": "CustomDictionarystring\u2192LuaAutoplaceControlPrototype",
"mode": "[R]"
},
"noise_layer_prototypes": {
"name": "noise_layer_prototypes",
"type": "CustomDictionarystring\u2192LuaNoiseLayerPrototype",
"mode": "[R]"
},
"mod_setting_prototypes": {
"name": "mod_setting_prototypes",
"type": "CustomDictionarystring\u2192LuaModSettingPrototype",
"mode": "[R]"
},
"custom_input_prototypes": {
"name": "custom_input_prototypes",
"type": "CustomDictionarystring\u2192LuaCustomInputPrototype",
"mode": "[R]"
},
"ammo_category_prototypes": {
"name": "ammo_category_prototypes",
"type": "CustomDictionarystring\u2192LuaAmmoCategoryPrototype",
"mode": "[R]"
},
"named_noise_expressions": {
"name": "named_noise_expressions",
"type": "CustomDictionarystring\u2192LuaNamedNoiseExpression",
"mode": "[R]"
},
"item_subgroup_prototypes": {
"name": "item_subgroup_prototypes",
"type": "CustomDictionarystring\u2192LuaGroup",
"mode": "[R]"
},
"item_group_prototypes": {
"name": "item_group_prototypes",
"type": "CustomDictionarystring\u2192LuaGroup",
"mode": "[R]"
},
"fuel_category_prototypes": {
"name": "fuel_category_prototypes",
"type": "CustomDictionarystring\u2192LuaFuelCategoryPrototype",
"mode": "[R]"
},
"resource_category_prototypes": {
"name": "resource_category_prototypes",
"type": "CustomDictionarystring\u2192LuaResourceCategoryPrototype",
"mode": "[R]"
},
"achievement_prototypes": {
"name": "achievement_prototypes",
"type": "CustomDictionarystring\u2192LuaAchievementPrototype",
"mode": "[R]"
},
"module_category_prototypes": {
"name": "module_category_prototypes",
"type": "CustomDictionarystring\u2192LuaModuleCategoryPrototype",
"mode": "[R]"
},
"equipment_category_prototypes": {
"name": "equipment_category_prototypes",
"type": "CustomDictionarystring\u2192LuaEquipmentCategoryPrototype",
"mode": "[R]"
},
"trivial_smoke_prototypes": {
"name": "trivial_smoke_prototypes",
"type": "CustomDictionarystring\u2192LuaTrivialSmokePrototype",
"mode": "[R]"
},
"shortcut_prototypes": {
"name": "shortcut_prototypes",
"type": "CustomDictionarystring\u2192LuaShortcutPrototype",
"mode": "[R]"
},
"recipe_category_prototypes": {
"name": "recipe_category_prototypes",
"type": "CustomDictionarystring\u2192LuaRecipeCategoryPrototype",
"mode": "[R]"
},
"map_gen_presets": {
"name": "map_gen_presets",
"type": "CustomDictionarystring\u2192MapGenPreset",
"mode": "[R]",
"doc": "A MapGenPreset is an exact copy of the prototype table provided from the data stage.  \n"
},
"styles": {
"name": "styles",
"type": "CustomDictionarystring\u2192string",
"mode": "[R]",
"doc": "The styles that [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) can use. A mapping of style name to style type.  \n"
},
"tick": {
"name": "tick",
"type": "uint",
"mode": "[R]",
"doc": "Current map tick.  \n"
},
"ticks_played": {
"name": "ticks_played",
"type": "uint",
"mode": "[R]",
"doc": "The number of ticks since this game was 'created'.\n A game is 'created' either by using \"new game\" or \"new game from scenario\".  \n **Note:** This differs over [LuaGameScript::tick](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) in that making a game from a scenario always starts with ticks_played value at 0 even if the scenario has its own level data where the [LuaGameScript::tick](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) is > 0. **Note:** This value has no relation with [LuaGameScript::tick](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick) and can be completely different values."
},
"tick_paused": {
"name": "tick_paused",
"type": "boolean",
"mode": "[RW]",
"doc": "If the tick has been paused. This means that entity update has been paused.  \n"
},
"ticks_to_run": {
"name": "ticks_to_run",
"type": "uint",
"mode": "[RW]",
"doc": "The number of ticks to be run while the tick is paused.\n When [LuaGameScript::tick_paused](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.tick_paused) is true, ticks_to_run behaves the following way:\n While this is > 0, the entity update is running normally and this value is decremented every tick. When this reaches 0, the game will pause again.  \n"
},
"finished": {
"name": "finished",
"type": "boolean",
"mode": "[R]",
"doc": "Is the scenario finished?  \n"
},
"speed": {
"name": "speed",
"type": "float",
"mode": "[RW]",
"doc": "Speed to update the map at. 1.0 is normal speed -- 60 UPS.  \n **Note:** Minimum value is 0.01."
},
"surfaces": {
"name": "surfaces",
"type": "CustomDictionaryuintorstring\u2192LuaSurface",
"mode": "[R]"
},
"active_mods": {
"name": "active_mods",
"type": "dictionarystring\u2192string",
"mode": "[R]",
"doc": "The active mods versions. The keys are mod names, the values are the versions.  \n Example This will print the names and versions of active mods to player p's console. ````for\u00a0name,\u00a0version\u00a0in\u00a0pairs(game.active_mods)\u00a0do p.print(name\u00a0..\u00a0\"\u00a0version\u00a0\"\u00a0..\u00a0version) end````"
},
"connected_players": {
"name": "connected_players",
"type": "array ofLuaPlayer",
"mode": "[R]",
"doc": "The online players  \n This is primarily useful when you want to do some action against all online players.  \n **Note:** This does *not* index using player index. See [LuaPlayer::index](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index."
},
"permissions": {
"name": "permissions",
"type": "LuaPermissionGroups",
"mode": "[R]"
},
"backer_names": {
"name": "backer_names",
"type": "CustomDictionaryuint\u2192string",
"mode": "[R]"
},
"default_map_gen_settings": {
"name": "default_map_gen_settings",
"type": "MapGenSettings",
"mode": "[R]",
"doc": "The default map gen settings for this save.  \n"
},
"enemy_has_vision_on_land_mines": {
"name": "enemy_has_vision_on_land_mines",
"type": "boolean",
"mode": "[RW]",
"doc": "Determines if enemy land mines are completely invisible or not.  \n"
},
"autosave_enabled": {
"name": "autosave_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "True by default. Can be used to disable autosaving.\n Make sure to turn it back on soon after.  \n"
},
"draw_resource_selection": {
"name": "draw_resource_selection",
"type": "boolean",
"mode": "[RW]",
"doc": "True by default. Can be used to disable the highlighting of resource patches when they are hovered on the map.  \n"
},
"pollution_statistics": {
"name": "pollution_statistics",
"type": "LuaFlowStatistics",
"mode": "[R]",
"doc": "The pollution statistics for this map.  \n"
},
"max_force_distraction_distance": {
"name": "max_force_distraction_distance",
"type": "double",
"mode": "[R]"
},
"max_force_distraction_chunk_distance": {
"name": "max_force_distraction_chunk_distance",
"type": "uint",
"mode": "[R]"
},
"max_electric_pole_supply_area_distance": {
"name": "max_electric_pole_supply_area_distance",
"type": "float",
"mode": "[R]"
},
"max_electric_pole_connection_distance": {
"name": "max_electric_pole_connection_distance",
"type": "double",
"mode": "[R]"
},
"max_beacon_supply_area_distance": {
"name": "max_beacon_supply_area_distance",
"type": "double",
"mode": "[R]"
},
"max_gate_activation_distance": {
"name": "max_gate_activation_distance",
"type": "double",
"mode": "[R]"
},
"max_inserter_reach_distance": {
"name": "max_inserter_reach_distance",
"type": "double",
"mode": "[R]"
},
"max_pipe_to_ground_distance": {
"name": "max_pipe_to_ground_distance",
"type": "uint8",
"mode": "[R]"
},
"max_underground_belt_distance": {
"name": "max_underground_belt_distance",
"type": "uint8",
"mode": "[R]"
}
},
"inherits": []
},
"LuaGenericOnOffControlBehavior": {
"name": "LuaGenericOnOffControlBehavior",
"type": "LuaGenericOnOffControlBehavior",
"doc": "An abstract base class for behaviors that support switching the entity on or off based on some condition.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"disabled": {
"name": "disabled",
"type": "boolean",
"mode": "[R]",
"doc": "If the entity is currently disabled because of the control behavior.  \n"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The circuit condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the circuit condition. Example Tell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 chain\n   signals. ````a_behavior.circuit_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"logistic_condition": {
"name": "logistic_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The logistic condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the logistic condition. Example Tell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more than\n   4 chain signals. ````a_behavior.logistic_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"connect_to_logistic_network": {
"name": "connect_to_logistic_network",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if this should connect to the logistic network.  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaGroup": {
"name": "LuaGroup",
"type": "LuaGroup",
"doc": "Item group or subgroup.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]",
"doc": "Localised name of the group.  \n"
},
"type": {
"name": "type",
"type": "string",
"mode": "[R]"
},
"group": {
"name": "group",
"type": "LuaGroup",
"mode": "[R]",
"doc": "The parent group if any; ````nil```` if none.  \n"
},
"subgroups": {
"name": "subgroups",
"type": "array ofLuaGroup",
"mode": "[R]",
"doc": "Subgroups of this group.  \n **Note:** Can only be used on groups, not on subgroups."
},
"order_in_recipe": {
"name": "order_in_recipe",
"type": "string",
"mode": "[R]",
"doc": "The additional order value used in recipe ordering.  \n **Note:** Can only be used on groups, not on subgroups."
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]"
}
},
"inherits": []
},
"LuaGui": {
"name": "LuaGui",
"type": "LuaGui",
"doc": "The root of the GUI. This type houses the root elements, ````top```` , ````left```` , ````center```` , ````goal```` , and ````screen```` , to which\n other elements can be added to be displayed on screen.  \n **Note:** Every player can have a different GUI state.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"is_valid_sprite_path": {
"name": "is_valid_sprite_path",
"returns": "boolean",
"args": {
"sprite_path": {
"name": "sprite_path",
"type": "SpritePath",
"doc": "sprite_path :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) :  Path to a image."
}
},
"type": "function",
"doc": "Returns ````true```` if sprite_path is valid and contains loaded sprite, otherwise ````false```` . Sprite path of type ````file```` doesn't validate if file exists.  \n  \n**Parameters**  \nsprite_path :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) :  Path to a image.  \n  \n"
},
"player": {
"name": "player",
"type": "LuaPlayer",
"mode": "[R]",
"doc": "The player who owns this gui.  \n"
},
"children": {
"name": "children",
"type": "dictionarystring\u2192LuaGuiElement",
"mode": "[R]",
"doc": "The children GUI elements mapped by name <> element.  \n"
},
"top": {
"name": "top",
"type": "LuaGuiElement",
"mode": "[R]",
"doc": "The top part of the GUI. It is a flow element inside a scroll pane element.  \n"
},
"left": {
"name": "left",
"type": "LuaGuiElement",
"mode": "[R]",
"doc": "The left part of the GUI. It is a flow element inside a scroll pane element.  \n"
},
"center": {
"name": "center",
"type": "LuaGuiElement",
"mode": "[R]",
"doc": "The center part of the GUI. It is a flow element.  \n"
},
"goal": {
"name": "goal",
"type": "LuaGuiElement",
"mode": "[R]",
"doc": "The flow used in the objectives window. It is a flow element.\n   The objectives window is only visible when the flow is not empty or the objective text is set.  \n"
},
"screen": {
"name": "screen",
"type": "LuaGuiElement",
"mode": "[R]",
"doc": "For showing a GUI somewhere on the entire screen. It is an empty-widget element.  \n"
},
"relative": {
"name": "relative",
"type": "LuaGuiElement",
"mode": "[R]",
"doc": "For showing a GUI somewhere relative to one of the game GUIs. It is an empty-widget element.  \n"
}
},
"inherits": []
},
"LuaGuiElement": {
"name": "LuaGuiElement",
"type": "LuaGuiElement",
"doc": "An element of a custom GUI. This type is used to represent any kind of a GUI element - labels, buttons\n and frames are all instances of this type. Just like [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) , different kinds\n of elements support different attributes; attempting to access an attribute on an element that doesn't support\n it (for instance, trying to access the ````column_count```` of a ````textfield```` ) will result in a runtime error.  \n The following types of GUI element are supported:  \n   \n  * ````\"button\"```` : A clickable element. Relevant event: [on_gui_click](https://lua-api.factorio.com/latest/events.html#on_gui_click)  \n  * ````\"sprite-button\"```` : A ````button```` that displays a sprite rather than text. Relevant event: [on_gui_click](https://lua-api.factorio.com/latest/events.html#on_gui_click)  \n  * ````\"checkbox\"```` : A clickable element with a check mark that can be turned off or on. Relevant event: [on_gui_checked_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_checked_state_changed)  \n  * ````\"flow\"```` : An invisible container that lays out its children either horizontally or vertically. The root\n         GUI elements ( ````top```` , ````left```` , ````center```` and ````screen```` ; see [LuaGui](https://lua-api.factorio.com/latest/LuaGui.html) ) are flows.  \n  * ````\"frame\"```` : A non-transparent box that contains other elements. It can have a title (set via the ````caption```` attribute). Just like a ````flow```` , it lays out its children either horizontally or vertically. Relevant event: [on_gui_location_changed](https://lua-api.factorio.com/latest/events.html#on_gui_location_changed)  \n  * ````\"label\"```` : A piece of text.  \n  * ````\"line\"```` : A horizontal or vertical separation line.  \n  * ````\"progressbar\"```` : A partially filled bar that can be used to indicate progress.  \n  * ````\"table\"```` : An invisible container that lays out its children in a specific number of columns.\n         The width of each column is determined by the widest element it contains.  \n  * ````\"textfield\"```` : A single-line box the user can type into. Relevant events: [on_gui_text_changed](https://lua-api.factorio.com/latest/events.html#on_gui_text_changed) , [on_gui_confirmed](https://lua-api.factorio.com/latest/events.html#on_gui_confirmed)  \n  * ````\"radiobutton\"```` : A clickable element that is functionally identical to a ````checkbox```` , but has a circular appearance. Relevant event: [on_gui_checked_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_checked_state_changed)  \n  * ````\"sprite\"```` : An element that shows an image.  \n  * ````\"scroll-pane\"```` : An invisible element that is similar to a ````flow```` , but has the ability to show and use scroll bars.  \n  * ````\"drop-down\"```` : A drop-down containing strings of text. Relevant event: [on_gui_selection_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_selection_state_changed)  \n  * ````\"list-box\"```` : A list of strings, only one of which can be selected at a time. Relevant event: [on_gui_selection_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_selection_state_changed)  \n  * ````\"camera\"```` : A camera that shows the game at the given position on the given surface.  \n  * ````\"choose-elem-button\"```` : A button that lets the player pick from a certain kind of prototype, with optional filtering. Relevant event: [on_gui_elem_changed](https://lua-api.factorio.com/latest/events.html#on_gui_elem_changed)  \n  * ````\"text-box\"```` : A multi-line ````textfield```` . Relevant event: [on_gui_text_changed](https://lua-api.factorio.com/latest/events.html#on_gui_text_changed)  \n  * ````\"slider\"```` : A horizontal number line which can be used to choose a number. Relevant event: [on_gui_value_changed](https://lua-api.factorio.com/latest/events.html#on_gui_value_changed)  \n  * ````\"minimap\"```` : A minimap preview, similar to the normal player minimap.  \n  * ````\"entity-preview\"```` : A preview of an entity. The entity has to be set after the GUI element is created.  \n  * ````\"empty-widget\"```` : An empty element that just exists. The root GUI element ````screen```` is an ````empty-widget```` .  \n  * ````\"tabbed-pane\"```` : A collection of ````tab```` s and their contents. Relevant event: [on_gui_selected_tab_changed](https://lua-api.factorio.com/latest/events.html#on_gui_selected_tab_changed)  \n  * ````\"tab\"```` : A tab for use in a ````tabbed-pane```` .  \n  * ````\"switch\"```` : A switch with three possible states. Relevant event: [on_gui_switch_state_changed](https://lua-api.factorio.com/latest/events.html#on_gui_switch_state_changed)  \n Each GUI element allows access to its children by having them as attributes. Thus, one can use the ````parent.child```` syntax to refer to children. Lua also supports the ````parent[\"child\"]```` syntax to refer to the\n same element. This can be used in cases where the child has a name that isn't a valid Lua identifier.  \n Example This will add a label called ````greeting```` to the top flow. Immediately after, it will change its text\n   to illustrate accessing child elements. ````game.player.gui.top.add{type=\"label\",\u00a0name=\"greeting\",\u00a0caption=\"Hi\"} game.player.gui.top.greeting.caption\u00a0=\u00a0\"Hello\u00a0there!\" game.player.gui.top[\"greeting\"].caption\u00a0=\u00a0\"Actually,\u00a0never\u00a0mind,\u00a0I\u00a0don't\u00a0like\u00a0your\u00a0face\"```` Example This will add a tabbed-pane and 2 tabs with contents. ````local\u00a0tabbed_pane\u00a0=\u00a0game.player.gui.top.add{type=\"tabbed-pane\"} local\u00a0tab1\u00a0=\u00a0tabbed_pane.add{type=\"tab\",\u00a0caption=\"Tab\u00a01\"} local\u00a0tab2\u00a0=\u00a0tabbed_pane.add{type=\"tab\",\u00a0caption=\"Tab\u00a02\"} local\u00a0label1\u00a0=\u00a0tabbed_pane.add{type=\"label\",\u00a0caption=\"Label\u00a01\"} local\u00a0label2\u00a0=\u00a0tabbed_pane.add{type=\"label\",\u00a0caption=\"Label\u00a02\"} tabbed_pane.add_tab(tab1,\u00a0label1) tabbed_pane.add_tab(tab2,\u00a0label2)````",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"add": {
"name": "add",
"returns": "LuaGuiElement",
"args": {
"type": {
"name": "type",
"type": "string",
"doc": "Table with the following fields:   \n  * type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The kind of element to add. Has to be one of the GUI element types listed at the top of this page.  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Name of the child element.  \n  * caption :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The text displayed on the child element. For frames, this is their title. For other elements, like buttons or\n     labels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it.  \n  * tooltip :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  Tooltip of the child element.  \n  * enabled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the child element is enabled. Defaults to ````true```` .  \n  * ignored_by_interaction :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the child element is ignored by interaction. Defaults to ````false```` .  \n  * style :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Style of the child element.  \n  * tags :: [Tags](https://lua-api.factorio.com/latest/Concepts.html#Tags) (optional) :  The [Tags](https://lua-api.factorio.com/latest/Concepts.html#Tags) associated with the child element.  \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The location in its parent that the child element should slot into. By default, the child will be appended onto the end.  \n  * anchor :: [GuiAnchor](https://lua-api.factorio.com/latest/Concepts.html#GuiAnchor) (optional) :  Where to position the child element when in the ````relative```` element.  \n  * Other attributes may have to be specified, depending on ````type```` :   \n    + ````button````   \n      - mouse_button_filter :: [MouseButtonFlags](https://lua-api.factorio.com/latest/Concepts.html#MouseButtonFlags) (optional) :  Which mouse buttons the button responds to. Defaults to ````\"left-and-right\"```` .  \n  \n    + ````flow````   \n      - direction :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial direction of the flow's layout. See [LuaGuiElement::direction](https://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.direction) . Defaults to ````\"horizontal\"```` .  \n  \n    + ````frame````   \n      - direction :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial direction of the frame's layout. See [LuaGuiElement::direction](https://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.direction) . Defaults to ````\"horizontal\"```` .  \n  \n    + ````table````   \n      - column_count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Number of columns. This can't be changed after the table is created.  \n      - draw_vertical_lines :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the table should draw vertical grid lines. Defaults to ````false```` .  \n      - draw_horizontal_lines :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the table should draw horizontal grid lines. Defaults to ````false```` .  \n      - draw_horizontal_line_after_headers :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the table should draw a single horizontal grid line after the headers. Defaults to ````false```` .  \n      - vertical_centering :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the content of the table should be vertically centered. Defaults to ````true```` .  \n  \n    + ````textfield````   \n      - text :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial text contained in the textfield.  \n      - numeric :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      - allow_decimal :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      - allow_negative :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      - is_password :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      - lose_focus_on_confirm :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      - clear_and_focus_on_right_click :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n  \n    + ````progressbar````   \n      - value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The initial value of the progressbar, in the range [0, 1]. Defaults to ````0```` .  \n  \n    + ````checkbox````   \n      - state :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  The initial checked-state of the checkbox.  \n  \n    + ````radiobutton````   \n      - state :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  The initial checked-state of the radiobutton.  \n  \n    + ````sprite-button````   \n      - sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional) :  Path to the image to display on the button.  \n      - hovered_sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional) :  Path to the image to display on the button when it is hovered.  \n      - clicked_sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional) :  Path to the image to display on the button when it is clicked.  \n      - number :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The number shown on the button.  \n      - show_percent_for_small_numbers :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Formats small numbers as percentages. Defaults to ````false```` .  \n      - mouse_button_filter :: [MouseButtonFlags](https://lua-api.factorio.com/latest/Concepts.html#MouseButtonFlags) (optional) :  The mouse buttons that the button responds to. Defaults to ````\"left-and-right\"```` .  \n  \n    + ````sprite````   \n      - sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional) :  Path to the image to display.  \n  \n    + ````scroll-pane````   \n      - horizontal_scroll_policy :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Policy of the horizontal scroll bar. Possible values are ````\"auto\"```` , ````\"never\"```` , ````\"always\"```` , ````\"auto-and-reserve-space\"```` , ````\"dont-show-but-allow-scrolling\"```` . Defaults to ````\"auto\"```` .  \n      - vertical_scroll_policy :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Policy of the vertical scroll bar. Possible values are ````\"auto\"```` , ````\"never\"```` , ````\"always\"```` , ````\"auto-and-reserve-space\"```` , ````\"dont-show-but-allow-scrolling\"```` . Defaults to ````\"auto\"```` .  \n  \n    + ````drop-down````   \n      - items :: array of [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The initial items in the dropdown.  \n      - selected_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The index of the initially selected item. Defaults to 0.  \n  \n    + ````line````   \n      - direction :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial direction of the line. Defaults to ````\"horizontal\"```` .  \n  \n    + ````list-box````   \n      - items :: array of [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The initial items in the listbox.  \n      - selected_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The index of the initially selected item. Defaults to 0.  \n  \n    + ````camera````   \n      - position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position the camera centers on.  \n      - surface_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The surface that the camera will render. Defaults to the player's current surface.  \n      - zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The initial camera zoom. Defaults to ````0.75```` .  \n  \n    + ````choose-elem-button````   \n      - elem_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The type of the button - one of the following values.  \n      - item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"item\"```` - the default value for the button.  \n      - tile :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"tile\"```` - the default value for the button.  \n      - entity :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"entity\"```` - the default value for the button.  \n      - signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional) :  If type is ````\"signal\"```` - the default value for the button.  \n      - fluid :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"fluid\"```` - the default value for the button.  \n      - recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"recipe\"```` - the default value for the button.  \n      - decorative :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"decorative\"```` - the default value for the button.  \n      - item-group :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"item-group\"```` - the default value for the button.  \n      - achievement :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"achievement\"```` - the default value for the button.  \n      - equipment :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"equipment\"```` - the default value for the button.  \n      - technology :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"technology\"```` - the default value for the button.  \n      - elem_filters :: PrototypeFilters (optional) :  Filters describing what to show in the selection window. See [LuaGuiElement::elem_filters](https://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.elem_filters) .  \n  \n    + ````text-box````   \n      - text :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial text contained in the text-box.  \n      - clear_and_focus_on_right_click :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n  \n    + ````slider````   \n      - minimum_value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The minimum value for the slider. Defaults to ````0```` .  \n      - maximum_value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The maximum value for the slider. Defaults to ````30```` .  \n      - value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The initial value for the slider. Defaults to ````minimum_value```` .  \n      - value_step :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The minimum value the slider can move. Defaults to ````1```` .  \n      - discrete_slider :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      - discrete_values :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````true```` .  \n  \n    + ````minimap````   \n      - position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  The position the minimap centers on. Defaults to the player's current position.  \n      - surface_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The surface the camera will render. Defaults to the player's current surface.  \n      - chart_player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The player index the map should use. Defaults to the current player.  \n      - force :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The force this minimap should use. Defaults to the player's current force.  \n      - zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The initial camera zoom. Defaults to ````0.75```` .  \n  \n    + ````tab````   \n      - badge_text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The text to display after the normal tab text (designed to work with numbers).  \n  \n    + ````switch````   \n      - switch_state :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Possible values are ````\"left\"```` , ````\"right\"```` , or ````\"none\"```` . If set to \"none\", ````allow_none_state```` must be ````true```` . Defaults to ````\"left\"```` .  \n      - allow_none_state :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the switch can be set to a middle state. Defaults to ````false```` .  \n      - left_label_caption :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n      - left_label_tooltip :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n      - right_label_caption :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n      - right_label_tooltip :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n  \n  \n"
}
},
"type": "function",
"doc": "Add a new child element to this GuiElement.  \n  \n**Parameters**  \nTable with the following fields:   \n  + type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The kind of element to add. Has to be one of the GUI element types listed at the top of this page.  \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Name of the child element.  \n  + caption :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The text displayed on the child element. For frames, this is their title. For other elements, like buttons or\n     labels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it.  \n  + tooltip :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  Tooltip of the child element.  \n  + enabled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the child element is enabled. Defaults to ````true```` .  \n  + ignored_by_interaction :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the child element is ignored by interaction. Defaults to ````false```` .  \n  + style :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Style of the child element.  \n  + tags :: [Tags](https://lua-api.factorio.com/latest/Concepts.html#Tags) (optional) :  The [Tags](https://lua-api.factorio.com/latest/Concepts.html#Tags) associated with the child element.  \n  + index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The location in its parent that the child element should slot into. By default, the child will be appended onto the end.  \n  + anchor :: [GuiAnchor](https://lua-api.factorio.com/latest/Concepts.html#GuiAnchor) (optional) :  Where to position the child element when in the ````relative```` element.  \n  + Other attributes may have to be specified, depending on ````type```` :   \n    - ````button````   \n      * mouse_button_filter :: [MouseButtonFlags](https://lua-api.factorio.com/latest/Concepts.html#MouseButtonFlags) (optional) :  Which mouse buttons the button responds to. Defaults to ````\"left-and-right\"```` .  \n  \n    - ````flow````   \n      * direction :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial direction of the flow's layout. See [LuaGuiElement::direction](https://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.direction) . Defaults to ````\"horizontal\"```` .  \n  \n    - ````frame````   \n      * direction :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial direction of the frame's layout. See [LuaGuiElement::direction](https://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.direction) . Defaults to ````\"horizontal\"```` .  \n  \n    - ````table````   \n      * column_count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Number of columns. This can't be changed after the table is created.  \n      * draw_vertical_lines :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the table should draw vertical grid lines. Defaults to ````false```` .  \n      * draw_horizontal_lines :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the table should draw horizontal grid lines. Defaults to ````false```` .  \n      * draw_horizontal_line_after_headers :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the table should draw a single horizontal grid line after the headers. Defaults to ````false```` .  \n      * vertical_centering :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the content of the table should be vertically centered. Defaults to ````true```` .  \n  \n    - ````textfield````   \n      * text :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial text contained in the textfield.  \n      * numeric :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      * allow_decimal :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      * allow_negative :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      * is_password :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      * lose_focus_on_confirm :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      * clear_and_focus_on_right_click :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n  \n    - ````progressbar````   \n      * value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The initial value of the progressbar, in the range [0, 1]. Defaults to ````0```` .  \n  \n    - ````checkbox````   \n      * state :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  The initial checked-state of the checkbox.  \n  \n    - ````radiobutton````   \n      * state :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  The initial checked-state of the radiobutton.  \n  \n    - ````sprite-button````   \n      * sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional) :  Path to the image to display on the button.  \n      * hovered_sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional) :  Path to the image to display on the button when it is hovered.  \n      * clicked_sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional) :  Path to the image to display on the button when it is clicked.  \n      * number :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The number shown on the button.  \n      * show_percent_for_small_numbers :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Formats small numbers as percentages. Defaults to ````false```` .  \n      * mouse_button_filter :: [MouseButtonFlags](https://lua-api.factorio.com/latest/Concepts.html#MouseButtonFlags) (optional) :  The mouse buttons that the button responds to. Defaults to ````\"left-and-right\"```` .  \n  \n    - ````sprite````   \n      * sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath) (optional) :  Path to the image to display.  \n  \n    - ````scroll-pane````   \n      * horizontal_scroll_policy :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Policy of the horizontal scroll bar. Possible values are ````\"auto\"```` , ````\"never\"```` , ````\"always\"```` , ````\"auto-and-reserve-space\"```` , ````\"dont-show-but-allow-scrolling\"```` . Defaults to ````\"auto\"```` .  \n      * vertical_scroll_policy :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Policy of the vertical scroll bar. Possible values are ````\"auto\"```` , ````\"never\"```` , ````\"always\"```` , ````\"auto-and-reserve-space\"```` , ````\"dont-show-but-allow-scrolling\"```` . Defaults to ````\"auto\"```` .  \n  \n    - ````drop-down````   \n      * items :: array of [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The initial items in the dropdown.  \n      * selected_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The index of the initially selected item. Defaults to 0.  \n  \n    - ````line````   \n      * direction :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial direction of the line. Defaults to ````\"horizontal\"```` .  \n  \n    - ````list-box````   \n      * items :: array of [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The initial items in the listbox.  \n      * selected_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The index of the initially selected item. Defaults to 0.  \n  \n    - ````camera````   \n      * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position the camera centers on.  \n      * surface_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The surface that the camera will render. Defaults to the player's current surface.  \n      * zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The initial camera zoom. Defaults to ````0.75```` .  \n  \n    - ````choose-elem-button````   \n      * elem_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The type of the button - one of the following values.  \n      * item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"item\"```` - the default value for the button.  \n      * tile :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"tile\"```` - the default value for the button.  \n      * entity :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"entity\"```` - the default value for the button.  \n      * signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional) :  If type is ````\"signal\"```` - the default value for the button.  \n      * fluid :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"fluid\"```` - the default value for the button.  \n      * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"recipe\"```` - the default value for the button.  \n      * decorative :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"decorative\"```` - the default value for the button.  \n      * item-group :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"item-group\"```` - the default value for the button.  \n      * achievement :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"achievement\"```` - the default value for the button.  \n      * equipment :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"equipment\"```` - the default value for the button.  \n      * technology :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If type is ````\"technology\"```` - the default value for the button.  \n      * elem_filters :: PrototypeFilters (optional) :  Filters describing what to show in the selection window. See [LuaGuiElement::elem_filters](https://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.elem_filters) .  \n  \n    - ````text-box````   \n      * text :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The initial text contained in the text-box.  \n      * clear_and_focus_on_right_click :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n  \n    - ````slider````   \n      * minimum_value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The minimum value for the slider. Defaults to ````0```` .  \n      * maximum_value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The maximum value for the slider. Defaults to ````30```` .  \n      * value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The initial value for the slider. Defaults to ````minimum_value```` .  \n      * value_step :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The minimum value the slider can move. Defaults to ````1```` .  \n      * discrete_slider :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````false```` .  \n      * discrete_values :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to ````true```` .  \n  \n    - ````minimap````   \n      * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  The position the minimap centers on. Defaults to the player's current position.  \n      * surface_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The surface the camera will render. Defaults to the player's current surface.  \n      * chart_player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The player index the map should use. Defaults to the current player.  \n      * force :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The force this minimap should use. Defaults to the player's current force.  \n      * zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  The initial camera zoom. Defaults to ````0.75```` .  \n  \n    - ````tab````   \n      * badge_text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The text to display after the normal tab text (designed to work with numbers).  \n  \n    - ````switch````   \n      * switch_state :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Possible values are ````\"left\"```` , ````\"right\"```` , or ````\"none\"```` . If set to \"none\", ````allow_none_state```` must be ````true```` . Defaults to ````\"left\"```` .  \n      * allow_none_state :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the switch can be set to a middle state. Defaults to ````false```` .  \n      * left_label_caption :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n      * left_label_tooltip :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n      * right_label_caption :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n      * right_label_tooltip :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n  \n  \n  \n  \n  \n**Return value**  \nThe added GUI element."
},
"clear": {
"name": "clear",
"type": "function",
"doc": "Remove children of this element. Any [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) objects referring to the destroyed\n elements become invalid after this operation.  \n"
},
"destroy": {
"name": "destroy",
"type": "function",
"doc": "Remove this element, along with its children. Any [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) objects referring to the destroyed\n elements become invalid after this operation.  \n"
},
"get_mod": {
"name": "get_mod",
"returns": "string",
"type": "function",
"doc": "The mod that owns this Gui element or ````nil```` if it's owned by the scenario script.  \n"
},
"get_index_in_parent": {
"name": "get_index_in_parent",
"returns": "uint",
"type": "function",
"doc": "Gets the index that this element has in its parent element.  \n"
},
"clear_items": {
"name": "clear_items",
"type": "function",
"doc": "Removes the items in this dropdown or listbox.  \n"
},
"get_item": {
"name": "get_item",
"returns": "LocalisedString",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to get"
}
},
"type": "function",
"doc": "Gets the item at the given index from this dropdown or listbox.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to get  \n  \n"
},
"set_item": {
"name": "set_item",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index"
},
"LocalisedString": {
"name": "LocalisedString",
"doc": "LocalisedString :  The item"
}
},
"type": "function",
"doc": "Sets the given item at the given index in this dropdown or listbox.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index  \n* LocalisedString :  The item  \n  \n"
},
"add_item": {
"name": "add_item",
"args": {
"LocalisedString": {
"name": "LocalisedString",
"doc": "LocalisedString :  The item"
},
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The index"
}
},
"type": "function",
"doc": "Adds an item at the end or at the given index in this dropdown or listbox.  \n  \n**Parameters**  \n* LocalisedString :  The item  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The index  \n  \n"
},
"remove_item": {
"name": "remove_item",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index"
}
},
"type": "function",
"doc": "Removes the item at the given index from this dropdown or listbox.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index  \n  \n"
},
"get_slider_minimum": {
"name": "get_slider_minimum",
"returns": "double",
"type": "function",
"doc": "Gets this sliders minimum value.  \n"
},
"get_slider_maximum": {
"name": "get_slider_maximum",
"returns": "double",
"type": "function",
"doc": "Gets this sliders maximum value.  \n"
},
"set_slider_minimum_maximum": {
"name": "set_slider_minimum_maximum",
"args": {
"minimum": {
"name": "minimum",
"type": "double",
"doc": "minimum :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
},
"maximum": {
"name": "maximum",
"type": "double",
"doc": "maximum :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Sets this sliders minimum and maximum values.  \n  \n**Parameters**  \n* minimum :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n* maximum :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n"
},
"get_slider_value_step": {
"name": "get_slider_value_step",
"returns": "double",
"type": "function",
"doc": "Gets the minimum distance this slider can move.  \n"
},
"get_slider_discrete_slider": {
"name": "get_slider_discrete_slider",
"returns": "boolean",
"type": "function",
"doc": "Returns whether this slider only allows being moved to discrete positions.  \n"
},
"get_slider_discrete_values": {
"name": "get_slider_discrete_values",
"returns": "boolean",
"type": "function",
"doc": "Returns whether this slider only allows discrete values.  \n"
},
"set_slider_value_step": {
"name": "set_slider_value_step",
"args": {
"value": {
"name": "value",
"type": "double",
"doc": "value :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Sets the minimum distance this slider can move.  \n  \n**Parameters**  \nvalue :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n"
},
"set_slider_discrete_slider": {
"name": "set_slider_discrete_slider",
"args": {
"value": {
"name": "value",
"type": "boolean",
"doc": "value :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Sets whether this slider only allows being moved to discrete positions.  \n  \n**Parameters**  \nvalue :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"set_slider_discrete_values": {
"name": "set_slider_discrete_values",
"args": {
"value": {
"name": "value",
"type": "boolean",
"doc": "value :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Sets whether this slider only allows discrete values.  \n  \n**Parameters**  \nvalue :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"focus": {
"name": "focus",
"type": "function",
"doc": "Focuses this GUI element if possible.  \n"
},
"scroll_to_top": {
"name": "scroll_to_top",
"type": "function",
"doc": "Scrolls this scroll bar to the top.  \n  \n_Can only be used if this is scroll-pane or  text-box_"
},
"scroll_to_bottom": {
"name": "scroll_to_bottom",
"type": "function",
"doc": "Scrolls this scroll bar to the bottom.  \n  \n_Can only be used if this is scroll-pane or  text-box_"
},
"scroll_to_left": {
"name": "scroll_to_left",
"type": "function",
"doc": "Scrolls this scroll bar to the left.  \n  \n_Can only be used if this is scroll-pane or  text-box_"
},
"scroll_to_right": {
"name": "scroll_to_right",
"type": "function",
"doc": "Scrolls this scroll bar to the right.  \n  \n_Can only be used if this is scroll-pane or  text-box_"
},
"scroll_to_element": {
"name": "scroll_to_element",
"args": {
"element": {
"name": "element",
"type": "LuaGuiElement",
"doc": "element :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) :  The element to scroll to."
},
"scroll_mode": {
"name": "scroll_mode",
"type": "string",
"doc": "scroll_mode :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Where the element should be positioned in the scroll-pane. Must be either ````\"in-view\"```` or ````\"top-third\"```` . Defaults to ````\"in-view\"```` ."
}
},
"type": "function",
"doc": "Scrolls this scroll bar such that the specified GUI element is visible to the player.  \n  \n**Parameters**  \n* element :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) :  The element to scroll to.  \n* scroll_mode :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Where the element should be positioned in the scroll-pane. Must be either ````\"in-view\"```` or ````\"top-third\"```` . Defaults to ````\"in-view\"```` .  \n  \n  \n_Can only be used if this is scroll-pane_"
},
"select_all": {
"name": "select_all",
"type": "function",
"doc": "Selects all the text in this textbox.  \n  \n_Can only be used if this is textfield or  text-box_"
},
"select": {
"name": "select",
"args": {
"start": {
"name": "start",
"type": "int",
"doc": "start :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) :  The index of the first character to select"
},
"end": {
"name": "end",
"type": "int",
"doc": "end :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) :  The index of the last character to select"
}
},
"type": "function",
"doc": "Selects a range of text in this textbox.  \n  \n**Parameters**  \n* start :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) :  The index of the first character to select  \n* end :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) :  The index of the last character to select  \n  \n  \n_Can only be used if this is textfield or  text-box_"
},
"add_tab": {
"name": "add_tab",
"args": {
"tab": {
"name": "tab",
"type": "LuaGuiElement",
"doc": "tab :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) :  The tab to add, must be a GUI element of type \"tab\"."
},
"content": {
"name": "content",
"type": "LuaGuiElement",
"doc": "content :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) :  The content to show when this tab is selected. Can be any type of GUI element."
}
},
"type": "function",
"doc": "Adds the given tab and content widgets to this tabbed pane as a new tab.  \n  \n**Parameters**  \n* tab :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) :  The tab to add, must be a GUI element of type \"tab\".  \n* content :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) :  The content to show when this tab is selected. Can be any type of GUI element.  \n  \n  \n_Can only be used if this is tabbed-pane_"
},
"remove_tab": {
"name": "remove_tab",
"args": {
"tab": {
"name": "tab",
"type": "LuaGuiElement",
"doc": "tab :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) :  The tab to remove. If not given, it removes all tabs."
}
},
"type": "function",
"doc": "Removes the given tab and its associated content from this tabbed pane.  \n  \n**Parameters**  \ntab :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) :  The tab to remove. If not given, it removes all tabs.  \n  \n  \n_Can only be used if this is tabbed-pane_"
},
"force_auto_center": {
"name": "force_auto_center",
"type": "function",
"doc": "Forces this frame to re-auto-center. Only works on frames stored directly in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) .  \n  \n_Can only be used if this is frame_"
},
"scroll_to_item": {
"name": "scroll_to_item",
"args": {
"index": {
"name": "index",
"type": "int",
"doc": "index :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) :  The item index to scroll to."
},
"scroll_mode": {
"name": "scroll_mode",
"type": "string",
"doc": "scroll_mode :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Where the item should be positioned in the scroll-pane. Must be either ````\"in-view\"```` or ````\"top-third\"```` . Defaults to ````\"in-view\"```` ."
}
},
"type": "function",
"doc": "Scrolls the scroll bar such that the specified listbox item is visible to the player.  \n  \n**Parameters**  \n* index :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) :  The item index to scroll to.  \n* scroll_mode :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Where the item should be positioned in the scroll-pane. Must be either ````\"in-view\"```` or ````\"top-third\"```` . Defaults to ````\"in-view\"```` .  \n  \n  \n_Can only be used if this is list-box_"
},
"bring_to_front": {
"name": "bring_to_front",
"type": "function",
"doc": "Moves this GUI element to the \"front\" so it will draw over other elements.  \n"
},
"index": {
"name": "index",
"type": "uint",
"mode": "[R]",
"doc": "The index of this GUI element (unique amongst the GUI elements of a LuaPlayer).  \n"
},
"gui": {
"name": "gui",
"type": "LuaGui",
"mode": "[R]",
"doc": "The GUI this element is a child of.  \n"
},
"parent": {
"name": "parent",
"type": "LuaGuiElement",
"mode": "[R]",
"doc": "The direct parent of this element; ````nil```` if this is a top-level element.  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[RW]",
"doc": "The name of this element.  \n Example ````game.player.gui.top.greeting.name\u00a0==\u00a0\"greeting\"````"
},
"caption": {
"name": "caption",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The text displayed on this element. For frames, this is the \"heading\". For other elements, like buttons or\n labels, this is the content.  \n **Note:** Whilst this attribute may be used on all elements without producing an error, it doesn't make sense\n       for tables and flows as they won't display it."
},
"value": {
"name": "value",
"type": "double",
"mode": "[RW]",
"doc": "How much this progress bar is filled. It is a value in the range [0, 1].  \n _Can only be used if this is progressbar_"
},
"direction": {
"name": "direction",
"type": "string",
"mode": "[R]",
"doc": "Direction of this element's layout. May be either ````\"horizontal\"```` or ````\"vertical\"```` .  \n _Can only be used if this is frame,  flow, or  line_"
},
"style": {
"name": "style",
"type": "LuaStyleorstring",
"mode": "[RW]",
"doc": "The style of this element. When read, this evaluates to a [LuaStyle](https://lua-api.factorio.com/latest/LuaStyle.html) . For writing, it only accepts\n a string that specifies the textual identifier (prototype name) of the desired style.  \n"
},
"visible": {
"name": "visible",
"type": "boolean",
"mode": "[RW]",
"doc": "Sets whether this GUI element is visible or completely hidden, taking no space in the layout.  \n"
},
"text": {
"name": "text",
"type": "string",
"mode": "[RW]",
"doc": "The text contained in this textfield or text-box.  \n _Can only be used if this is textfield or  text-box_"
},
"children_names": {
"name": "children_names",
"type": "array ofstring",
"mode": "[R]",
"doc": "Names of all the children of this element. These are the identifiers that can be used to access the child\n as an attribute of this element.  \n"
},
"state": {
"name": "state",
"type": "boolean",
"mode": "[RW]",
"doc": "Is this checkbox or radiobutton checked?  \n _Can only be used if this is CheckBox or  RadioButton_"
},
"player_index": {
"name": "player_index",
"type": "uint",
"mode": "[R]",
"doc": "Index into [LuaGameScript::players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) specifying the player who owns this element.  \n"
},
"sprite": {
"name": "sprite",
"type": "SpritePath",
"mode": "[RW]",
"doc": "The image to display on this sprite-button or sprite in the default state.  \n"
},
"resize_to_sprite": {
"name": "resize_to_sprite",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether the image widget should resize according to the sprite in it. Defaults to ````true```` .  \n"
},
"hovered_sprite": {
"name": "hovered_sprite",
"type": "SpritePath",
"mode": "[RW]",
"doc": "The image to display on this sprite-button when it is hovered.  \n _Can only be used if this is sprite-button_"
},
"clicked_sprite": {
"name": "clicked_sprite",
"type": "SpritePath",
"mode": "[RW]",
"doc": "The image to display on this sprite-button when it is clicked.  \n"
},
"tooltip": {
"name": "tooltip",
"type": "LocalisedString",
"mode": "[RW]"
},
"horizontal_scroll_policy": {
"name": "horizontal_scroll_policy",
"type": "string",
"mode": "[RW]",
"doc": "Policy of the horizontal scroll bar. Possible values are ````\"auto\"```` , ````\"never\"```` , ````\"always\"```` , ````\"auto-and-reserve-space\"```` , ````\"dont-show-but-allow-scrolling\"```` .  \n _Can only be used if this is scroll-pane_"
},
"vertical_scroll_policy": {
"name": "vertical_scroll_policy",
"type": "string",
"mode": "[RW]",
"doc": "Policy of the vertical scroll bar. Possible values are ````\"auto\"```` , ````\"never\"```` , ````\"always\"```` , ````\"auto-and-reserve-space\"```` , ````\"dont-show-but-allow-scrolling\"```` .  \n _Can only be used if this is scroll-pane_"
},
"type": {
"name": "type",
"type": "string",
"mode": "[R]",
"doc": "The type of this GUI element.  \n"
},
"children": {
"name": "children",
"type": "array ofLuaGuiElement",
"mode": "[R]",
"doc": "The child-elements of this GUI element.  \n"
},
"items": {
"name": "items",
"type": "array ofLocalisedString",
"mode": "[RW]",
"doc": "The items in this dropdown or listbox.  \n"
},
"selected_index": {
"name": "selected_index",
"type": "uint",
"mode": "[RW]",
"doc": "The selected index for this dropdown or listbox. Returns ````0```` if none is selected.  \n"
},
"number": {
"name": "number",
"type": "double",
"mode": "[RW]",
"doc": "The number to be shown in the bottom right corner of this sprite-button. Set this to ````nil```` to show nothing.  \n"
},
"show_percent_for_small_numbers": {
"name": "show_percent_for_small_numbers",
"type": "boolean",
"mode": "[RW]",
"doc": "Related to the number to be shown in the bottom right corner of this sprite-button.\n When set to ````true```` , numbers that are non-zero and smaller than one are shown as a percentage rather than the value.\n For example, ````0.5```` will be shown as ````50%```` instead.  \n"
},
"location": {
"name": "location",
"type": "GuiLocation",
"mode": "[RW]",
"doc": "The location of this widget when stored in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) or ````nil```` if not not set or not in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) .  \n"
},
"auto_center": {
"name": "auto_center",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this frame auto-centers on window resize when stored in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) .  \n _Can only be used if this is frame_"
},
"badge_text": {
"name": "badge_text",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The text to display after the normal tab text (designed to work with numbers)  \n _Can only be used if this is tab_"
},
"position": {
"name": "position",
"type": "Position",
"mode": "[RW]",
"doc": "The position this camera or minimap is focused on, if any.  \n"
},
"surface_index": {
"name": "surface_index",
"type": "uint",
"mode": "[RW]",
"doc": "The surface index this camera or minimap is using.  \n"
},
"zoom": {
"name": "zoom",
"type": "double",
"mode": "[RW]",
"doc": "The zoom this camera or minimap is using.  \n"
},
"minimap_player_index": {
"name": "minimap_player_index",
"type": "uint",
"mode": "[RW]",
"doc": "The player index this minimap is using.  \n _Can only be used if this is minimap_"
},
"force": {
"name": "force",
"type": "string",
"mode": "[RW]",
"doc": "The force this minimap is using or ````nil```` if no force is set.  \n"
},
"elem_type": {
"name": "elem_type",
"type": "string",
"mode": "[R]",
"doc": "The elem type of this choose-elem-button.  \n _Can only be used if this is choose-elem-button_"
},
"elem_value": {
"name": "elem_value",
"type": "stringorSignalID",
"mode": "[RW]",
"doc": "The elem value of this choose-elem-button or ````nil```` if there is no value.  \n **Note:** The ````\"signal\"```` type operates with [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) , while all other types use strings. _Can only be used if this is choose-elem-button_"
},
"elem_filters": {
"name": "elem_filters",
"type": "PrototypeFilters",
"mode": "[RW]",
"doc": "The elem filters of this choose-elem-button or ````nil```` if there are no filters.  \n Valid filters are determined by elem_type:   \n  * Type ````\"item\"```` - [ItemPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#ItemPrototypeFilters)  \n  * Type ````\"tile\"```` - [TilePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#TilePrototypeFilters)  \n  * Type ````\"entity\"```` - [EntityPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeFilters)  \n  * Type ````\"signal\"```` - Does not support filters  \n  * Type ````\"fluid\"```` - [FluidPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#FluidPrototypeFilters)  \n  * Type ````\"recipe\"```` - [RecipePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#RecipePrototypeFilters)  \n  * Type ````\"decorative\"```` - [DecorativePrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#DecorativePrototypeFilters)  \n  * Type ````\"item-group\"```` - Does not support filters  \n  * Type ````\"achievement\"```` - [AchievementPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#AchievementPrototypeFilters)  \n  * Type ````\"equipment\"```` - [EquipmentPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#EquipmentPrototypeFilters)  \n  * Type ````\"technology\"```` - [TechnologyPrototypeFilters](https://lua-api.factorio.com/latest/Concepts.html#TechnologyPrototypeFilters)  \n **Note:** Writing to this field does not change or clear the currently selected element. Example This will add a button that only shows fuel items. ````local\u00a0button\u00a0=\u00a0game.player.gui.top.add{ type=\"choose-elem-button\", name=\"machine\", elem_type=\"item\", elem_filters={{filter=\"fuel-value\",\u00a0comparison=\">\",\u00a0value=\"0\"}}, }```` Example This will change the button to only show modules. ````button.elem_filters\u00a0=\u00a0{{filter\u00a0=\u00a0\"type\",\u00a0type\u00a0=\u00a0\"module\"}}```` _Can only be used if this is choose-elem-button_"
},
"selectable": {
"name": "selectable",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether the contents of this text-box are selectable. Defaults to ````true```` .  \n _Can only be used if this is text-box_"
},
"word_wrap": {
"name": "word_wrap",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this text-box will word-wrap automatically. Defaults to ````false```` .  \n _Can only be used if this is text-box_"
},
"read_only": {
"name": "read_only",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this text-box is read-only. Defaults to ````false```` .  \n _Can only be used if this is text-box_"
},
"enabled": {
"name": "enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this GUI element is enabled. Disabled GUI elements don't trigger events when clicked.  \n"
},
"ignored_by_interaction": {
"name": "ignored_by_interaction",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this GUI element is ignored by interaction.\n This makes clicks on this element 'go through' to the GUI element or even the game surface below it.  \n"
},
"locked": {
"name": "locked",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this choose-elem-button can be changed by the player.  \n _Can only be used if this is choose-elem-button_"
},
"draw_vertical_lines": {
"name": "draw_vertical_lines",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this table should draw vertical grid lines.  \n _Can only be used if this is table_"
},
"draw_horizontal_lines": {
"name": "draw_horizontal_lines",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this table should draw horizontal grid lines.  \n _Can only be used if this is table_"
},
"draw_horizontal_line_after_headers": {
"name": "draw_horizontal_line_after_headers",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this table should draw a horizontal grid line below the first table row.  \n _Can only be used if this is table_"
},
"column_count": {
"name": "column_count",
"type": "uint",
"mode": "[R]",
"doc": "The number of columns in this table.  \n _Can only be used if this is table_"
},
"vertical_centering": {
"name": "vertical_centering",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether the content of this table should be vertically centered. Overrides [LuaStyle::column_alignments](https://lua-api.factorio.com/latest/LuaStyle.html#LuaStyle.column_alignments) . Defaults to ````true```` .  \n _Can only be used if this is table_"
},
"slider_value": {
"name": "slider_value",
"type": "double",
"mode": "[RW]",
"doc": "The value of this slider element.  \n _Can only be used if this is slider_"
},
"mouse_button_filter": {
"name": "mouse_button_filter",
"type": "MouseButtonFlags",
"mode": "[RW]",
"doc": "The mouse button filters for this button or sprite-button.  \n"
},
"numeric": {
"name": "numeric",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this textfield is limited to only numberic characters.  \n _Can only be used if this is textfield_"
},
"allow_decimal": {
"name": "allow_decimal",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this textfield (when in numeric mode) allows decimal numbers.  \n _Can only be used if this is textfield_"
},
"allow_negative": {
"name": "allow_negative",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this textfield (when in numeric mode) allows negative numbers.  \n _Can only be used if this is textfield_"
},
"is_password": {
"name": "is_password",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this textfield displays as a password field, which renders all characters as ````*```` .  \n _Can only be used if this is textfield_"
},
"lose_focus_on_confirm": {
"name": "lose_focus_on_confirm",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether this textfield loses focus after [defines.events.on_gui_confirmed](https://lua-api.factorio.com/latest/defines.html#defines.events.on_gui_confirmed) is fired.  \n _Can only be used if this is textfield_"
},
"clear_and_focus_on_right_click": {
"name": "clear_and_focus_on_right_click",
"type": "boolean",
"mode": "[RW]",
"doc": "Makes it so right-clicking on this textfield clears and focuses it.  \n _Can only be used if this is textfield or  text-box_"
},
"drag_target": {
"name": "drag_target",
"type": "LuaGuiElement",
"mode": "[RW]",
"doc": "The frame drag target for this flow, frame, label, table, or empty-widget.  \n **Note:** drag_target can only be set to a frame stored directly in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) or ````nil```` . **Note:** drag_target can only be set on child elements in [LuaGui::screen](https://lua-api.factorio.com/latest/LuaGui.html#LuaGui.screen) . **Note:** drag_target can only be set to a higher level parent element (this element must be owned at some nested level by the drag_target)."
},
"selected_tab_index": {
"name": "selected_tab_index",
"type": "uint",
"mode": "[RW]",
"doc": "The selected tab index for this tabbed pane or ````nil```` if no tab is selected.  \n _Can only be used if this is tabbed-pane_"
},
"tabs": {
"name": "tabs",
"type": "array ofTabAndContent",
"mode": "[R]",
"doc": "The tabs and contents being shown in this tabbed-pane.  \n Each TabAndContent is a table:  \n   \n  * tab :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html)  \n  * content :: [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html)  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The entity associated with this entity-preview or ````nil```` if no entity is associated.  \n _Can only be used if this is entity-preview_"
},
"anchor": {
"name": "anchor",
"type": "GuiAnchor",
"mode": "[RW]",
"doc": "Sets the anchor for this relative widget. Setting ````nil```` clears the anchor.  \n"
},
"tags": {
"name": "tags",
"type": "Tags",
"mode": "[RW]",
"doc": "The tags associated with this LuaGuiElement.  \n"
},
"switch_state": {
"name": "switch_state",
"type": "string",
"mode": "[RW]",
"doc": "The switch state (left, none, right) for this switch.  \n **Note:** If [LuaGuiElement::allow_none_state](https://lua-api.factorio.com/latest/LuaGuiElement.html#LuaGuiElement.allow_none_state) is false this can't be set to ````\"none\"```` . _Can only be used if this is switch_"
},
"allow_none_state": {
"name": "allow_none_state",
"type": "boolean",
"mode": "[RW]",
"doc": "Whether the ````\"none\"```` state is allowed for this switch.  \n **Note:** This can't be set to false if the current switch_state is 'none'. _Can only be used if this is switch_"
},
"left_label_caption": {
"name": "left_label_caption",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The text shown for the left switch label.  \n _Can only be used if this is switch_"
},
"left_label_tooltip": {
"name": "left_label_tooltip",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The tooltip shown on the left switch label.  \n _Can only be used if this is switch_"
},
"right_label_caption": {
"name": "right_label_caption",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The text shown for the right switch label.  \n _Can only be used if this is switch_"
},
"right_label_tooltip": {
"name": "right_label_tooltip",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The tooltip shown on the right switch label.  \n _Can only be used if this is switch_"
},
"operator []": {
"name": "operator []",
"type": "LuaGuiElement",
"mode": "[R]",
"doc": "The indexing operator. Gets children by name.  \n"
}
},
"inherits": []
},
"LuaHeatEnergySourcePrototype": {
"name": "LuaHeatEnergySourcePrototype",
"type": "LuaHeatEnergySourcePrototype",
"doc": "Prototype of a heat energy source.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"emissions": {
"name": "emissions",
"type": "double",
"mode": "[R]"
},
"render_no_network_icon": {
"name": "render_no_network_icon",
"type": "boolean",
"mode": "[R]"
},
"render_no_power_icon": {
"name": "render_no_power_icon",
"type": "boolean",
"mode": "[R]"
},
"max_temperature": {
"name": "max_temperature",
"type": "double",
"mode": "[R]"
},
"default_temperature": {
"name": "default_temperature",
"type": "double",
"mode": "[R]"
},
"specific_heat": {
"name": "specific_heat",
"type": "double",
"mode": "[R]"
},
"max_transfer": {
"name": "max_transfer",
"type": "double",
"mode": "[R]"
},
"min_temperature_gradient": {
"name": "min_temperature_gradient",
"type": "double",
"mode": "[R]"
},
"min_working_temperature": {
"name": "min_working_temperature",
"type": "double",
"mode": "[R]"
},
"minimum_glow_temperature": {
"name": "minimum_glow_temperature",
"type": "double",
"mode": "[R]"
},
"connections": {
"name": "connections",
"type": "array ofConnection",
"mode": "[R]"
}
},
"inherits": []
},
"LuaInserterControlBehavior": {
"name": "LuaInserterControlBehavior",
"type": "LuaInserterControlBehavior",
"doc": "Control behavior for inserters.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"circuit_read_hand_contents": {
"name": "circuit_read_hand_contents",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the contents of the inserter hand should be sent to the circuit network  \n"
},
"circuit_mode_of_operation": {
"name": "circuit_mode_of_operation",
"type": "defines.control_behavior.inserter.circuit_mode_of_operation",
"mode": "[RW]",
"doc": "The circuit mode of operations for the inserter.  \n"
},
"circuit_hand_read_mode": {
"name": "circuit_hand_read_mode",
"type": "defines.control_behavior.inserter.hand_read_mode",
"mode": "[RW]",
"doc": "The hand read mode for the inserter.  \n"
},
"circuit_set_stack_size": {
"name": "circuit_set_stack_size",
"type": "boolean",
"mode": "[RW]",
"doc": "If the stack size of the inserter is set through the circuit network or not.  \n"
},
"circuit_stack_control_signal": {
"name": "circuit_stack_control_signal",
"type": "SignalID",
"mode": "[RW]",
"doc": "The signal used to set the stack size of the inserter.  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
},
"disabled": {
"name": "disabled",
"type": "boolean",
"mode": "[R]",
"doc": "If the entity is currently disabled because of the control behavior.  \n"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The circuit condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the circuit condition. Example Tell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 chain\n   signals. ````a_behavior.circuit_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"logistic_condition": {
"name": "logistic_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The logistic condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the logistic condition. Example Tell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more than\n   4 chain signals. ````a_behavior.logistic_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"connect_to_logistic_network": {
"name": "connect_to_logistic_network",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if this should connect to the logistic network.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity",
"Inherited from LuaGenericOnOffControlBehavior : disabled , circuit_condition , logistic_condition , connect_to_logistic_network"
]
},
"LuaInventory": {
"name": "LuaInventory",
"type": "LuaInventory",
"doc": "A storage of item stacks.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"clear": {
"name": "clear",
"type": "function",
"doc": "Make this inventory empty.  \n"
},
"can_insert": {
"name": "can_insert",
"returns": "boolean",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items that would be inserted."
}
},
"type": "function",
"doc": "Can at least some items be inserted?  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items that would be inserted.  \n  \n  \n**Return value**  \n````true```` if at least a part of the given items could be inserted into this inventory."
},
"insert": {
"name": "insert",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert."
}
},
"type": "function",
"doc": "Insert items into this inventory.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert.  \n  \n  \n**Return value**  \nNumber of items actually inserted."
},
"remove": {
"name": "remove",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove."
}
},
"type": "function",
"doc": "Remove items from this inventory.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove.  \n  \n  \n**Return value**  \nNumber of items actually removed."
},
"get_item_count": {
"name": "get_item_count",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items."
}
},
"type": "function",
"doc": "Get the number of all or some items in this inventory.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items.  \n  \n"
},
"is_empty": {
"name": "is_empty",
"returns": "boolean",
"type": "function",
"doc": "Does this inventory contain nothing?  \n"
},
"get_contents": {
"name": "get_contents",
"returns": "dictionarystring\u2192uint",
"type": "function",
"doc": "Get counts of all items in this inventory.  \n  \n**Return value**  \nThe counts, indexed by item names."
},
"supports_bar": {
"name": "supports_bar",
"returns": "boolean",
"type": "function",
"doc": "Does this inventory support a bar? Bar is the draggable red thing, found for example on chests,\n that limits the portion of the inventory that may be manipulated by machines.  \n"
},
"get_bar": {
"name": "get_bar",
"returns": "uint",
"type": "function",
"doc": "Get the current bar. This is the index at which the red area starts.  \n"
},
"set_bar": {
"name": "set_bar",
"args": {
"bar": {
"name": "bar",
"type": "uint",
"doc": "bar :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The new limit. Omitting this parameter will clear the limit."
}
},
"type": "function",
"doc": "Set the current bar.  \n  \n**Parameters**  \nbar :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The new limit. Omitting this parameter will clear the limit.  \n  \n"
},
"supports_filters": {
"name": "supports_filters",
"returns": "boolean",
"type": "function",
"doc": "If this inventory supports filters.  \n"
},
"is_filtered": {
"name": "is_filtered",
"returns": "boolean",
"type": "function",
"doc": "If this inventory supports filters and has at least 1 filter set.  \n"
},
"can_set_filter": {
"name": "can_set_filter",
"returns": "boolean",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The item stack index"
},
"filter": {
"name": "filter",
"type": "string",
"doc": "filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item name of the filter"
}
},
"type": "function",
"doc": "If the given inventory slot filter can be set to the given filter.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The item stack index  \n* filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item name of the filter  \n  \n"
},
"get_filter": {
"name": "get_filter",
"returns": "string",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The item stack index"
}
},
"type": "function",
"doc": "Gets the filter for the given item stack index.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The item stack index  \n  \n  \n**Return value**  \nThe current filter or nil if none."
},
"set_filter": {
"name": "set_filter",
"returns": "boolean",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The item stack index"
},
"filter": {
"name": "filter",
"type": "string",
"doc": "filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The new filter or nil to erase the filter"
}
},
"type": "function",
"doc": "Sets the filter for the given item stack index.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The item stack index  \n* filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The new filter or nil to erase the filter  \n  \n  \n**Return value**  \nIf the filter was allowed to be set."
},
"find_item_stack": {
"name": "find_item_stack",
"returns": "LuaItemStack",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item name to find"
}
},
"type": "function",
"doc": "Gets the first LuaItemStack in the inventory that matches the given item name.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item name to find  \n  \n  \n**Return value**  \nor ````nil```` ."
},
"find_empty_stack": {
"name": "find_empty_stack",
"returns": "LuaItemStack",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If given, empty stacks that are filtered for this item will be included."
}
},
"type": "function",
"doc": "Finds the first empty stack. Filtered slots are excluded unless a filter item is given.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If given, empty stacks that are filtered for this item will be included.  \n  \n  \n**Return value**  \nor ````nil```` ."
},
"count_empty_stacks": {
"name": "count_empty_stacks",
"returns": "uint",
"args": {
"include_filtered": {
"name": "include_filtered",
"type": "boolean",
"doc": "include_filtered :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, filtered slots will be included. Defaults to false."
}
},
"type": "function",
"doc": "Counts the number of empty stacks.  \n  \n**Parameters**  \ninclude_filtered :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, filtered slots will be included. Defaults to false.  \n  \n"
},
"get_insertable_count": {
"name": "get_insertable_count",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item to check."
}
},
"type": "function",
"doc": "Gets the number of the given item that can be inserted into this inventory.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The item to check.  \n  \n"
},
"sort_and_merge": {
"name": "sort_and_merge",
"type": "function",
"doc": "Sorts and merges the items in this inventory.  \n"
},
"resize": {
"name": "resize",
"args": {
"size": {
"name": "size",
"type": "uint16",
"doc": "size :: [uint16](https://lua-api.factorio.com/latest/Builtin-Types.html#uint16) :  New size of a inventory"
}
},
"type": "function",
"doc": "Resizes the inventory.  \n  \n**Parameters**  \nsize :: [uint16](https://lua-api.factorio.com/latest/Builtin-Types.html#uint16) :  New size of a inventory  \n  \n"
},
"destroy": {
"name": "destroy",
"type": "function",
"doc": "Destroys this inventory.  \n"
},
"operator #": {
"name": "operator #",
"type": "uint",
"mode": "[R]",
"doc": "Get the number of slots in this inventory.  \n Example Will print the number of slots in the player's main inventory. ````game.player.print(#game.player.get_main_inventory())````"
},
"index": {
"name": "index",
"type": "defines.inventory",
"mode": "[R]",
"doc": "The inventory index this inventory uses, or ````nil```` if the inventory doesn't have an index.  \n"
},
"entity_owner": {
"name": "entity_owner",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity that owns this inventory or ````nil```` if this isn't owned by an entity.  \n"
},
"player_owner": {
"name": "player_owner",
"type": "LuaPlayer",
"mode": "[R]",
"doc": "The player that owns this inventory or ````nil```` if this isn't owned by a player.  \n"
},
"equipment_owner": {
"name": "equipment_owner",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The equipment that owns this inventory or ````nil```` if this isn't owned by an equipment.  \n"
},
"mod_owner": {
"name": "mod_owner",
"type": "string",
"mode": "[R]",
"doc": "The mod that owns this inventory or ````nil```` if this isn't owned by a mod.  \n"
},
"operator []": {
"name": "operator []",
"type": "LuaItemStack",
"mode": "[R]",
"doc": "The indexing operator.  \n Example Will get the first item in the player's inventory. ````game.player.get_main_inventory()[1]````"
}
},
"inherits": []
},
"LuaItemPrototype": {
"name": "LuaItemPrototype",
"type": "LuaItemPrototype",
"doc": "Prototype of an item.  \n Example ````game.item_prototypes[\"iron-plate\"]````",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"has_flag": {
"name": "has_flag",
"returns": "boolean",
"args": {
"flag": {
"name": "flag",
"type": "string",
"doc": "flag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The flag to check. Can be one of [ItemPrototypeFlags](https://lua-api.factorio.com/latest/Concepts.html#ItemPrototypeFlags)"
}
},
"type": "function",
"doc": "Does this prototype have a flag enabled?  \n Any other value will cause an error.  \n  \n**Parameters**  \nflag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The flag to check. Can be one of [ItemPrototypeFlags](https://lua-api.factorio.com/latest/Concepts.html#ItemPrototypeFlags)  \n  \n"
},
"get_ammo_type": {
"name": "get_ammo_type",
"returns": "AmmoType",
"args": {
"ammo_source_type": {
"name": "ammo_source_type",
"type": "string",
"doc": "ammo_source_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  \"default\", \"player\", \"turret\", or \"vehicle\""
}
},
"type": "function",
"doc": "Type of this ammo prototype or ````nil```` if this is not an ammo prototype.  \n  \n**Parameters**  \nammo_source_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  \"default\", \"player\", \"turret\", or \"vehicle\"  \n  \n"
},
"type": {
"name": "type",
"type": "string",
"mode": "[R]",
"doc": "Type of this prototype. E.g. ````\"gun\"```` or ````\"mining-tool\"```` .  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string.  \n"
},
"place_result": {
"name": "place_result",
"type": "LuaEntityPrototype",
"mode": "[R]",
"doc": "Prototype of the entity that will be created by placing this item, or ````nil```` if there is no such\n entity.  \n"
},
"place_as_equipment_result": {
"name": "place_as_equipment_result",
"type": "LuaEquipmentPrototype",
"mode": "[R]",
"doc": "Prototype of the equipment that will be created by placing this item in an equipment grid or ````nil```` if there is no equipment defined.  \n"
},
"place_as_tile_result": {
"name": "place_as_tile_result",
"type": "PlaceAsTileResult",
"mode": "[R]",
"doc": "The place as tile result if one is defined else ````nil```` .  \n"
},
"stackable": {
"name": "stackable",
"type": "boolean",
"mode": "[R]",
"doc": "Is this item allowed to stack at all?  \n"
},
"default_request_amount": {
"name": "default_request_amount",
"type": "uint",
"mode": "[R]",
"doc": "The default request value.  \n"
},
"stack_size": {
"name": "stack_size",
"type": "uint",
"mode": "[R]",
"doc": "Maximum stack size of the item specified by this prototype.  \n"
},
"wire_count": {
"name": "wire_count",
"type": "uint",
"mode": "[R]",
"doc": "The number of items needed to connect 2 entities with this as wire.  \n"
},
"fuel_category": {
"name": "fuel_category",
"type": "string",
"mode": "[R]",
"doc": "The fuel category or ````nil```` .  \n"
},
"burnt_result": {
"name": "burnt_result",
"type": "LuaItemPrototype",
"mode": "[R]",
"doc": "The result of burning this item as fuel or ````nil```` .  \n"
},
"fuel_value": {
"name": "fuel_value",
"type": "float",
"mode": "[R]",
"doc": "Fuel value when burned.  \n"
},
"fuel_acceleration_multiplier": {
"name": "fuel_acceleration_multiplier",
"type": "double",
"mode": "[R]",
"doc": "The acceleration multiplier when this item is used as fuel in a vehicle.  \n"
},
"fuel_top_speed_multiplier": {
"name": "fuel_top_speed_multiplier",
"type": "double",
"mode": "[R]",
"doc": "The fuel top speed multiplier when this item is used as fuel in a vehicle.  \n"
},
"fuel_emissions_multiplier": {
"name": "fuel_emissions_multiplier",
"type": "double",
"mode": "[R]",
"doc": "The emissions multiplier if this is used as fuel.  \n"
},
"subgroup": {
"name": "subgroup",
"type": "LuaGroup",
"mode": "[R]",
"doc": "The subgroup this prototype belongs to.  \n"
},
"group": {
"name": "group",
"type": "LuaGroup",
"mode": "[R]",
"doc": "The group this prototype belongs to.  \n"
},
"flags": {
"name": "flags",
"type": "ItemPrototypeFlags",
"mode": "[R]",
"doc": "The item prototype flags for this item prototype.  \n"
},
"rocket_launch_products": {
"name": "rocket_launch_products",
"type": "array ofProduct",
"mode": "[R]",
"doc": "The results from launching this item in a rocket.  \n"
},
"can_be_mod_opened": {
"name": "can_be_mod_opened",
"type": "boolean",
"mode": "[R]",
"doc": "If this item can be mod-opened.  \n"
},
"magazine_size": {
"name": "magazine_size",
"type": "float",
"mode": "[R]",
"doc": "Size of full magazine; ````nil```` if this is not an ammo item.  \n"
},
"reload_time": {
"name": "reload_time",
"type": "float",
"mode": "[R]",
"doc": "Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine or ````nil```` if this is not an ammo item.  \n"
},
"equipment_grid": {
"name": "equipment_grid",
"type": "LuaEquipmentGridPrototype",
"mode": "[R]",
"doc": "The prototype of this armor equipment grid or ````nil```` if none or this is not an armor item.  \n"
},
"resistances": {
"name": "resistances",
"type": "Resistances",
"mode": "[R]",
"doc": "Resistances of this armour item; ````nil```` if not an armor or the armor has no resistances.  \n"
},
"inventory_size_bonus": {
"name": "inventory_size_bonus",
"type": "uint",
"mode": "[R]",
"doc": "The inventory size bonus for this armor prototype. ````nil```` if this isn't an armor prototype.  \n _Can only be used if this is ArmorPrototype_"
},
"capsule_action": {
"name": "capsule_action",
"type": "CapsuleAction",
"mode": "[R]",
"doc": "The capsule action for this capsule item prototype or ````nil```` if this isn't a capsule item prototype.  \n"
},
"attack_parameters": {
"name": "attack_parameters",
"type": "AttackParameters",
"mode": "[R]",
"doc": "The gun attack parameters or ````nil```` if not a gun item prototype.  \n"
},
"inventory_size": {
"name": "inventory_size",
"type": "uint",
"mode": "[R]",
"doc": "The main inventory size for item-with-inventory-prototype. ````nil```` if not an item-with-inventory-prototype.  \n _Can only be used if this is ItemWithInventoryPrototype_"
},
"item_filters": {
"name": "item_filters",
"type": "dictionarystring\u2192LuaItemPrototype",
"mode": "[R]",
"doc": "_Can only be used if this is ItemWithInventory_"
},
"item_group_filters": {
"name": "item_group_filters",
"type": "dictionarystring\u2192LuaGroup",
"mode": "[R]",
"doc": "_Can only be used if this is ItemWithInventory_"
},
"item_subgroup_filters": {
"name": "item_subgroup_filters",
"type": "dictionarystring\u2192LuaGroup",
"mode": "[R]",
"doc": "_Can only be used if this is ItemWithInventory_"
},
"filter_mode": {
"name": "filter_mode",
"type": "string",
"mode": "[R]",
"doc": "The filter mode used by this item with inventory.  \n _Can only be used if this is ItemWithInventory_"
},
"insertion_priority_mode": {
"name": "insertion_priority_mode",
"type": "string",
"mode": "[R]",
"doc": "The insertion priority mode used by this item with inventory.  \n _Can only be used if this is ItemWithInventory_"
},
"localised_filter_message": {
"name": "localised_filter_message",
"type": "LocalisedString",
"mode": "[R]",
"doc": "The localised string used when the player attempts to put items into this item with inventory that aren't allowed.  \n _Can only be used if this is ItemWithInventory_"
},
"extend_inventory_by_default": {
"name": "extend_inventory_by_default",
"type": "boolean",
"mode": "[R]",
"doc": "If this item with inventory extends the inventory it resides in by default.  \n _Can only be used if this is ItemWithInventory_"
},
"default_label_color": {
"name": "default_label_color",
"type": "Color",
"mode": "[R]",
"doc": "The default label color used for this item with label. ````nil```` if not defined or if this isn't an item with label.  \n _Can only be used if this is ItemWithLabel_"
},
"draw_label_for_cursor_render": {
"name": "draw_label_for_cursor_render",
"type": "boolean",
"mode": "[R]",
"doc": "If true, and this item with label has a label it is drawn in place of the normal number when held in the cursor.  \n _Can only be used if this is ItemWithLabel_"
},
"speed": {
"name": "speed",
"type": "float",
"mode": "[R]",
"doc": "The repairing speed if this is a repairing tool; otherwise ````nil```` .  \n"
},
"module_effects": {
"name": "module_effects",
"type": "Effects",
"mode": "[R]",
"doc": "Effects of this module; ````nil```` if this is not a module. It is a dictionary indexed by the effect type.  \n _Can only be used if this is ModuleItem_"
},
"category": {
"name": "category",
"type": "string",
"mode": "[R]",
"doc": "The name of a [LuaModuleCategoryPrototype](https://lua-api.factorio.com/latest/LuaModuleCategoryPrototype.html) . Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules of the same category with higher tier modules.  \n _Can only be used if this is ModuleItem_"
},
"tier": {
"name": "tier",
"type": "uint",
"mode": "[R]",
"doc": "Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules with higher tier modules if they have the same category.  \n _Can only be used if this is ModuleItem_"
},
"limitations": {
"name": "limitations",
"type": "array ofstring",
"mode": "[R]",
"doc": "An array of recipe names this module is allowed to work with.\n Empty when all recipes are allowed.  \n _Can only be used if this is ModuleItem_"
},
"limitation_message_key": {
"name": "limitation_message_key",
"type": "string",
"mode": "[R]",
"doc": "The limitation message key used when the player attempts to use this modules in some place it's not allowed.  \n _Can only be used if this is ModuleItem_"
},
"straight_rail": {
"name": "straight_rail",
"type": "LuaEntityPrototype",
"mode": "[R]",
"doc": "The straight rail prototype used for this rail planner prototype.  \n _Can only be used if this is RailPlanner_"
},
"curved_rail": {
"name": "curved_rail",
"type": "LuaEntityPrototype",
"mode": "[R]",
"doc": "The curved rail prototype used for this rail planner prototype.  \n _Can only be used if this is RailPlanner_"
},
"repair_result": {
"name": "repair_result",
"type": "Trigger",
"mode": "[R]",
"doc": "The repair result of this repair tool prototype or ````nil```` if this isn't a repair tool prototype.  \n _Can only be used if this is RepairTool_"
},
"selection_border_color": {
"name": "selection_border_color",
"type": "Color",
"mode": "[R]",
"doc": "The color used when doing normal selection with this selection tool prototype.  \n _Can only be used if this is SelectionTool_"
},
"alt_selection_border_color": {
"name": "alt_selection_border_color",
"type": "Color",
"mode": "[R]",
"doc": "The color used when doing alt selection with this selection tool prototype.  \n _Can only be used if this is SelectionTool_"
},
"selection_mode_flags": {
"name": "selection_mode_flags",
"type": "SelectionModeFlags",
"mode": "[R]",
"doc": "Flags that affect which entities will be selected.  \n _Can only be used if this is SelectionTool_"
},
"alt_selection_mode_flags": {
"name": "alt_selection_mode_flags",
"type": "SelectionModeFlags",
"mode": "[R]",
"doc": "Flags that affect which entities will be selected during alternate selection.  \n _Can only be used if this is SelectionTool_"
},
"selection_cursor_box_type": {
"name": "selection_cursor_box_type",
"type": "string",
"mode": "[R]",
"doc": "_Can only be used if this is SelectionTool_"
},
"alt_selection_cursor_box_type": {
"name": "alt_selection_cursor_box_type",
"type": "string",
"mode": "[R]",
"doc": "_Can only be used if this is SelectionTool_"
},
"always_include_tiles": {
"name": "always_include_tiles",
"type": "boolean",
"mode": "[R]",
"doc": "If tiles area always included when doing selection with this selection tool prototype.  \n _Can only be used if this is SelectionTool_"
},
"entity_filter_mode": {
"name": "entity_filter_mode",
"type": "string",
"mode": "[R]",
"doc": "The entity filter mode used by this selection tool.  \n _Can only be used if this is SelectionTool_"
},
"alt_entity_filter_mode": {
"name": "alt_entity_filter_mode",
"type": "string",
"mode": "[R]",
"doc": "The alt entity filter mode used by this selection tool.  \n _Can only be used if this is SelectionTool_"
},
"tile_filter_mode": {
"name": "tile_filter_mode",
"type": "string",
"mode": "[R]",
"doc": "The tile filter mode used by this selection tool.  \n _Can only be used if this is SelectionTool_"
},
"alt_tile_filter_mode": {
"name": "alt_tile_filter_mode",
"type": "string",
"mode": "[R]",
"doc": "The alt tile filter mode used by this selection tool.  \n _Can only be used if this is SelectionTool_"
},
"entity_filters": {
"name": "entity_filters",
"type": "dictionarystring\u2192LuaEntityPrototype",
"mode": "[R]",
"doc": "The entity filters used by this selection tool indexed by entity name.  \n _Can only be used if this is SelectionTool_"
},
"alt_entity_filters": {
"name": "alt_entity_filters",
"type": "dictionarystring\u2192LuaEntityPrototype",
"mode": "[R]",
"doc": "The alt entity filters used by this selection tool indexed by entity name.  \n _Can only be used if this is SelectionTool_"
},
"entity_type_filters": {
"name": "entity_type_filters",
"type": "dictionarystring\u2192boolean",
"mode": "[R]",
"doc": "The entity type filters used by this selection tool indexed by entity type.  \n **Note:** The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary. _Can only be used if this is SelectionTool_"
},
"alt_entity_type_filters": {
"name": "alt_entity_type_filters",
"type": "dictionarystring\u2192boolean",
"mode": "[R]",
"doc": "The alt entity type filters used by this selection tool indexed by entity type.  \n **Note:** The boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary. _Can only be used if this is SelectionTool_"
},
"tile_filters": {
"name": "tile_filters",
"type": "dictionarystring\u2192LuaTilePrototype",
"mode": "[R]",
"doc": "The tile filters used by this selection tool indexed by tile name.  \n _Can only be used if this is SelectionTool_"
},
"alt_tile_filters": {
"name": "alt_tile_filters",
"type": "dictionarystring\u2192LuaTilePrototype",
"mode": "[R]",
"doc": "The alt tile filters used by this selection tool indexed by tile name.  \n _Can only be used if this is SelectionTool_"
},
"entity_filter_slots": {
"name": "entity_filter_slots",
"type": "uint",
"mode": "[R]",
"doc": "The number of entity filters this deconstruction item has or ````nil```` if this isn't a deconstruction item prototype.  \n _Can only be used if this is DeconstructionItem_"
},
"tile_filter_slots": {
"name": "tile_filter_slots",
"type": "uint",
"mode": "[R]",
"doc": "The number of tile filters this deconstruction item has or ````nil```` if this isn't a deconstruction item prototype.  \n _Can only be used if this is DeconstructionItem_"
},
"durability_description_key": {
"name": "durability_description_key",
"type": "string",
"mode": "[R]",
"doc": "The durability message key used when displaying the durability of this tool.  \n _Can only be used if this is ToolItem_"
},
"durability": {
"name": "durability",
"type": "double",
"mode": "[R]",
"doc": "The durability of this tool item or ````nil```` if not a tool item.  \n _Can only be used if this is ToolItem_"
},
"infinite": {
"name": "infinite",
"type": "boolean",
"mode": "[R]",
"doc": "If this tool item has infinite durability. ````nil```` if not a tool type item.  \n _Can only be used if this is ToolItem_"
},
"mapper_count": {
"name": "mapper_count",
"type": "uint",
"mode": "[R]",
"doc": "How many filters an upgrade item has. ````nil```` if not a upgrade item.  \n _Can only be used if this is UpgradeItem_"
}
},
"inherits": []
},
"LuaItemStack": {
"name": "LuaItemStack",
"type": "LuaItemStack",
"doc": "A reference to an item and count owned by some external entity.  \n **Note:** In most instances this is a simple reference as in: it points at a specific slot in an inventory and not the item in the slot. **Note:** In the instance this references an item on a [LuaTransportLine](https://lua-api.factorio.com/latest/LuaTransportLine.html) the reference is only guaranteed to stay valid (and refer to the same item) as long as nothing changes the transport line.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"is_blueprint_setup": {
"name": "is_blueprint_setup",
"returns": "boolean",
"type": "function",
"doc": "Is this blueprint item setup? I.e. is it a non-empty blueprint?  \n"
},
"get_blueprint_entities": {
"name": "get_blueprint_entities",
"returns": "array ofblueprint entity",
"type": "function",
"doc": "Entities in this blueprint.  \n  \n**Return value**  \nThe fields of an entity table depend on the type of the entity. Every\n   entity has at least the following fields:   \n  * entity_number :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Entity's unique identifier in this blueprint  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the entity  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position of the entity  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  The direction the entity is facing. Only present for entities\n       that can face in different directions.  \n  * other :  Entity-specific fields...  \n  \n_Can only be used if this is BlueprintItem_"
},
"set_blueprint_entities": {
"name": "set_blueprint_entities",
"args": {
"entities": {
"name": "entities",
"type": "array ofblueprint entity",
"doc": "entities :: array of blueprint entity :  New blueprint entities. The format is the same as in [LuaItemStack::get_blueprint_entities](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities) ."
}
},
"type": "function",
"doc": "Set new entities to be a part of this blueprint.  \n  \n**Parameters**  \nentities :: array of blueprint entity :  New blueprint entities. The format is the same as in [LuaItemStack::get_blueprint_entities](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_entities) .  \n  \n  \n_Can only be used if this is BlueprintItem_"
},
"add_ammo": {
"name": "add_ammo",
"args": {
"amount": {
"name": "amount",
"type": "float",
"doc": "amount :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Amount of ammo to add."
}
},
"type": "function",
"doc": "Add ammo to this ammo item.  \n  \n**Parameters**  \namount :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Amount of ammo to add.  \n  \n  \n_Can only be used if this is AmmoItem_"
},
"drain_ammo": {
"name": "drain_ammo",
"args": {
"amount": {
"name": "amount",
"type": "float",
"doc": "amount :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Amount of ammo to remove."
}
},
"type": "function",
"doc": "Remove ammo from this ammo item.  \n  \n**Parameters**  \namount :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Amount of ammo to remove.  \n  \n  \n_Can only be used if this is AmmoItem_"
},
"add_durability": {
"name": "add_durability",
"args": {
"amount": {
"name": "amount",
"type": "double",
"doc": "amount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Amount of durability to add."
}
},
"type": "function",
"doc": "Add durability to this tool item.  \n  \n**Parameters**  \namount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Amount of durability to add.  \n  \n  \n_Can only be used if this is ToolItem_"
},
"drain_durability": {
"name": "drain_durability",
"args": {
"amount": {
"name": "amount",
"type": "double",
"doc": "amount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Amount of durability to remove."
}
},
"type": "function",
"doc": "Remove durability from this tool item.  \n  \n**Parameters**  \namount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Amount of durability to remove.  \n  \n  \n_Can only be used if this is ToolItem_"
},
"can_set_stack": {
"name": "can_set_stack",
"returns": "boolean",
"args": {
"stack": {
"name": "stack",
"type": "ItemStackSpecification",
"doc": "stack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional) :  Stack that would be set, possibly ````nil```` ."
}
},
"type": "function",
"doc": "Would a call to [LuaItemStack::set_stack](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.set_stack) succeed?  \n  \n**Parameters**  \nstack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional) :  Stack that would be set, possibly ````nil```` .  \n  \n"
},
"set_stack": {
"name": "set_stack",
"returns": "boolean",
"args": {
"stack": {
"name": "stack",
"type": "ItemStackSpecification",
"doc": "stack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional) : \n   Item stack to set this one to. Omitting this parameter or passing ````nil```` will clear this item stack, as\n   if by calling [LuaItemStack::clear](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.clear) ."
}
},
"type": "function",
"doc": "Set this item stack to another item stack.  \n  \n**Parameters**  \nstack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) (optional) : \n   Item stack to set this one to. Omitting this parameter or passing ````nil```` will clear this item stack, as\n   if by calling [LuaItemStack::clear](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.clear) .  \n  \n  \n**Return value**  \nWas the stack set successfully?"
},
"transfer_stack": {
"name": "transfer_stack",
"returns": "boolean",
"args": {
"stack": {
"name": "stack",
"type": "ItemStackSpecification",
"doc": "stack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
}
},
"type": "function",
"doc": "Transfers the given item stack into this item stack.  \n  \n**Parameters**  \nstack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)  \n  \n  \n**Return value**  \nTrue if the full stack was transferred."
},
"export_stack": {
"name": "export_stack",
"returns": "string",
"type": "function",
"doc": "Export a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) to a string  \n  \n**Return value**  \nThe exported string"
},
"import_stack": {
"name": "import_stack",
"returns": "int",
"args": {
"data": {
"name": "data",
"type": "string",
"doc": "data :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The string to import"
}
},
"type": "function",
"doc": "Import a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) from a string  \n  \n**Parameters**  \ndata :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The string to import  \n  \n  \n**Return value**  \n0 if the import succeeded with no errors. -1 if the import succeeded with errors. 1 if the import failed."
},
"swap_stack": {
"name": "swap_stack",
"returns": "boolean",
"args": {
"stack": {
"name": "stack",
"type": "LuaItemStack",
"doc": "stack :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html)"
}
},
"type": "function",
"doc": "Swaps this item stack with the given item stack if allowed.  \n  \n**Parameters**  \nstack :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html)  \n  \n  \n**Return value**  \nif the 2 stacks were swapped successfully."
},
"clear": {
"name": "clear",
"type": "function",
"doc": "Clear this item stack.  \n"
},
"get_blueprint_tiles": {
"name": "get_blueprint_tiles",
"returns": "array ofblueprint tile",
"type": "function",
"doc": "Tiles in this blueprint  \n  \n**Return value**  \nA blueprint tile is a table:   \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the tile.  \n  \n_Can only be used if this is BlueprintItem_"
},
"set_blueprint_tiles": {
"name": "set_blueprint_tiles",
"args": {
"tiles": {
"name": "tiles",
"type": "array ofblueprint tile",
"doc": "tiles :: array of blueprint tile :  Tiles to be a part of the blueprint; the format is the same as is\n   returned from the corresponding get function; see [LuaItemStack::get_blueprint_tiles](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_tiles) ."
}
},
"type": "function",
"doc": "Set tiles in this blueprint  \n  \n**Parameters**  \ntiles :: array of blueprint tile :  Tiles to be a part of the blueprint; the format is the same as is\n   returned from the corresponding get function; see [LuaItemStack::get_blueprint_tiles](https://lua-api.factorio.com/latest/LuaItemStack.html#LuaItemStack.get_blueprint_tiles) .  \n  \n  \n_Can only be used if this is BlueprintItem_"
},
"get_inventory": {
"name": "get_inventory",
"returns": "LuaInventory",
"args": {
"inventory": {
"name": "inventory",
"type": "defines.inventory",
"doc": "inventory :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory) : \n   Index of the inventory to access -- currently can only be [defines.inventory.item_main](https://lua-api.factorio.com/latest/defines.html#defines.inventory.item_main) ."
}
},
"type": "function",
"doc": "Access the inner inventory of an item.  \n  \n**Parameters**  \ninventory :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory) : \n   Index of the inventory to access -- currently can only be [defines.inventory.item_main](https://lua-api.factorio.com/latest/defines.html#defines.inventory.item_main) .  \n  \n  \n**Return value**  \nor ````nil```` if there is no inventory with the given index."
},
"build_blueprint": {
"name": "build_blueprint",
"returns": "array ofLuaEntity",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "Table with the following fields:   \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to build on  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force to use for the building  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position to build at  \n  * force_build :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, anything that can be built is else nothing is built if any one thing can't be built  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  The direction to use when building  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  * by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to use if any. If provided [defines.events.on_built_entity](https://lua-api.factorio.com/latest/defines.html#defines.events.on_built_entity) will also be fired on successful entity creation.  \n  * raise_built :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true; [defines.events.script_raised_built](https://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation. Note: this is ignored if by_player is provided.  \n"
}
},
"type": "function",
"doc": "Build this blueprint  \n  \n**Parameters**  \nTable with the following fields:   \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to build on  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force to use for the building  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position to build at  \n  + force_build :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, anything that can be built is else nothing is built if any one thing can't be built  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  The direction to use when building  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  + by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to use if any. If provided [defines.events.on_built_entity](https://lua-api.factorio.com/latest/defines.html#defines.events.on_built_entity) will also be fired on successful entity creation.  \n  + raise_built :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true; [defines.events.script_raised_built](https://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation. Note: this is ignored if by_player is provided.  \n  \n  \n  \n**Return value**  \nArray of created ghosts"
},
"deconstruct_area": {
"name": "deconstruct_area",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "Table with the following fields:   \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to deconstruct on  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force to use for the deconstruction  \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to deconstruct  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  * by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to use if any.  \n"
}
},
"type": "function",
"doc": "Deconstruct the given area with this deconstruction item.  \n  \n**Parameters**  \nTable with the following fields:   \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to deconstruct on  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force to use for the deconstruction  \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to deconstruct  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  + by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to use if any.  \n  \n  \n"
},
"cancel_deconstruct_area": {
"name": "cancel_deconstruct_area",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "Table with the following fields:   \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to cancel deconstruct on  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force to use for canceling deconstruction  \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to deconstruct  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  * by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to use if any.  \n"
}
},
"type": "function",
"doc": "Cancel deconstruct the given area with this deconstruction item.  \n  \n**Parameters**  \nTable with the following fields:   \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to cancel deconstruct on  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force to use for canceling deconstruction  \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to deconstruct  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  + by_player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to use if any.  \n  \n  \n"
},
"create_blueprint": {
"name": "create_blueprint",
"returns": "dictionaryuint\u2192LuaEntity",
"args": {
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "Table with the following fields:   \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to create from  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force to use for the creation  \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The bounding box  \n  * always_include_tiles :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area.  \n  * include_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, entities are included in the blueprint. Defaults to true.  \n  * include_modules :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, modules are included in the blueprint. Defaults to true.  \n  * include_station_names :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, station names are included in the blueprint. Defaults to false.  \n  * include_trains :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, trains are included in the blueprint. Defaults to false.  \n  * include_fuel :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, train fuel is included in the blueprint, Defaults to true.  \n"
}
},
"type": "function",
"doc": "Sets up this blueprint using the found blueprintable entities/tiles on the surface.  \n  \n**Parameters**  \nTable with the following fields:   \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) :  Surface to create from  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force to use for the creation  \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The bounding box  \n  + always_include_tiles :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area.  \n  + include_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, entities are included in the blueprint. Defaults to true.  \n  + include_modules :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, modules are included in the blueprint. Defaults to true.  \n  + include_station_names :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, station names are included in the blueprint. Defaults to false.  \n  + include_trains :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, trains are included in the blueprint. Defaults to false.  \n  + include_fuel :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, train fuel is included in the blueprint, Defaults to true.  \n  \n  \n  \n**Return value**  \nThe blueprint entity index to source entity mapping."
},
"get_tag": {
"name": "get_tag",
"returns": "Any",
"args": {
"tag_name": {
"name": "tag_name",
"type": "string",
"doc": "tag_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)"
}
},
"type": "function",
"doc": "Gets the tag with the given name or returns ````nil```` if it doesn't exist.  \n  \n**Parameters**  \ntag_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  \n  \n_Can only be used if this is ItemWithTags_"
},
"set_tag": {
"name": "set_tag",
"returns": "Any",
"args": {
"tag_name": {
"name": "tag_name",
"type": "string",
"doc": "tag_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)"
},
"tag": {
"name": "tag",
"type": "Any",
"doc": "tag :: [Any](https://lua-api.factorio.com/latest/Concepts.html#Any)"
}
},
"type": "function",
"doc": "Sets the tag with the given name and value.  \n  \n**Parameters**  \n* tag_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n* tag :: [Any](https://lua-api.factorio.com/latest/Concepts.html#Any)  \n  \n  \n_Can only be used if this is ItemWithTags_"
},
"remove_tag": {
"name": "remove_tag",
"returns": "boolean",
"args": {
"tag": {
"name": "tag",
"type": "string",
"doc": "tag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)"
}
},
"type": "function",
"doc": "Removes a tag with the given name.  \n  \n**Parameters**  \ntag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  \n  \n**Return value**  \nIf the tag existed and was removed.  \n_Can only be used if this is ItemWithTags_"
},
"clear_blueprint": {
"name": "clear_blueprint",
"type": "function",
"doc": "Clears this blueprint item.  \n  \n_Can only be used if this is BlueprintItem_"
},
"get_entity_filter": {
"name": "get_entity_filter",
"returns": "string",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Gets the entity filter at the given index for this deconstruction item.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n  \n_Can only be used if this is DeconstructionItem_"
},
"set_entity_filter": {
"name": "set_entity_filter",
"returns": "boolean",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
},
"filter": {
"name": "filter",
"type": "stringorLuaEntityPrototypeorLuaEntity",
"doc": "filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Setting to nil erases the filter."
}
},
"type": "function",
"doc": "Sets the entity filter at the given index for this deconstruction item.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n* filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Setting to nil erases the filter.  \n  \n  \n**Return value**  \nIf the new filter was set (was valid.)  \n_Can only be used if this is DeconstructionItem_"
},
"get_tile_filter": {
"name": "get_tile_filter",
"returns": "string",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Gets the tile filter at the given index for this deconstruction item.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n  \n_Can only be used if this is DeconstructionItem_"
},
"set_tile_filter": {
"name": "set_tile_filter",
"returns": "boolean",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
},
"filter": {
"name": "filter",
"type": "stringorLuaTilePrototypeorLuaTile",
"doc": "filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](https://lua-api.factorio.com/latest/LuaTilePrototype.html) or [LuaTile](https://lua-api.factorio.com/latest/LuaTile.html) :  Setting to nil erases the filter."
}
},
"type": "function",
"doc": "Sets the tile filter at the given index for this deconstruction item.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n* filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](https://lua-api.factorio.com/latest/LuaTilePrototype.html) or [LuaTile](https://lua-api.factorio.com/latest/LuaTile.html) :  Setting to nil erases the filter.  \n  \n  \n**Return value**  \nIf the new filter was set (was valid.)  \n_Can only be used if this is DeconstructionItem_"
},
"clear_deconstruction_item": {
"name": "clear_deconstruction_item",
"type": "function",
"doc": "Clears all settings/filters on this deconstruction item resetting it to default values.  \n  \n_Can only be used if this is DeconstructionItem_"
},
"clear_upgrade_item": {
"name": "clear_upgrade_item",
"type": "function",
"doc": "Clears all settings/filters on this upgrade item resetting it to default values.  \n  \n_Can only be used if this is UpgradeItem_"
},
"get_mapper": {
"name": "get_mapper",
"returns": "UpgradeFilter",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index of the mapper to read."
},
"type": {
"name": "type",
"type": "string",
"doc": "type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  'from' or 'to'."
}
},
"type": "function",
"doc": "Gets the filter at the given index for this upgrade item.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index of the mapper to read.  \n* type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  'from' or 'to'.  \n  \n  \n_Can only be used if this is UpgradeItem_"
},
"set_mapper": {
"name": "set_mapper",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index of the mapper to set."
},
"type": {
"name": "type",
"type": "string",
"doc": "type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) : ````from```` or ````to```` ."
},
"filter": {
"name": "filter",
"type": "UpgradeFilter",
"doc": "filter :: [UpgradeFilter](https://lua-api.factorio.com/latest/Concepts.html#UpgradeFilter) :  The filter to set or ````nil````"
}
},
"type": "function",
"doc": "Sets the module filter at the given index for this upgrade item.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index of the mapper to set.  \n* type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) : ````from```` or ````to```` .  \n* filter :: [UpgradeFilter](https://lua-api.factorio.com/latest/Concepts.html#UpgradeFilter) :  The filter to set or ````nil````  \n  \n  \n_Can only be used if this is UpgradeItem_"
},
"get_blueprint_entity_count": {
"name": "get_blueprint_entity_count",
"returns": "uint",
"type": "function",
"doc": "Gets the number of entities in this blueprint item.  \n  \n_Can only be used if this is BlueprintItem_"
},
"get_blueprint_entity_tags": {
"name": "get_blueprint_entity_tags",
"returns": "Tags",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Gets the tags for the given blueprint entity index in this blueprint item.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n  \n_Can only be used if this is BlueprintItem_"
},
"set_blueprint_entity_tags": {
"name": "set_blueprint_entity_tags",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The entity index"
},
"tags": {
"name": "tags",
"type": "Tags",
"doc": "tags :: [Tags](https://lua-api.factorio.com/latest/Concepts.html#Tags)"
}
},
"type": "function",
"doc": "Sets the tags on the given blueprint entity index in this blueprint item.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The entity index  \n* tags :: [Tags](https://lua-api.factorio.com/latest/Concepts.html#Tags)  \n  \n  \n_Can only be used if this is BlueprintItem_"
},
"get_blueprint_entity_tag": {
"name": "get_blueprint_entity_tag",
"returns": "Any",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The entity index"
},
"tag": {
"name": "tag",
"type": "string",
"doc": "tag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The tag to get"
}
},
"type": "function",
"doc": "Gets the given tag on the given blueprint entity index in this blueprint item.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The entity index  \n* tag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The tag to get  \n  \n  \n_Can only be used if this is BlueprintItem_"
},
"set_blueprint_entity_tag": {
"name": "set_blueprint_entity_tag",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The entity index"
},
"tag": {
"name": "tag",
"type": "string",
"doc": "tag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The tag to set"
},
"value": {
"name": "value",
"type": "Any",
"doc": "value :: [Any](https://lua-api.factorio.com/latest/Concepts.html#Any) :  The tag value to set or ````nil```` to clear the tag"
}
},
"type": "function",
"doc": "Sets the given tag on the given blueprint entity index in this blueprint item.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The entity index  \n* tag :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The tag to set  \n* value :: [Any](https://lua-api.factorio.com/latest/Concepts.html#Any) :  The tag value to set or ````nil```` to clear the tag  \n  \n  \n_Can only be used if this is BlueprintItem_"
},
"valid_for_read": {
"name": "valid_for_read",
"type": "boolean",
"mode": "[R]",
"doc": "Is this valid for reading? Differs from the usual ````valid```` in that ````valid```` will be ````true```` even if\n the item stack is blank but the entity that holds it is still valid.  \n"
},
"prototype": {
"name": "prototype",
"type": "LuaItemPrototype",
"mode": "[R]",
"doc": "Prototype of the item held in this stack.  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Prototype name of the item held in this stack.  \n"
},
"type": {
"name": "type",
"type": "string",
"mode": "[R]",
"doc": "Type of the item prototype.  \n"
},
"count": {
"name": "count",
"type": "uint",
"mode": "[RW]",
"doc": "Number of items in this stack.  \n"
},
"grid": {
"name": "grid",
"type": "LuaEquipmentGrid",
"mode": "[R]",
"doc": "The equipment grid of this item or ````nil```` if this item doesn't have a grid.  \n"
},
"health": {
"name": "health",
"type": "float",
"mode": "[RW]",
"doc": "How much health the item has, as a number in range [0, 1].  \n"
},
"durability": {
"name": "durability",
"type": "double",
"mode": "[RW]",
"doc": "Durability of the contained item. Automatically capped at the item's maximum durability.  \n **Note:** When used on a non-tool item, the value of this attribute is ````nil```` ."
},
"ammo": {
"name": "ammo",
"type": "uint",
"mode": "[RW]",
"doc": "Number of bullets left in the magazine.  \n _Can only be used if this is AmmoItem_"
},
"blueprint_icons": {
"name": "blueprint_icons",
"type": "array ofIcon",
"mode": "[RW]",
"doc": "Icons of a blueprint item, blueprint book, deconstruction item or upgrade planner.\n An item that doesn't have icons returns nil on read and throws error on write.\n Every entry of this array has the following fields:  \n   \n  * signal :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) :  Slot icon to use. The slot will have the icon of the specified signal. This allows\n                            the use of any item icon, as well as virtual signal icons.  \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}.  \n _Can only be used if this is BlueprintItem_"
},
"blueprint_snap_to_grid": {
"name": "blueprint_snap_to_grid",
"type": "Position",
"mode": "[RW]",
"doc": "The snapping grid size in this blueprint item or nil if snapping is not enabled.  \n _Can only be used if this is BlueprintItem_"
},
"blueprint_position_relative_to_grid": {
"name": "blueprint_position_relative_to_grid",
"type": "Position",
"mode": "[RW]",
"doc": "The offset from the absolute grid or nil if absolute snapping is not enabled.  \n _Can only be used if this is BlueprintItem_"
},
"blueprint_absolute_snapping": {
"name": "blueprint_absolute_snapping",
"type": "boolean",
"mode": "[RW]",
"doc": "If absolute snapping is enabled on this blueprint item.  \n _Can only be used if this is BlueprintItem_"
},
"label": {
"name": "label",
"type": "string",
"mode": "[RW]",
"doc": "The current label for this item. Nil when none.  \n _Can only be used if this is ItemWithLabel_"
},
"label_color": {
"name": "label_color",
"type": "Color",
"mode": "[RW]",
"doc": "The current label color for this item. Nil when none.  \n _Can only be used if this is ItemWithLabel_"
},
"allow_manual_label_change": {
"name": "allow_manual_label_change",
"type": "boolean",
"mode": "[RW]",
"doc": "If the label for this item can be manually changed. When false the label can only be changed through the API.  \n _Can only be used if this is ItemWithLabel_"
},
"cost_to_build": {
"name": "cost_to_build",
"type": "dictionarystring\u2192uint",
"mode": "[R]",
"doc": "Raw materials required to build this blueprint. Result is a dictionary mapping each item prototype name\n to the required count.  \n _Can only be used if this is BlueprintItem_"
},
"extends_inventory": {
"name": "extends_inventory",
"type": "boolean",
"mode": "[RW]",
"doc": "If this item extends the inventory it resides in (provides its contents for counts, crafting, insertion). Only callable on items with inventories.  \n _Can only be used if this is ItemWithInventory_"
},
"prioritize_insertion_mode": {
"name": "prioritize_insertion_mode",
"type": "string",
"mode": "[RW]",
"doc": "The insertion mode priority this ItemWithInventory uses when items are inserted into an inventory it resides in. Only callable on items with inventories.  \n _Can only be used if this is ItemWithInventory_"
},
"default_icons": {
"name": "default_icons",
"type": "array ofIcon",
"mode": "[R]",
"doc": "The default icons for a blueprint item. Every entry of this array has the following fields :  \n   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the item whose icon to use  \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Index of the icon in the blueprint icons slots. Has to be in {1, 2, 3, 4}.  \n _Can only be used if this is BlueprintItem_"
},
"tags": {
"name": "tags",
"type": "Tags",
"mode": "[RW]",
"doc": "_Can only be used if this is ItemWithTags_"
},
"custom_description": {
"name": "custom_description",
"type": "LocalisedString",
"mode": "[RW]",
"doc": "The custom description this item-with-tags. This is shown over the normal item description if this is set to a non-empty value.  \n"
},
"entity_filters": {
"name": "entity_filters",
"type": "array ofstring",
"mode": "[RW]",
"doc": "The entity filters for this deconstruction item.  \n"
},
"tile_filters": {
"name": "tile_filters",
"type": "array ofstring",
"mode": "[RW]",
"doc": "The tile filters for this deconstruction item.  \n"
},
"entity_filter_mode": {
"name": "entity_filter_mode",
"type": "defines.deconstruction_item.entity_filter_mode",
"mode": "[RW]",
"doc": "The blacklist/whitelist entity filter mode for this deconstruction item.  \n _Can only be used if this is DeconstructionItem_"
},
"tile_filter_mode": {
"name": "tile_filter_mode",
"type": "defines.deconstruction_item.tile_filter_mode",
"mode": "[RW]",
"doc": "The blacklist/whitelist tile filter mode for this deconstruction item.  \n _Can only be used if this is DeconstructionItem_"
},
"tile_selection_mode": {
"name": "tile_selection_mode",
"type": "defines.deconstruction_item.tile_selection_mode",
"mode": "[RW]",
"doc": "The tile selection mode for this deconstruction item.  \n _Can only be used if this is DeconstructionItem_"
},
"trees_and_rocks_only": {
"name": "trees_and_rocks_only",
"type": "boolean",
"mode": "[RW]",
"doc": "If this deconstruction item is set to allow trees and rocks only.  \n _Can only be used if this is DeconstructionItem_"
},
"entity_filter_count": {
"name": "entity_filter_count",
"type": "uint",
"mode": "[R]",
"doc": "The number of entity filters this deconstruction item supports.  \n _Can only be used if this is DeconstructionItem_"
},
"tile_filter_count": {
"name": "tile_filter_count",
"type": "uint",
"mode": "[R]",
"doc": "The number of tile filters this deconstruction item supports.  \n _Can only be used if this is DeconstructionItem_"
},
"active_index": {
"name": "active_index",
"type": "uint",
"mode": "[RW]",
"doc": "The active blueprint index for this blueprint book. May be ````nil```` .  \n _Can only be used if this is BlueprintBookItem_"
},
"item_number": {
"name": "item_number",
"type": "uint",
"mode": "[R]",
"doc": "The unique ID for this item if it has a unique ID or ````nil```` .\n The following item types have unique IDs:  \n   \n  * ````\"armor\"````  \n  * ````\"blueprint\"````  \n  * ````\"blueprint-book\"````  \n  * ````\"deconstruction-item\"````  \n  * ````\"item-with-entity-data\"````  \n  * ````\"item-with-inventory\"````  \n  * ````\"selection-tool\"````  \n  * ````\"item-with-tags\"````  \n"
},
"connected_entity": {
"name": "connected_entity",
"mode": "[RW]",
"doc": "If this item is spidertron remote and has spidertron bound to it, the connected spider-vehicle entity is returned, otherwise ````nil```` .  \n"
},
"is_blueprint": {
"name": "is_blueprint",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a blueprint item.  \n"
},
"is_blueprint_book": {
"name": "is_blueprint_book",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a blueprint book item.  \n"
},
"is_module": {
"name": "is_module",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a module item.  \n"
},
"is_tool": {
"name": "is_tool",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a tool item.  \n"
},
"is_mining_tool": {
"name": "is_mining_tool",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a mining tool item.  \n"
},
"is_armor": {
"name": "is_armor",
"type": "boolean",
"mode": "[R]",
"doc": "If this is an armor item.  \n"
},
"is_repair_tool": {
"name": "is_repair_tool",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a repair tool item.  \n"
},
"is_item_with_label": {
"name": "is_item_with_label",
"type": "boolean",
"mode": "[R]",
"doc": "If this is an item with label item.  \n"
},
"is_item_with_inventory": {
"name": "is_item_with_inventory",
"type": "boolean",
"mode": "[R]",
"doc": "If this is an item with inventory item.  \n"
},
"is_item_with_entity_data": {
"name": "is_item_with_entity_data",
"type": "boolean",
"mode": "[R]",
"doc": "If this is an item with entity data item.  \n"
},
"is_selection_tool": {
"name": "is_selection_tool",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a selection tool item.  \n"
},
"is_item_with_tags": {
"name": "is_item_with_tags",
"type": "boolean",
"mode": "[R]",
"doc": "If this is an item with tags item.  \n"
},
"is_deconstruction_item": {
"name": "is_deconstruction_item",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a deconstruction tool item.  \n"
},
"is_upgrade_item": {
"name": "is_upgrade_item",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a upgrade item.  \n"
}
},
"inherits": []
},
"LuaLampControlBehavior": {
"name": "LuaLampControlBehavior",
"type": "LuaLampControlBehavior",
"doc": "Control behavior for lamps.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"use_colors": {
"name": "use_colors",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the lamp should set the color from the circuit network signals.  \n"
},
"color": {
"name": "color",
"type": "Color",
"mode": "[R]",
"doc": "The color the lamp is showing or ````nil```` if not using any color.  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
},
"disabled": {
"name": "disabled",
"type": "boolean",
"mode": "[R]",
"doc": "If the entity is currently disabled because of the control behavior.  \n"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The circuit condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the circuit condition. Example Tell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 chain\n   signals. ````a_behavior.circuit_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"logistic_condition": {
"name": "logistic_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The logistic condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the logistic condition. Example Tell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more than\n   4 chain signals. ````a_behavior.logistic_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"connect_to_logistic_network": {
"name": "connect_to_logistic_network",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if this should connect to the logistic network.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity",
"Inherited from LuaGenericOnOffControlBehavior : disabled , circuit_condition , logistic_condition , connect_to_logistic_network"
]
},
"LuaLazyLoadedValue": {
"name": "LuaLazyLoadedValue",
"type": "LuaLazyLoadedValue",
"doc": "A lazily loaded value.\n For performance reasons, we sometimes return a custom lazily-loaded value type instead of the native Lua value. This custom\n type lazily constructs the necessary value when [LuaLazyLoadedValue::get](https://lua-api.factorio.com/latest/LuaLazyLoadedValue.html#LuaLazyLoadedValue.get) is called, therefore preventing its\n unnecessary construction in some cases.  \n An instance of LuaLazyLoadedValue is only valid during the event it was created from and cannot be saved.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get": {
"name": "get",
"returns": "varies",
"type": "function",
"doc": "Gets the value of this lazy loaded value.  \n"
}
},
"inherits": []
},
"LuaLogisticCell": {
"name": "LuaLogisticCell",
"type": "LuaLogisticCell",
"doc": "Logistic cell of a particular [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) . A \"Logistic Cell\" is the given name for\n settings and properties used by what would normally be seen as a \"Roboport\". A logistic\n cell however doesn't have to be attached to the roboport entity (the character has one for\n the personal roboport).  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"is_in_logistic_range": {
"name": "is_in_logistic_range",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
}
},
"type": "function",
"doc": "Is a given position within the logistic range of this cell?  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n"
},
"is_in_construction_range": {
"name": "is_in_construction_range",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
}
},
"type": "function",
"doc": "Is a given position within the construction range of this cell?  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n"
},
"is_neighbour_with": {
"name": "is_neighbour_with",
"returns": "boolean",
"args": {
"other": {
"name": "other",
"type": "LuaLogisticCell",
"doc": "other :: [LuaLogisticCell](https://lua-api.factorio.com/latest/LuaLogisticCell.html)"
}
},
"type": "function",
"doc": "Are two cells neighbours?  \n  \n**Parameters**  \nother :: [LuaLogisticCell](https://lua-api.factorio.com/latest/LuaLogisticCell.html)  \n  \n"
},
"logistic_radius": {
"name": "logistic_radius",
"type": "float",
"mode": "[R]",
"doc": "Logistic radius of this cell.  \n"
},
"logistics_connection_distance": {
"name": "logistics_connection_distance",
"type": "float",
"mode": "[R]",
"doc": "Logistic connection distance of this cell.  \n"
},
"construction_radius": {
"name": "construction_radius",
"type": "float",
"mode": "[R]",
"doc": "Construction radius of this cell.  \n"
},
"stationed_logistic_robot_count": {
"name": "stationed_logistic_robot_count",
"type": "uint",
"mode": "[R]",
"doc": "Number of stationed logistic robots in this cell.  \n"
},
"stationed_construction_robot_count": {
"name": "stationed_construction_robot_count",
"type": "uint",
"mode": "[R]",
"doc": "Number of stationed construction robots in this cell.  \n"
},
"mobile": {
"name": "mobile",
"type": "boolean",
"mode": "[R]",
"doc": "````true```` if this is a mobile cell. In vanilla, only the logistic cell created by a character's personal\n roboport is mobile.  \n"
},
"transmitting": {
"name": "transmitting",
"type": "boolean",
"mode": "[R]",
"doc": "````true```` if this cell is active.  \n"
},
"charge_approach_distance": {
"name": "charge_approach_distance",
"type": "float",
"mode": "[R]",
"doc": "Radius at which the robots hover when waiting to be charged.  \n"
},
"charging_robot_count": {
"name": "charging_robot_count",
"type": "uint",
"mode": "[R]",
"doc": "Number of robots currently charging.  \n"
},
"to_charge_robot_count": {
"name": "to_charge_robot_count",
"type": "uint",
"mode": "[R]",
"doc": "Number of robots waiting to charge.  \n"
},
"owner": {
"name": "owner",
"type": "LuaEntity",
"mode": "[R]",
"doc": "This cell's owner.  \n"
},
"logistic_network": {
"name": "logistic_network",
"type": "LuaLogisticNetwork",
"mode": "[R]",
"doc": "The network that owns this cell or ````nil```` .  \n"
},
"neighbours": {
"name": "neighbours",
"type": "array ofLuaLogisticCell",
"mode": "[R]",
"doc": "Neighbouring cells.  \n"
},
"charging_robots": {
"name": "charging_robots",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "Robots currently being charged.  \n"
},
"to_charge_robots": {
"name": "to_charge_robots",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "Robots waiting to charge.  \n"
}
},
"inherits": []
},
"LuaLogisticContainerControlBehavior": {
"name": "LuaLogisticContainerControlBehavior",
"type": "LuaLogisticContainerControlBehavior",
"doc": "Control behavior for logistic chests.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"circuit_mode_of_operation": {
"name": "circuit_mode_of_operation",
"type": "defines.control_behavior.logistic_container.circuit_mode_of_operation",
"mode": "[RW]",
"doc": "The circuit mode of operations for the logistic container.  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaLogisticNetwork": {
"name": "LuaLogisticNetwork",
"type": "LuaLogisticNetwork",
"doc": "A single logistic network of a given force on a given surface.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_item_count": {
"name": "get_item_count",
"returns": "int",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Item name to count. If not given, gives counts\n   of all items in the network."
},
"member": {
"name": "member",
"type": "string",
"doc": "member :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Logistic members to check, must be either ````\"storage\"```` or ````\"providers\"```` . If not given, gives count in the entire network."
}
},
"type": "function",
"doc": "Count given or all items in the network or given members.  \n  \n**Parameters**  \n* item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Item name to count. If not given, gives counts\n   of all items in the network.  \n* member :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Logistic members to check, must be either ````\"storage\"```` or ````\"providers\"```` . If not given, gives count in the entire network.  \n  \n"
},
"get_contents": {
"name": "get_contents",
"returns": "dictionarystring\u2192uint",
"type": "function",
"doc": "Get item counts for the entire network.  \n  \n**Return value**  \nA mapping of item prototype names to the number available in the network.  \n**See also**  \nSee also   \n  * [LuaInventory::get_contents](https://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_contents)  \n"
},
"remove_item": {
"name": "remove_item",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "ItemStackSpecification",
"doc": "item :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  What to remove."
},
"members": {
"name": "members",
"type": "string",
"doc": "members :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Which logistic members to remove from. Must be ````\"storage\"```` , ````\"passive-provider\"```` , ````\"buffer\"```` , or ````\"active-provider\"```` . If not specified, removes\n   from the network in the usual order."
}
},
"type": "function",
"doc": "Remove items from the logistic network. This will actually remove the items from some\n logistic chests.  \n  \n**Parameters**  \n* item :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  What to remove.  \n* members :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Which logistic members to remove from. Must be ````\"storage\"```` , ````\"passive-provider\"```` , ````\"buffer\"```` , or ````\"active-provider\"```` . If not specified, removes\n   from the network in the usual order.  \n  \n  \n**Return value**  \nNumber of items removed."
},
"insert": {
"name": "insert",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "ItemStackSpecification",
"doc": "item :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  What to insert."
},
"members": {
"name": "members",
"type": "string",
"doc": "members :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Which logistic members to insert the items to. Must be ````\"storage\"```` , ````\"storage-empty\"```` (storage chests that are completely empty), ````\"storage-empty-slot\"```` (storage chests that have an empty slot), or ````\"requester\"```` . If not\n   specified, inserts items into the logistic network in the usual order."
}
},
"type": "function",
"doc": "Insert items into the logistic network. This will actually insert the items into some\n logistic chests.  \n  \n**Parameters**  \n* item :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  What to insert.  \n* members :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Which logistic members to insert the items to. Must be ````\"storage\"```` , ````\"storage-empty\"```` (storage chests that are completely empty), ````\"storage-empty-slot\"```` (storage chests that have an empty slot), or ````\"requester\"```` . If not\n   specified, inserts items into the logistic network in the usual order.  \n  \n  \n**Return value**  \nNumber of items actually inserted."
},
"find_cell_closest_to": {
"name": "find_cell_closest_to",
"returns": "LuaLogisticCell",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
}
},
"type": "function",
"doc": "Find logistic cell closest to a given position.  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n  \n**Return value**  \nMay be ````nil```` if no cell was found."
},
"select_pickup_point": {
"name": "select_pickup_point",
"returns": "LuaLogisticPoint",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the item to select.  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  When given, it will find the storage 'best' storage point from this position.  \n  * include_buffers :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.  \n  * members :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  When given, it will find from only the specific type of member. Must be ````\"storage\"```` , ````\"passive-provider\"```` , ````\"buffer\"```` or ````\"active-provider\"```` . If not specified, selects with normal priorities. Not considered if position is specified.  \n"
}
},
"type": "function",
"doc": "Find the 'best' logistic point with this item ID and from the given position or from given chest type.  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the item to select.  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  When given, it will find the storage 'best' storage point from this position.  \n  + include_buffers :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.  \n  + members :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  When given, it will find from only the specific type of member. Must be ````\"storage\"```` , ````\"passive-provider\"```` , ````\"buffer\"```` or ````\"active-provider\"```` . If not specified, selects with normal priorities. Not considered if position is specified.  \n  \n  \n  \n**Return value**  \nMay be ````nil```` if no point was found."
},
"select_drop_point": {
"name": "select_drop_point",
"returns": "LuaLogisticPoint",
"args": {
"stack": {
"name": "stack",
"type": "ItemStackSpecification",
"doc": "Table with the following fields:   \n  * stack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Name of the item to select.  \n  * members :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  When given, it will find from only the specific type of member. Must be ````\"storage\"```` , ````\"storage-empty\"```` , ````\"storage-empty-slot\"```` or ````\"requester\"```` . If not specified, selects with normal priorities.  \n"
}
},
"type": "function",
"doc": "Find a logistic point to drop the specific item stack.  \n  \n**Parameters**  \nTable with the following fields:   \n  + stack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Name of the item to select.  \n  + members :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  When given, it will find from only the specific type of member. Must be ````\"storage\"```` , ````\"storage-empty\"```` , ````\"storage-empty-slot\"```` or ````\"requester\"```` . If not specified, selects with normal priorities.  \n  \n  \n  \n**Return value**  \nMay be ````nil```` if no point was found."
},
"force": {
"name": "force",
"type": "LuaForce",
"mode": "[R]",
"doc": "The force this logistic network belongs to.  \n"
},
"available_logistic_robots": {
"name": "available_logistic_robots",
"type": "uint",
"mode": "[R]",
"doc": "Number of logistic robots available for a job.  \n"
},
"all_logistic_robots": {
"name": "all_logistic_robots",
"type": "uint",
"mode": "[R]",
"doc": "The total number of logistic robots in the network (idle and active + in roboports).  \n"
},
"available_construction_robots": {
"name": "available_construction_robots",
"type": "uint",
"mode": "[R]",
"doc": "Number of construction robots available for a job.  \n"
},
"all_construction_robots": {
"name": "all_construction_robots",
"type": "uint",
"mode": "[R]",
"doc": "The total number of construction robots in the network (idle and active + in roboports).  \n"
},
"robot_limit": {
"name": "robot_limit",
"type": "uint",
"mode": "[R]",
"doc": "Maximum number of robots the network can work with. Currently only used for the personal\n roboport.  \n"
},
"cells": {
"name": "cells",
"type": "array ofLuaLogisticCell",
"mode": "[R]",
"doc": "All cells in this network.  \n"
},
"providers": {
"name": "providers",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "All entities that have logistic provider points in this network.  \n"
},
"empty_providers": {
"name": "empty_providers",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "All entities that have empty logistic provider points in this network.  \n"
},
"requesters": {
"name": "requesters",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "All entities that have logistic requester points in this network.  \n"
},
"storages": {
"name": "storages",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "All entities that have logistic storage points in this network.  \n"
},
"logistic_members": {
"name": "logistic_members",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "All other entities that have logistic points in this network (inserters mostly).  \n"
},
"provider_points": {
"name": "provider_points",
"type": "array ofLuaLogisticPoint",
"mode": "[R]",
"doc": "All things that have provider points in this network.  \n"
},
"passive_provider_points": {
"name": "passive_provider_points",
"type": "array ofLuaLogisticPoint",
"mode": "[R]",
"doc": "All passive provider points in this network.  \n"
},
"active_provider_points": {
"name": "active_provider_points",
"type": "array ofLuaLogisticPoint",
"mode": "[R]",
"doc": "All active provider points in this network.  \n"
},
"empty_provider_points": {
"name": "empty_provider_points",
"type": "array ofLuaLogisticPoint",
"mode": "[R]",
"doc": "All things that have empty provider points in this network.  \n"
},
"requester_points": {
"name": "requester_points",
"type": "array ofLuaLogisticPoint",
"mode": "[R]",
"doc": "All things that have requester points in this network.  \n"
},
"storage_points": {
"name": "storage_points",
"type": "array ofLuaLogisticPoint",
"mode": "[R]",
"doc": "All things that have storage points in this network.  \n"
},
"robots": {
"name": "robots",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "All robots in this logistic network.  \n"
},
"construction_robots": {
"name": "construction_robots",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "All construction robots in this logistic network.  \n"
},
"logistic_robots": {
"name": "logistic_robots",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "All logistic robots in this logistic network.  \n"
}
},
"inherits": []
},
"LuaLogisticPoint": {
"name": "LuaLogisticPoint",
"type": "LuaLogisticPoint",
"doc": "Logistic point of a particular [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) . A \"Logistic point\" is the name given for\n settings and properties used by requester, provider, and storage points in a given logistic network.\n These \"points\" don't have to be a logistic container but often are. One other entity that can own several\n points is the \"character\" character type entity.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"owner": {
"name": "owner",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) owner of this [LuaLogisticPoint](https://lua-api.factorio.com/latest/LuaLogisticPoint.html) .  \n"
},
"logistic_network": {
"name": "logistic_network",
"type": "LuaLogisticNetwork",
"mode": "[R]"
},
"logistic_member_index": {
"name": "logistic_member_index",
"type": "uint",
"mode": "[R]",
"doc": "The Logistic member index of this logistic point.  \n"
},
"filters": {
"name": "filters",
"type": "array ofLogisticFilter",
"mode": "[R]",
"doc": "The logistic filters for this logistic point or ````nil```` if this doesn't use logistic filters.  \n **Note:** The returned array will always have an entry for each filter and will be indexed in sequence when not nil."
},
"mode": {
"name": "mode",
"type": "defines.logistic_mode",
"mode": "[R]",
"doc": "The logistic mode.  \n"
},
"force": {
"name": "force",
"type": "LuaForce",
"mode": "[R]",
"doc": "The force of this logistic point.  \n **Note:** This will always be the same as the [LuaLogisticPoint::owner](https://lua-api.factorio.com/latest/LuaLogisticPoint.html#LuaLogisticPoint.owner) force."
},
"targeted_items_pickup": {
"name": "targeted_items_pickup",
"type": "dictionarystring\u2192uint",
"mode": "[R]",
"doc": "Items targeted to be picked up from this logistic point by robots.  \n"
},
"targeted_items_deliver": {
"name": "targeted_items_deliver",
"type": "dictionarystring\u2192uint",
"mode": "[R]",
"doc": "Items targeted to be dropped off into this logistic point by robots.  \n"
},
"exact": {
"name": "exact",
"type": "boolean",
"mode": "[R]",
"doc": "If this logistic point is using the exact mode. In exact mode robots never over-deliver requests.  \n"
}
},
"inherits": []
},
"LuaMiningDrillControlBehavior": {
"name": "LuaMiningDrillControlBehavior",
"type": "LuaMiningDrillControlBehavior",
"doc": "Control behavior for mining drills.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"circuit_enable_disable": {
"name": "circuit_enable_disable",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if this drill is enabled or disabled using the logistics or circuit condition.  \n"
},
"circuit_read_resources": {
"name": "circuit_read_resources",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if this drill should send the resources in the field to the circuit network.\n Which resources depends on [LuaMiningDrillControlBehavior::resource_read_mode](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaMiningDrillControlBehavior.resource_read_mode)  \n"
},
"resource_read_mode": {
"name": "resource_read_mode",
"type": "defines.control_behavior.mining_drill.resource_read_mode",
"mode": "[RW]",
"doc": "If the mining drill should send just the resources in its area or the entire field it's on to the circuit network.  \n"
},
"resource_read_targets": {
"name": "resource_read_targets",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "The resource entities that the mining drill will send information about to the circuit network or an empty array.  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
},
"disabled": {
"name": "disabled",
"type": "boolean",
"mode": "[R]",
"doc": "If the entity is currently disabled because of the control behavior.  \n"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The circuit condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the circuit condition. Example Tell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 chain\n   signals. ````a_behavior.circuit_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"logistic_condition": {
"name": "logistic_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The logistic condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the logistic condition. Example Tell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more than\n   4 chain signals. ````a_behavior.logistic_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"connect_to_logistic_network": {
"name": "connect_to_logistic_network",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if this should connect to the logistic network.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity",
"Inherited from LuaGenericOnOffControlBehavior : disabled , circuit_condition , logistic_condition , connect_to_logistic_network"
]
},
"LuaModSettingPrototype": {
"name": "LuaModSettingPrototype",
"type": "LuaModSettingPrototype",
"doc": "Prototype of a mod setting.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"mod": {
"name": "mod",
"type": "string",
"mode": "[R]",
"doc": "The mod that owns this setting.  \n"
},
"setting_type": {
"name": "setting_type",
"type": "string",
"mode": "[R]"
},
"default_value": {
"name": "default_value",
"type": "booleanordoubleorintorstring",
"mode": "[R]",
"doc": "The default value of this setting.  \n"
},
"minimum_value": {
"name": "minimum_value",
"type": "doubleorint",
"mode": "[R]",
"doc": "The minimum value for this setting or ````nil```` if  this setting type doesn't support a minimum.  \n"
},
"maximum_value": {
"name": "maximum_value",
"type": "doubleorint",
"mode": "[R]",
"doc": "The maximum value for this setting or ````nil```` if  this setting type doesn't support a maximum.  \n"
},
"allowed_values": {
"name": "allowed_values",
"type": "array ofstringorarray ofintorarray ofdouble",
"mode": "[R]",
"doc": "The allowed values for this setting or ````nil```` if this setting doesn't use the a fixed set of values.  \n"
},
"allow_blank": {
"name": "allow_blank",
"type": "boolean",
"mode": "[R]",
"doc": "If this string setting allows blank values or ````nil```` if not a string setting.  \n"
},
"auto_trim": {
"name": "auto_trim",
"type": "boolean",
"mode": "[R]",
"doc": "If this string setting auto-trims values or ````nil```` if not a string setting.  \n"
},
"hidden": {
"name": "hidden",
"type": "boolean",
"mode": "[R]",
"doc": "If this setting is hidden from the GUI.  \n"
}
},
"inherits": []
},
"LuaModuleCategoryPrototype": {
"name": "LuaModuleCategoryPrototype",
"type": "LuaModuleCategoryPrototype",
"doc": "Prototype of a module category.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
}
},
"inherits": []
},
"LuaNamedNoiseExpression": {
"name": "LuaNamedNoiseExpression",
"type": "LuaNamedNoiseExpression",
"doc": "Prototype of a named noise expression.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"intended_property": {
"name": "intended_property",
"type": "string",
"mode": "[R]",
"doc": "Name of the property that this expression is intended to provide a value for, if any.  \n"
},
"expression": {
"name": "expression",
"type": "NoiseExpression",
"mode": "[R]",
"doc": "The expression itself.  \n"
}
},
"inherits": []
},
"LuaNoiseLayerPrototype": {
"name": "LuaNoiseLayerPrototype",
"type": "LuaNoiseLayerPrototype",
"doc": "Prototype of a noise layer.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
}
},
"inherits": []
},
"LuaParticlePrototype": {
"name": "LuaParticlePrototype",
"type": "LuaParticlePrototype",
"doc": "Prototype of an optimized particle.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"regular_trigger_effect": {
"name": "regular_trigger_effect",
"type": "TriggerEffectItem",
"mode": "[R]"
},
"ended_in_water_trigger_effect": {
"name": "ended_in_water_trigger_effect",
"type": "TriggerEffectItem",
"mode": "[R]"
},
"render_layer": {
"name": "render_layer",
"type": "RenderLayer",
"mode": "[R]"
},
"render_layer_when_on_ground": {
"name": "render_layer_when_on_ground",
"type": "RenderLayer",
"mode": "[R]"
},
"life_time": {
"name": "life_time",
"type": "uint",
"mode": "[R]"
},
"regular_trigger_effect_frequency": {
"name": "regular_trigger_effect_frequency",
"type": "uint",
"mode": "[R]"
},
"movement_modifier_when_on_ground": {
"name": "movement_modifier_when_on_ground",
"type": "float",
"mode": "[R]"
},
"movement_modifier": {
"name": "movement_modifier",
"type": "float",
"mode": "[R]"
},
"mining_particle_frame_speed": {
"name": "mining_particle_frame_speed",
"type": "float",
"mode": "[R]"
}
},
"inherits": []
},
"LuaPermissionGroup": {
"name": "LuaPermissionGroup",
"type": "LuaPermissionGroup",
"doc": "A permission group that defines what players in this group are allowed to do.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"add_player": {
"name": "add_player",
"returns": "boolean",
"args": {
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
}
},
"type": "function",
"doc": "Adds the given player to this group.  \n  \n**Parameters**  \nplayer :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n  \n  \n**Return value**  \nIf the player was added."
},
"remove_player": {
"name": "remove_player",
"returns": "boolean",
"args": {
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
}
},
"type": "function",
"doc": "Removes the given player from this group.  \n  \n**Parameters**  \nplayer :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n  \n  \n**Return value**  \nIf the player was removed."
},
"allows_action": {
"name": "allows_action",
"returns": "boolean",
"args": {
"action": {
"name": "action",
"doc": "action :  The defines.input_action value."
}
},
"type": "function",
"doc": "If this group allows the given action.  \n  \n**Parameters**  \naction :  The defines.input_action value.  \n  \n"
},
"set_allows_action": {
"name": "set_allows_action",
"returns": "boolean",
"args": {
"action": {
"name": "action",
"doc": "action :  The defines.input_action value."
}
},
"type": "function",
"doc": "Sets if the player is allowed to perform the given action.  \n  \n**Parameters**  \n* action :  The defines.input_action value.  \n  \n  \n**Return value**  \nIf the value was applied."
},
"destroy": {
"name": "destroy",
"returns": "boolean",
"type": "function",
"doc": "Destroys this group.  \n  \n**Return value**  \nIf the group was destroyed."
},
"name": {
"name": "name",
"type": "string",
"mode": "[RW]",
"doc": "The name of this group.  \n **Note:** Setting to ````nil```` or an empty string sets the name to the default value."
},
"players": {
"name": "players",
"type": "array ofLuaPlayer",
"mode": "[R]",
"doc": "The players in this group.  \n"
},
"group_id": {
"name": "group_id",
"type": "uint",
"mode": "[R]",
"doc": "The group ID  \n"
}
},
"inherits": []
},
"LuaPermissionGroups": {
"name": "LuaPermissionGroups",
"type": "LuaPermissionGroups",
"doc": "All permission groups.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"create_group": {
"name": "create_group",
"returns": "LuaPermissionGroup",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)"
}
},
"type": "function",
"doc": "Creates a new permission group.  \n  \n**Parameters**  \nname :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  \n"
},
"get_group": {
"name": "get_group",
"returns": "LuaPermissionGroup",
"args": {
"group": {
"name": "group",
"type": "stringoruint",
"doc": "group :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Gets the permission group with the given name or group ID or ````nil```` if there is no matching group.  \n  \n**Parameters**  \ngroup :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"groups": {
"name": "groups",
"type": "array ofLuaPermissionGroup",
"mode": "[R]",
"doc": "All of the permission groups.  \n"
}
},
"inherits": []
},
"LuaPlayer": {
"name": "LuaPlayer",
"type": "LuaPlayer",
"doc": "A player in the game. Pay attention that a player may or may not have a character, which is the [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) of the little guy running around the world doing things.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"set_ending_screen_data": {
"name": "set_ending_screen_data",
"args": {
"message": {
"name": "message",
"type": "LocalisedString",
"doc": "message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  Message to be shown."
},
"file": {
"name": "file",
"type": "string",
"doc": "file :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Path to image to be shown."
}
},
"type": "function",
"doc": "Setup the screen to be shown when the game is finished.  \n  \n**Parameters**  \n* message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  Message to be shown.  \n* file :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Path to image to be shown.  \n  \n"
},
"print": {
"name": "print",
"args": {
"message": {
"name": "message",
"type": "LocalisedString",
"doc": "message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
},
"color": {
"name": "color",
"type": "Color",
"doc": "color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
}
},
"type": "function",
"doc": "Print text to the chat console.  \n  \n**Parameters**  \n* message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n* color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  \n"
},
"clear_console": {
"name": "clear_console",
"type": "function",
"doc": "Clear the chat console.  \n"
},
"get_goal_description": {
"name": "get_goal_description",
"returns": "LocalisedString",
"type": "function",
"doc": "Get the current goal description, as a localised string.  \n"
},
"set_goal_description": {
"name": "set_goal_description",
"args": {
"text": {
"name": "text",
"type": "LocalisedString",
"doc": "text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The text to display. \\n can be used to delimit lines. Passing empty\n   string or omitting this parameter entirely will make the goal window disappear."
},
"only_update": {
"name": "only_update",
"type": "boolean",
"doc": "only_update :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When ````true```` , won't play the \"goal updated\" sound."
}
},
"type": "function",
"doc": "Set the text in the goal window (top left).  \n  \n**Parameters**  \n* text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The text to display. \\n can be used to delimit lines. Passing empty\n   string or omitting this parameter entirely will make the goal window disappear.  \n* only_update :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When ````true```` , won't play the \"goal updated\" sound.  \n  \n"
},
"set_controller": {
"name": "set_controller",
"args": {
"type": {
"name": "type",
"type": "defines.controllers",
"doc": "Table with the following fields:   \n  * type :: [defines.controllers](https://lua-api.factorio.com/latest/defines.html#defines.controllers) :  Which controller to use  \n  * character :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  Entity to control. Mandatory when ````type```` is [defines.controllers.character](https://lua-api.factorio.com/latest/defines.html#defines.controllers.character) , ignored otherwise.  \n  * waypoints (optional) :  List of waypoints for the cutscene controller. This parameter is mandatory when ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) . Each waypoint is a table:   \n    + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Position to pan the camera to.  \n    + target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [LuaUnitGroup](https://lua-api.factorio.com/latest/LuaUnitGroup.html) (optional) :  Entity or unit group to pan the camera to.  \n    + transition_time :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  How many ticks it will take to reach this waypoint from the previous one.  \n    + time_to_wait :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Time in ticks to wait before moving to the next waypoint.  \n    + zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Zoom level to be set when the waypoint is reached. When not specified, the\n         previous waypoint's zoom is used.  \n  \n  * start_position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  If specified and ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) ,\n     the cutscene will start at this position. If not given the start position will be the player position.  \n  * start_zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If specified and ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) ,\n     the cutscene will start at this zoom level. If not given the start zoom will be the players zoom.  \n  * final_transition_time :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  If specified and ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) ,\n     it is the time in ticks it will take for the camera to pan from the final waypoint back to the starting\n     position. If not given the camera will not pan back to the start position/zoom.  \n  * chart_mode_cutoff :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If specified and ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) ,\n     the game will switch to chart-mode (map zoomed out) rendering when the zoom level is less than this value.  \n"
}
},
"type": "function",
"doc": "Set the controller type of the player.  \n  \n**Parameters**  \nTable with the following fields:   \n  + type :: [defines.controllers](https://lua-api.factorio.com/latest/defines.html#defines.controllers) :  Which controller to use  \n  + character :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  Entity to control. Mandatory when ````type```` is [defines.controllers.character](https://lua-api.factorio.com/latest/defines.html#defines.controllers.character) , ignored otherwise.  \n  + waypoints (optional) :  List of waypoints for the cutscene controller. This parameter is mandatory when ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) . Each waypoint is a table:   \n    - position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Position to pan the camera to.  \n    - target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [LuaUnitGroup](https://lua-api.factorio.com/latest/LuaUnitGroup.html) (optional) :  Entity or unit group to pan the camera to.  \n    - transition_time :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  How many ticks it will take to reach this waypoint from the previous one.  \n    - time_to_wait :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Time in ticks to wait before moving to the next waypoint.  \n    - zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Zoom level to be set when the waypoint is reached. When not specified, the\n         previous waypoint's zoom is used.  \n  \n  + start_position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  If specified and ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) ,\n     the cutscene will start at this position. If not given the start position will be the player position.  \n  + start_zoom :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If specified and ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) ,\n     the cutscene will start at this zoom level. If not given the start zoom will be the players zoom.  \n  + final_transition_time :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  If specified and ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) ,\n     it is the time in ticks it will take for the camera to pan from the final waypoint back to the starting\n     position. If not given the camera will not pan back to the start position/zoom.  \n  + chart_mode_cutoff :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If specified and ````type```` is [defines.controllers.cutscene](https://lua-api.factorio.com/latest/defines.html#defines.controllers.cutscene) ,\n     the game will switch to chart-mode (map zoomed out) rendering when the zoom level is less than this value.  \n  \n  \n"
},
"drag_wire": {
"name": "drag_wire",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "Table with the following fields:   \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position at which cursor was clicked. Used only to decide which side\n     of arithmetic combinator, decider combinator or power switch is to be connected. Entity itself\n     to be connected is based on the player's selected entity.  \n"
}
},
"type": "function",
"doc": "Start/end wire dragging at the specified location, wire type is based on the cursor contents  \n  \n**Parameters**  \nTable with the following fields:   \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position at which cursor was clicked. Used only to decide which side\n     of arithmetic combinator, decider combinator or power switch is to be connected. Entity itself\n     to be connected is based on the player's selected entity.  \n  \n  \n  \n**Return value**  \n````true```` if the action did something"
},
"disable_recipe_groups": {
"name": "disable_recipe_groups",
"type": "function",
"doc": "Disable recipe groups.  \n"
},
"enable_recipe_groups": {
"name": "enable_recipe_groups",
"type": "function",
"doc": "Enable recipe groups.  \n"
},
"disable_recipe_subgroups": {
"name": "disable_recipe_subgroups",
"type": "function",
"doc": "Disable recipe subgroups.  \n"
},
"enable_recipe_subgroups": {
"name": "enable_recipe_subgroups",
"type": "function",
"doc": "Enable recipe subgroups.  \n"
},
"print_entity_statistics": {
"name": "print_entity_statistics",
"args": {
"entities": {
"name": "entities",
"type": "array ofstring",
"doc": "entities :: array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Entity prototypes to get statistics for. If not specified or empty,\n   display statistics for all entities."
}
},
"type": "function",
"doc": "Print entity statistics to the player's console.  \n  \n**Parameters**  \nentities :: array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Entity prototypes to get statistics for. If not specified or empty,\n   display statistics for all entities.  \n  \n"
},
"print_robot_jobs": {
"name": "print_robot_jobs",
"type": "function",
"doc": "Print construction robot job counts to the players console.  \n"
},
"print_lua_object_statistics": {
"name": "print_lua_object_statistics",
"type": "function",
"doc": "Print LuaObject counts per mod.  \n"
},
"log_active_entity_chunk_counts": {
"name": "log_active_entity_chunk_counts",
"type": "function",
"doc": "Logs a dictionary of chunks -> active entities for the surface this player is on.  \n"
},
"log_active_entity_counts": {
"name": "log_active_entity_counts",
"type": "function",
"doc": "Logs a dictionary of active entities -> count for the surface this player is on.  \n"
},
"unlock_achievement": {
"name": "unlock_achievement",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  name of the achievement to unlock"
}
},
"type": "function",
"doc": "Unlock the achievements of the given player.\n This has any effect only when this is the local player, the achievement isn't unlocked so far and the achievement is of the type \"achievement\".  \n  \n**Parameters**  \nname :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  name of the achievement to unlock  \n  \n"
},
"clear_cursor": {
"name": "clear_cursor",
"returns": "boolean",
"type": "function",
"doc": "Invokes the \"clear cursor\" action on the player as if the user pressed it.  \n  \n**Return value**  \nIf the cursor is now empty."
},
"create_character": {
"name": "create_character",
"returns": "boolean",
"args": {
"character": {
"name": "character",
"type": "string",
"doc": "character :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The character to create else the default is used."
}
},
"type": "function",
"doc": "Creates and attaches a character entity to this player.  \n  \n**Parameters**  \ncharacter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The character to create else the default is used.  \n  \n  \n**Return value**  \nWhether the character was created."
},
"add_alert": {
"name": "add_alert",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"type": {
"name": "type",
"type": "defines.alert_type",
"doc": "type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
}
},
"type": "function",
"doc": "Adds an alert to this player for the given entity of the given alert type.  \n  \n**Parameters**  \n* entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n  \n"
},
"add_custom_alert": {
"name": "add_custom_alert",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  If the alert is clicked, the map will open at the position of this entity."
},
"icon": {
"name": "icon",
"type": "SignalID",
"doc": "icon :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID)"
},
"message": {
"name": "message",
"type": "LocalisedString",
"doc": "message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
},
"show_on_map": {
"name": "show_on_map",
"type": "boolean",
"doc": "show_on_map :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Adds a custom alert to this player.  \n  \n**Parameters**  \n* entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  If the alert is clicked, the map will open at the position of this entity.  \n* icon :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID)  \n* message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n* show_on_map :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"remove_alert": {
"name": "remove_alert",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "Table with the following fields:   \n  * entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \n  * prototype :: [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \n  * type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  * icon :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional)  \n  * message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n"
}
},
"type": "function",
"doc": "Removes all alerts matching the given filters or if an empty filters table is given all alerts are removed.  \n  \n**Parameters**  \nTable with the following fields:   \n  + entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \n  + prototype :: [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \n  + type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  + icon :: [SignalID](https://lua-api.factorio.com/latest/Concepts.html#SignalID) (optional)  \n  + message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n  \n  \n"
},
"get_alerts": {
"name": "get_alerts",
"returns": "dictionaryuint\u2192dictionarydefines.alert_type\u2192array ofalert",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "Table with the following fields:   \n  * entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \n  * prototype :: [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \n  * type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n"
}
},
"type": "function",
"doc": "Gets all alerts matching the given filters or if no filters are given all alerts are returned.  \n A mapping of surface index to an array of arrays of alerts indexed by the alert type.\n An alert is a table:  \n  \n**Parameters**  \nTable with the following fields:   \n  + entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional)  \n  + prototype :: [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html) (optional)  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \n  + type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type) (optional)  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  \n  \n"
},
"mute_alert": {
"name": "mute_alert",
"returns": "boolean",
"args": {
"alert_type": {
"name": "alert_type",
"type": "defines.alert_type",
"doc": "alert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
}
},
"type": "function",
"doc": "Mutes alerts for the given alert category.  \n  \n**Parameters**  \nalert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n  \n  \n**Return value**  \nIf the alert type was muted (false if it was already muted)."
},
"unmute_alert": {
"name": "unmute_alert",
"returns": "boolean",
"args": {
"alert_type": {
"name": "alert_type",
"type": "defines.alert_type",
"doc": "alert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
}
},
"type": "function",
"doc": "Unmutes alerts for the given alert category.  \n  \n**Parameters**  \nalert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n  \n  \n**Return value**  \nIf the alert type was unmuted (false if it was wasn't muted)."
},
"is_alert_muted": {
"name": "is_alert_muted",
"returns": "boolean",
"args": {
"alert_type": {
"name": "alert_type",
"type": "defines.alert_type",
"doc": "alert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
}
},
"type": "function",
"doc": "If the given alert type is currently muted.  \n  \n**Parameters**  \nalert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n  \n"
},
"enable_alert": {
"name": "enable_alert",
"returns": "boolean",
"args": {
"alert_type": {
"name": "alert_type",
"type": "defines.alert_type",
"doc": "alert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
}
},
"type": "function",
"doc": "Enables alerts for the given alert category.  \n  \n**Parameters**  \nalert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n  \n  \n**Return value**  \nIf the alert type was enabled (false if it was already enabled)."
},
"disable_alert": {
"name": "disable_alert",
"returns": "boolean",
"args": {
"alert_type": {
"name": "alert_type",
"type": "defines.alert_type",
"doc": "alert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
}
},
"type": "function",
"doc": "Disables alerts for the given alert category.  \n  \n**Parameters**  \nalert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n  \n  \n**Return value**  \nIf the alert type was disabled (false if it was already disabled)."
},
"is_alert_enabled": {
"name": "is_alert_enabled",
"returns": "boolean",
"args": {
"alert_type": {
"name": "alert_type",
"type": "defines.alert_type",
"doc": "alert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)"
}
},
"type": "function",
"doc": "If the given alert type is currently enabled.  \n  \n**Parameters**  \nalert_type :: [defines.alert_type](https://lua-api.factorio.com/latest/defines.html#defines.alert_type)  \n  \n"
},
"pipette_entity": {
"name": "pipette_entity",
"returns": "boolean",
"args": {
"entity": {
"name": "entity",
"type": "stringorLuaEntityorLuaEntityPrototype",
"doc": "entity :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html)"
}
},
"type": "function",
"doc": "Invokes the \"smart pipette\" action on the player as if the user pressed it.  \n  \n**Parameters**  \nentity :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) or [LuaEntityPrototype](https://lua-api.factorio.com/latest/LuaEntityPrototype.html)  \n  \n  \n**Return value**  \nIf the smart pipette found something to place"
},
"can_place_entity": {
"name": "can_place_entity",
"returns": "boolean",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the entity to check  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n"
}
},
"type": "function",
"doc": "Checks if this player can build the give entity at the given location on the surface the player is on.  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the entity to check  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  \n  \n"
},
"can_build_from_cursor": {
"name": "can_build_from_cursor",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "Table with the following fields:   \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  * alt :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If alt build should be used instead of normal build. Defaults to normal.  \n  * terrain_building_size :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The size for building terrain if building terrain. Defaults to 2.  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n"
}
},
"type": "function",
"doc": "Checks if this player can build what ever is in the cursor on the surface the player is on.  \n  \n**Parameters**  \nTable with the following fields:   \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  + alt :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If alt build should be used instead of normal build. Defaults to normal.  \n  + terrain_building_size :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The size for building terrain if building terrain. Defaults to 2.  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  \n  \n"
},
"build_from_cursor": {
"name": "build_from_cursor",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "Table with the following fields:   \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  * alt :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If alt build should be used instead of normal build. Defaults to normal.  \n  * terrain_building_size :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The size for building terrain if building terrain. Defaults to 2.  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n"
}
},
"type": "function",
"doc": "Builds what ever is in the cursor on the surface the player is on.  \n  \n**Parameters**  \nTable with the following fields:   \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  + alt :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If alt build should be used instead of normal build. Defaults to normal.  \n  + terrain_building_size :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The size for building terrain if building terrain. Defaults to 2.  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  \n  \n"
},
"use_from_cursor": {
"name": "use_from_cursor",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the item would be used."
}
},
"type": "function",
"doc": "Uses the current item in the cursor if it's a capsule or does nothing if not.  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the item would be used.  \n  \n"
},
"play_sound": {
"name": "play_sound",
"returns": "boolean",
"args": {
"path": {
"name": "path",
"type": "SoundPath",
"doc": "Table with the following fields:   \n  * path :: [SoundPath](https://lua-api.factorio.com/latest/Concepts.html#SoundPath) :  The sound to play  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Where the sound should be played. If not given it's played 'everywhere'.  \n  * volume_modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Must be between 0 and 1 inclusive.  \n"
}
},
"type": "function",
"doc": "Plays a sound for this player  \n  \n**Parameters**  \nTable with the following fields:   \n  + path :: [SoundPath](https://lua-api.factorio.com/latest/Concepts.html#SoundPath) :  The sound to play  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Where the sound should be played. If not given it's played 'everywhere'.  \n  + volume_modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Must be between 0 and 1 inclusive.  \n  \n  \n"
},
"get_associated_characters": {
"name": "get_associated_characters",
"returns": "array ofLuaEntity",
"type": "function",
"doc": "The characters associated with this player.  \n"
},
"associate_character": {
"name": "associate_character",
"args": {
"character": {
"name": "character",
"type": "LuaEntity",
"doc": "character :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The character entity."
}
},
"type": "function",
"doc": "Associates a character with this player.  \n  \n**Parameters**  \ncharacter :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The character entity.  \n  \n"
},
"disassociate_character": {
"name": "disassociate_character",
"args": {
"character": {
"name": "character",
"type": "LuaEntity",
"doc": "character :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The character entity"
}
},
"type": "function",
"doc": "Disassociates a character from this player.\n This is functionally the same as setting [LuaEntity::associated_player](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.associated_player) to ````nil```` .  \n  \n**Parameters**  \ncharacter :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The character entity  \n  \n"
},
"create_local_flying_text": {
"name": "create_local_flying_text",
"args": {
"text": {
"name": "text",
"type": "LocalisedString",
"doc": "Table with the following fields:   \n  * text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \n  * create_at_cursor :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  * speed :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Movement per second  \n"
}
},
"type": "function",
"doc": "Spawn a flying text that is only visible to this player.  \n  \n**Parameters**  \nTable with the following fields:   \n  + text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \n  + create_at_cursor :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  + color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  + speed :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Movement per second  \n  \n  \n"
},
"get_quick_bar_slot": {
"name": "get_quick_bar_slot",
"returns": "LuaItemPrototype",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc."
}
},
"type": "function",
"doc": "Gets the quick bar filter for the given slot or ````nil```` .  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.  \n  \n"
},
"set_quick_bar_slot": {
"name": "set_quick_bar_slot",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc."
},
"filter": {
"name": "filter",
"type": "stringorLuaItemPrototypeorLuaItemStack",
"doc": "filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaItemPrototype](https://lua-api.factorio.com/latest/LuaItemPrototype.html) or [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) :  The filter or ````nil```` ."
}
},
"type": "function",
"doc": "Sets the quick bar filter for the given slot.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.  \n* filter :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaItemPrototype](https://lua-api.factorio.com/latest/LuaItemPrototype.html) or [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) :  The filter or ````nil```` .  \n  \n"
},
"get_active_quick_bar_page": {
"name": "get_active_quick_bar_page",
"returns": "uint8",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change."
}
},
"type": "function",
"doc": "Gets which quick bar page is being used for the given screen page or ````nil```` if not known.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.  \n  \n"
},
"set_active_quick_bar_page": {
"name": "set_active_quick_bar_page",
"args": {
"screen_index": {
"name": "screen_index",
"type": "uint",
"doc": "screen_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change."
},
"page_index": {
"name": "page_index",
"type": "uint",
"doc": "page_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The new quick bar page."
}
},
"type": "function",
"doc": "Sets which quick bar page is being used for the given screen page.  \n  \n**Parameters**  \n* screen_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.  \n* page_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The new quick bar page.  \n  \n"
},
"jump_to_cutscene_waypoint": {
"name": "jump_to_cutscene_waypoint",
"args": {
"waypoint_index": {
"name": "waypoint_index",
"type": "uint",
"doc": "waypoint_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Jump to the specified cutscene waypoint. Only works when the player is viewing a cutscene.  \n  \n**Parameters**  \nwaypoint_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"exit_cutscene": {
"name": "exit_cutscene",
"type": "function",
"doc": "Exit the current cutscene. Errors if not in a cutscene.  \n"
},
"open_map": {
"name": "open_map",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
},
"scale": {
"name": "scale",
"type": "double",
"doc": "scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)"
}
},
"type": "function",
"doc": "Queues a request to open the map at the specified position. If the map is already opened, the request will simply set the position (and scale).\n Render mode change requests are processed before rendering of the next frame.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n* scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  \n"
},
"zoom_to_world": {
"name": "zoom_to_world",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
},
"scale": {
"name": "scale",
"type": "double",
"doc": "scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)"
}
},
"type": "function",
"doc": "Queues a request to zoom to world at the specified position. If the player is already zooming to world, the request will simply set the position (and scale).\n Render mode change requests are processed before rendering of the next frame.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n* scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  \n"
},
"close_map": {
"name": "close_map",
"type": "function",
"doc": "Queues request to switch to the normal game view from the map or zoom to world view.\n Render mode change requests are processed before rendering of the next frame.  \n"
},
"is_shortcut_toggled": {
"name": "is_shortcut_toggled",
"returns": "boolean",
"args": {
"prototype_name": {
"name": "prototype_name",
"type": "string",
"doc": "prototype_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the custom shortcut."
}
},
"type": "function",
"doc": "Is a custom shortcut currently toggled?  \n  \n**Parameters**  \nprototype_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the custom shortcut.  \n  \n"
},
"is_shortcut_available": {
"name": "is_shortcut_available",
"returns": "boolean",
"args": {
"prototype_name": {
"name": "prototype_name",
"type": "string",
"doc": "prototype_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the custom shortcut."
}
},
"type": "function",
"doc": "Is a custom shortcut currently available?  \n  \n**Parameters**  \nprototype_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the custom shortcut.  \n  \n"
},
"set_shortcut_toggled": {
"name": "set_shortcut_toggled",
"args": {
"prototype_name": {
"name": "prototype_name",
"type": "string",
"doc": "prototype_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the custom shortcut."
},
"toggled": {
"name": "toggled",
"type": "boolean",
"doc": "toggled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Toggle or untoggle a custom shortcut  \n  \n**Parameters**  \n* prototype_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the custom shortcut.  \n* toggled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"set_shortcut_available": {
"name": "set_shortcut_available",
"args": {
"prototype_name": {
"name": "prototype_name",
"type": "string",
"doc": "prototype_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the custom shortcut."
},
"available": {
"name": "available",
"type": "boolean",
"doc": "available :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Make a custom shortcut available or unavailable.  \n  \n**Parameters**  \n* prototype_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the custom shortcut.  \n* available :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"connect_to_server": {
"name": "connect_to_server",
"args": {
"address": {
"name": "address",
"type": "string",
"doc": "Table with the following fields:   \n  * address :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The server (address:port) if port is not given the default Factorio port is used.  \n  * name :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The name of the server.  \n  * description :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n  * password :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The password if different from the one used to join this game.\n                                       Note, if the current password is not empty but the one required to join the new server is\n                                       an empty string should be given for this field.  \n"
}
},
"type": "function",
"doc": "Asks the player if they would like to connect to the given server.  \n  \n**Parameters**  \nTable with the following fields:   \n  + address :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The server (address:port) if port is not given the default Factorio port is used.  \n  + name :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional) :  The name of the server.  \n  + description :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) (optional)  \n  + password :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  The password if different from the one used to join this game.\n                                       Note, if the current password is not empty but the one required to join the new server is\n                                       an empty string should be given for this field.  \n  \n  \n"
},
"toggle_map_editor": {
"name": "toggle_map_editor",
"type": "function",
"doc": "Toggles this player into or out of the map editor.\n Does nothing if this player isn't an admin or if the player doesn't have permission to use the map editor.  \n"
},
"request_translation": {
"name": "request_translation",
"returns": "boolean",
"args": {
"localised_string": {
"name": "localised_string",
"type": "LocalisedString",
"doc": "localised_string :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
}
},
"type": "function",
"doc": "Requests a translation for the given localised string.\n If the request is successful the [on_string_translated](https://lua-api.factorio.com/latest/events.html#on_string_translated) event will be fired at a later time with the results.  \n  \n**Parameters**  \nlocalised_string :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n  \n  \n**Return value**  \nIf the request was sent or not."
},
"get_infinity_inventory_filter": {
"name": "get_infinity_inventory_filter",
"returns": "InfinityInventoryFilter",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to get."
}
},
"type": "function",
"doc": "Gets the filter for this map editor infinity filters at the given index or ````nil```` if the filter index doesn't exist or is empty.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to get.  \n  \n"
},
"set_infinity_inventory_filter": {
"name": "set_infinity_inventory_filter",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to set."
},
"filter": {
"name": "filter",
"type": "InfinityInventoryFilter",
"doc": "filter :: [InfinityInventoryFilter](https://lua-api.factorio.com/latest/Concepts.html#InfinityInventoryFilter) :  The new filter or ````nil```` to clear the filter."
}
},
"type": "function",
"doc": "Sets the filter for this map editor infinity filters at the given index.  \n  \n**Parameters**  \n* index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The index to set.  \n* filter :: [InfinityInventoryFilter](https://lua-api.factorio.com/latest/Concepts.html#InfinityInventoryFilter) :  The new filter or ````nil```` to clear the filter.  \n  \n  \n_Can only be used if this is InfinityContainer_"
},
"clear_recipe_notifications": {
"name": "clear_recipe_notifications",
"type": "function",
"doc": "Clears all the recipe notifications for this player  \n"
},
"add_recipe_notification": {
"name": "add_recipe_notification",
"args": {
"string": {
"name": "string",
"doc": "string :  Name of the prototype to add"
}
},
"type": "function",
"doc": "Adds the given recipe to the list of recipe notifications for this player.  \n  \n**Parameters**  \nstring :  Name of the prototype to add  \n  \n"
},
"add_to_clipboard": {
"name": "add_to_clipboard",
"args": {
"LuaItemStack": {
"name": "LuaItemStack",
"doc": "LuaItemStack :  Blueprint to add"
}
},
"type": "function",
"doc": "Adds the given blueprint to the player's clipboard queue.  \n  \n**Parameters**  \nLuaItemStack :  Blueprint to add  \n  \n"
},
"activate_paste": {
"name": "activate_paste",
"type": "function",
"doc": "Gets a copy of the currently selected blueprint in the clipboard queue into the player's cursor, as if the player activated Paste.  \n"
},
"character": {
"name": "character",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The character attached to this player, or ````nil```` if no character.  \n **Note:** Will also return ````nil```` when the player is disconnected (see [LuaPlayer::connected](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected) )."
},
"cutscene_character": {
"name": "cutscene_character",
"type": "LuaEntity",
"mode": "[R]",
"doc": "When in a cutscene; the character this player would be using once the cutscene is over.  \n **Note:** Will also return ````nil```` when the player is disconnected (see [LuaPlayer::connected](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.connected) )."
},
"index": {
"name": "index",
"type": "uint",
"mode": "[R]",
"doc": "This player's index in [LuaGameScript::players](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.players) .  \n"
},
"gui": {
"name": "gui",
"type": "LuaGui",
"mode": "[R]"
},
"opened_self": {
"name": "opened_self",
"type": "boolean",
"mode": "[R]",
"doc": "````true```` if the player opened itself. I.e. if they opened the character or god-controller GUI.  \n"
},
"controller_type": {
"name": "controller_type",
"type": "defines.controllers",
"mode": "[R]"
},
"stashed_controller_type": {
"name": "stashed_controller_type",
"type": "defines.controllers",
"mode": "[R]",
"doc": "The stashed controller type or ````nil```` if no controller is stashed.  \n **Note:** This is mainly useful when a player is in the map editor."
},
"game_view_settings": {
"name": "game_view_settings",
"type": "GameViewSettings",
"mode": "[RW]",
"doc": "The player's game view settings.  \n"
},
"minimap_enabled": {
"name": "minimap_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the minimap is visible.  \n"
},
"color": {
"name": "color",
"type": "Color",
"mode": "[RW]",
"doc": "The color associated with the player. This will be used to tint the player's character as well as their\n buildings and vehicles.  \n"
},
"chat_color": {
"name": "chat_color",
"type": "Color",
"mode": "[RW]",
"doc": "The color used when this player talks in game.  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "The player's username.  \n"
},
"tag": {
"name": "tag",
"type": "string",
"mode": "[RW]",
"doc": "The tag that is shown after the player in chat and on the map.  \n"
},
"connected": {
"name": "connected",
"type": "boolean",
"mode": "[R]",
"doc": "````true```` if the player is currently connected to the game.  \n"
},
"admin": {
"name": "admin",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the player is an admin.  \n **Note:** Trying to change player admin status from the console when you aren't an admin does nothing."
},
"entity_copy_source": {
"name": "entity_copy_source",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The source entity used during entity settings copy-paste if any.  \n ````nil```` if there isn't currently a source entity.  \n"
},
"afk_time": {
"name": "afk_time",
"type": "uint",
"mode": "[R]",
"doc": "How many ticks since the last action of this player  \n"
},
"online_time": {
"name": "online_time",
"type": "uint",
"mode": "[R]",
"doc": "How many ticks did this player spend playing this save (all sessions combined)  \n"
},
"last_online": {
"name": "last_online",
"type": "uint",
"mode": "[R]",
"doc": "At what tick this player was last online.  \n"
},
"permission_group": {
"name": "permission_group",
"type": "LuaPermissionGroup",
"mode": "[RW]",
"doc": "The permission group this player is part of or ````nil```` if not part of any group.  \n"
},
"mod_settings": {
"name": "mod_settings",
"type": "CustomDictionarystring\u2192ModSetting",
"mode": "[R]",
"doc": "**Note:** This can become invalid if during operation this player becomes invalid."
},
"ticks_to_respawn": {
"name": "ticks_to_respawn",
"type": "uint",
"mode": "[RW]",
"doc": "The number of ticks until this player will respawn or ````nil```` if not waiting to respawn.  \n **Note:** Set to ````nil```` to immediately respawn the player. **Note:** Set to any positive value to trigger the respawn state for this player."
},
"display_resolution": {
"name": "display_resolution",
"type": "DisplayResolution",
"mode": "[R]",
"doc": "The display resolution for this player.  \n"
},
"display_scale": {
"name": "display_scale",
"type": "double",
"mode": "[R]",
"doc": "The display scale for this player.  \n"
},
"blueprint_to_setup": {
"name": "blueprint_to_setup",
"type": "LuaItemStack",
"mode": "[R]",
"doc": "The item stack containing a blueprint to be setup.  \n"
},
"render_mode": {
"name": "render_mode",
"type": "defines.render_mode",
"mode": "[R]",
"doc": "The render mode of the player, like map or zoom to world.\n The render mode can be set using [LuaPlayer::open_map](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.open_map) , [LuaPlayer::zoom_to_world](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.zoom_to_world) and [LuaPlayer::close_map](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.close_map) .  \n"
},
"spectator": {
"name": "spectator",
"type": "boolean",
"mode": "[RW]",
"doc": "If ````true```` , zoom-to-world noise effect will be disabled and environmental sounds will be based\n on zoom-to-world view instead of position of player's character.  \n"
},
"remove_unfiltered_items": {
"name": "remove_unfiltered_items",
"type": "boolean",
"mode": "[RW]",
"doc": "If items not included in this map editor infinity inventory filters should be removed.  \n"
},
"infinity_inventory_filters": {
"name": "infinity_inventory_filters",
"type": "array ofInfinityInventoryFilter",
"mode": "[RW]",
"doc": "The filters for this map editor infinity inventory settings.  \n"
},
"auto_sort_main_inventory": {
"name": "auto_sort_main_inventory",
"type": "boolean",
"mode": "[R]",
"doc": "If the main inventory will be auto sorted.  \n"
},
"hand_location": {
"name": "hand_location",
"type": "ItemStackLocation",
"mode": "[RW]",
"doc": "The original location of the item in the cursor, marked with a hand.\n When writing, the specified inventory slot must be empty and the cursor stack must not be empty.  \n"
},
"zoom": {
"name": "zoom",
"type": "double",
"mode": "[W]",
"doc": "The player's zoom-level.  \n"
},
"map_view_settings": {
"name": "map_view_settings",
"type": "MapViewSettings",
"mode": "[W]",
"doc": "The player's map view settings. To write to this, use a table containing the fields that should be changed.  \n"
},
"get_inventory": {
"name": "get_inventory",
"returns": "LuaInventory",
"args": {
"inventory": {
"name": "inventory",
"type": "defines.inventory",
"doc": "inventory :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)"
}
},
"type": "function",
"doc": "Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary\n one, like the module slots or logistic trash slots.  \n  \n**Parameters**  \ninventory :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n  \n  \n**Return value**  \nor ````nil```` if this entity doesn't have an inventory with the given index."
},
"get_main_inventory": {
"name": "get_main_inventory",
"returns": "LuaInventory",
"type": "function",
"doc": "Gets the main inventory for this character or player if this is a character or player.  \n  \n**Return value**  \nor ````nil```` if this entity is not a character or player."
},
"can_insert": {
"name": "can_insert",
"returns": "boolean",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items that would be inserted."
}
},
"type": "function",
"doc": "Can at least some items be inserted?  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items that would be inserted.  \n  \n  \n**Return value**  \n````true```` if at least a part of the given items could be inserted into this inventory."
},
"insert": {
"name": "insert",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert."
}
},
"type": "function",
"doc": "Insert items into this entity. This works the same way as inserters or shift-clicking: the \"best\"\n inventory is chosen automatically.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert.  \n  \n  \n**Return value**  \nNumber of items actually inserted."
},
"set_gui_arrow": {
"name": "set_gui_arrow",
"args": {
"type": {
"name": "type",
"type": "string",
"doc": "Table with the following fields:   \n  * type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Where to point to. This field determines what other fields are mandatory.\n     May be ````\"nowhere\"```` , ````\"goal\"```` , ````\"entity_info\"```` , ````\"active_window\"```` , ````\"entity\"```` , ````\"position\"```` , ````\"crafting_queue\"```` , or ````\"item_stack\"```` .  \n  * Additional ````type```` -specific parameters   \n    + entity   \n      - entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n    + position   \n      - position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n    + crafting_queue   \n      - crafting_queueindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n    + item_stack   \n      - inventory_index :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n      - item_stack_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n      - source :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  May be either ````\"player\"```` or ````\"target\"```` .  \n  \n  \n"
}
},
"type": "function",
"doc": "Create an arrow which points at this entity. This is used in the tutorial. For examples, see ````control.lua```` in the campaign missions.  \n  \n**Parameters**  \nTable with the following fields:   \n  + type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Where to point to. This field determines what other fields are mandatory.\n     May be ````\"nowhere\"```` , ````\"goal\"```` , ````\"entity_info\"```` , ````\"active_window\"```` , ````\"entity\"```` , ````\"position\"```` , ````\"crafting_queue\"```` , or ````\"item_stack\"```` .  \n  + Additional ````type```` -specific parameters   \n    - entity   \n      * entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n    - position   \n      * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n    - crafting_queue   \n      * crafting_queueindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n    - item_stack   \n      * inventory_index :: [defines.inventory](https://lua-api.factorio.com/latest/defines.html#defines.inventory)  \n      * item_stack_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n      * source :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  May be either ````\"player\"```` or ````\"target\"```` .  \n  \n  \n  \n  \n"
},
"clear_gui_arrow": {
"name": "clear_gui_arrow",
"type": "function",
"doc": "Removes the arrow created by ````set_gui_arrow```` .  \n"
},
"get_item_count": {
"name": "get_item_count",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items."
}
},
"type": "function",
"doc": "Get the number of all or some items in this entity.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items.  \n  \n"
},
"has_items_inside": {
"name": "has_items_inside",
"returns": "boolean",
"type": "function",
"doc": "Does this entity have any item inside it?  \n"
},
"can_reach_entity": {
"name": "can_reach_entity",
"returns": "boolean",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
}
},
"type": "function",
"doc": "Can a given entity be opened or accessed?  \n  \n**Parameters**  \nentity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n"
},
"clear_items_inside": {
"name": "clear_items_inside",
"type": "function",
"doc": "Remove all items from this entity.  \n"
},
"remove_item": {
"name": "remove_item",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove."
}
},
"type": "function",
"doc": "Remove items from this entity.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove.  \n  \n  \n**Return value**  \nNumber of items actually removed."
},
"teleport": {
"name": "teleport",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to teleport to."
},
"surface": {
"name": "surface",
"type": "SurfaceSpecification",
"doc": "surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Surface to teleport to. If not given, will teleport\n   to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface."
}
},
"type": "function",
"doc": "Teleport the entity to a given position, possibly on another surface.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to teleport to.  \n* surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional) :  Surface to teleport to. If not given, will teleport\n   to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.  \n  \n  \n**Return value**  \n````true```` when the entity was successfully teleported."
},
"update_selected_entity": {
"name": "update_selected_entity",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position of the entity to select"
}
},
"type": "function",
"doc": "Select an entity, as if by hovering the mouse above it.  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Position of the entity to select  \n  \n"
},
"clear_selected_entity": {
"name": "clear_selected_entity",
"type": "function",
"doc": "Unselect any selected entity.  \n"
},
"disable_flashlight": {
"name": "disable_flashlight",
"type": "function",
"doc": "Disable the flashlight.  \n"
},
"enable_flashlight": {
"name": "enable_flashlight",
"type": "function",
"doc": "Enable the flashlight.  \n"
},
"is_flashlight_enabled": {
"name": "is_flashlight_enabled",
"type": "function",
"doc": "Is the flashlight enabled.  \n"
},
"get_craftable_count": {
"name": "get_craftable_count",
"returns": "uint",
"args": {
"recipe": {
"name": "recipe",
"type": "stringorLuaRecipe",
"doc": "recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe."
}
},
"type": "function",
"doc": "Gets the count of the given recipe that can be crafted.  \n  \n**Parameters**  \nrecipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe.  \n  \n  \n**Return value**  \nThe count that can be crafted."
},
"begin_crafting": {
"name": "begin_crafting",
"returns": "uint",
"args": {
"count": {
"name": "count",
"type": "uint",
"doc": "  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to craft.  \n  * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe to craft.  \n  * silent :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n"
}
},
"type": "function",
"doc": "Begins crafting the given count of the given recipe  \n  \n**Parameters**  \n  \n  + count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to craft.  \n  + recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaRecipe](https://lua-api.factorio.com/latest/LuaRecipe.html) :  The recipe to craft.  \n  + silent :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false and the recipe can't be crafted the requested number of times printing the failure is skipped.  \n  \n  \n  \n**Return value**  \nThe count that was actually started crafting."
},
"cancel_crafting": {
"name": "cancel_crafting",
"args": {
"options": {
"name": "options",
"type": "uint",
"doc": "options : :   \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index.  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to cancel crafting.  \n"
}
},
"type": "function",
"doc": "Cancels crafting the given count of the given crafting queue index  \n  \n**Parameters**  \noptions : :   \n  + index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index.  \n  + count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count to cancel crafting.  \n  \n  \n"
},
"mine_entity": {
"name": "mine_entity",
"returns": "boolean",
"args": {
"entity": {
"name": "entity",
"type": "LuaEntity",
"doc": "entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to mine"
},
"force": {
"name": "force",
"type": "boolean",
"doc": "force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Forces mining the entity even if the items can't fit in the player."
}
},
"type": "function",
"doc": "Mines the given entity as if this player (or character) mined it.  \n  \n**Parameters**  \n* entity :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The entity to mine  \n* force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Forces mining the entity even if the items can't fit in the player.  \n  \n  \n**Return value**  \nIf the mining succeeded."
},
"mine_tile": {
"name": "mine_tile",
"returns": "boolean",
"args": {
"tile": {
"name": "tile",
"type": "LuaTile",
"doc": "tile :: [LuaTile](https://lua-api.factorio.com/latest/LuaTile.html) :  The tile to mine."
}
},
"type": "function",
"doc": "Mines the given tile as if this player (or character) mined it.  \n  \n**Parameters**  \ntile :: [LuaTile](https://lua-api.factorio.com/latest/LuaTile.html) :  The tile to mine.  \n  \n  \n**Return value**  \nIf the mining succeeded."
},
"is_player": {
"name": "is_player",
"returns": "boolean",
"type": "function",
"doc": "When ````true```` control adapter is a LuaPlayer object, ````false```` for entities including characters with players  \n"
},
"open_technology_gui": {
"name": "open_technology_gui",
"args": {
"technology": {
"name": "technology",
"type": "TechnologySpecification",
"doc": "technology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional) :  The technology to select after opening the GUI."
}
},
"type": "function",
"doc": "Open the technology GUI and select a given technology.  \n  \n**Parameters**  \ntechnology :: [TechnologySpecification](https://lua-api.factorio.com/latest/Concepts.html#TechnologySpecification) (optional) :  The technology to select after opening the GUI.  \n  \n"
},
"set_personal_logistic_slot": {
"name": "set_personal_logistic_slot",
"returns": "boolean",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/"
},
"value": {
"name": "value",
"type": "PersonalLogisticParameters",
"doc": "value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)"
}
},
"type": "function",
"doc": "Sets the personal request and trash to the given values.  \n  \n**Parameters**  \n* slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/  \n* value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)  \n  \n  \n**Return value**  \nIf the slot was set."
},
"set_vehicle_logistic_slot": {
"name": "set_vehicle_logistic_slot",
"returns": "boolean",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/"
},
"value": {
"name": "value",
"type": "PersonalLogisticParameters",
"doc": "value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)"
}
},
"type": "function",
"doc": "Sets the vehicle logistic request and trash to the given values.  \n  \n**Parameters**  \n* slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to set/  \n* value :: [PersonalLogisticParameters](https://lua-api.factorio.com/latest/Concepts.html#PersonalLogisticParameters)  \n  \n  \n**Return value**  \nIf the slot was set."
},
"get_personal_logistic_slot": {
"name": "get_personal_logistic_slot",
"returns": "PersonalLogisticParameters",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get."
}
},
"type": "function",
"doc": "Sets the personal request and trash to the given values.  \n  \n**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get.  \n  \n"
},
"get_vehicle_logistic_slot": {
"name": "get_vehicle_logistic_slot",
"returns": "PersonalLogisticParameters",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get."
}
},
"type": "function",
"doc": "Sets the vehicle logistic request and trash to the given values.  \n  \n**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to get.  \n  \n"
},
"clear_personal_logistic_slot": {
"name": "clear_personal_logistic_slot",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear."
}
},
"type": "function",
"doc": "**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear.  \n  \n"
},
"clear_vehicle_logistic_slot": {
"name": "clear_vehicle_logistic_slot",
"args": {
"slot_index": {
"name": "slot_index",
"type": "uint",
"doc": "slot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear."
}
},
"type": "function",
"doc": "**Parameters**  \nslot_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The slot to clear.  \n  \n"
},
"is_cursor_blueprint": {
"name": "is_cursor_blueprint",
"returns": "boolean",
"type": "function",
"doc": "Returns whether the player is holding a blueprint, it takes into account a blueprint as an item as well as blueprint\n from the blueprint record from the blueprint library.\n Note that the is_cursor_blueprint and get_cursor_blueprint_entities refer to the currently selected blueprint, so\n it returns blueprint related information also when holding a blueprint book with a blueprint being selected in it.  \n"
},
"get_blueprint_entities": {
"name": "get_blueprint_entities",
"returns": "array ofblueprint entity",
"type": "function",
"doc": "Returns the same type of data as LuaItemStack::readBlueprintEntities, but works for the currently selected blueprint,\n regardless of it being in a blueprint book or picked from the blueprint library.  \n"
},
"surface": {
"name": "surface",
"type": "LuaSurface",
"mode": "[R]",
"doc": "The surface this entity is currently on.  \n"
},
"position": {
"name": "position",
"type": "Position",
"mode": "[R]",
"doc": "Current position of the entity.  \n"
},
"vehicle": {
"name": "vehicle",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The vehicle the player is currently sitting in; ````nil```` if none.  \n"
},
"force": {
"name": "force",
"type": "ForceSpecification",
"mode": "[RW]",
"doc": "The force of this entity. Reading will always give a [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) , but it is possible to\n assign either [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) to this attribute to change the force.  \n"
},
"selected": {
"name": "selected",
"type": "LuaEntity",
"mode": "[RW]",
"doc": "The currently selected entity; ````nil```` if none. Assigning an entity will select it if selectable otherwise clears selection.  \n"
},
"opened": {
"name": "opened",
"type": "LuaEntityorLuaItemStackorLuaEquipmentorLuaEquipmentGridorLuaPlayerorLuaGuiElementordefines.gui_type",
"mode": "[RW]",
"doc": "The GUI target the player currently has open; ````nil```` if none.  \n **Note:** Write supports any of the types. Read will return the entity, equipment, equipment-grid, player, element or nil."
},
"crafting_queue_size": {
"name": "crafting_queue_size",
"type": "uint",
"mode": "[R]",
"doc": "Size of the crafting queue.  \n"
},
"crafting_queue_progress": {
"name": "crafting_queue_progress",
"type": "double",
"mode": "[R]",
"doc": "The crafting queue progress [0-1]\n 0 when no recipe is being crafted.  \n"
},
"walking_state": {
"name": "walking_state",
"type": "table",
"mode": "[RW]",
"doc": "Current walking state.  \n It is a table with two fields:  \n   \n  * walking :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If ````false```` , the player is currently not walking; otherwise it's going somewhere  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) :  Direction where the player is walking  \n Example Make the player go north. Note that a one-shot action like this will only make the player walk for one tick. ````game.player.walking_state\u00a0=\u00a0{walking\u00a0=\u00a0true,\u00a0direction\u00a0=\u00a0defines.direction.north}````"
},
"riding_state": {
"name": "riding_state",
"type": "RidingState",
"mode": "[RW]",
"doc": "Current riding state of this car or the vehicle this player is riding in.  \n"
},
"mining_state": {
"name": "mining_state",
"type": "table",
"mode": "[RW]",
"doc": "Current mining state.  \n It is a table with two fields:  \n   \n  * mining :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Whether the player is mining at all  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  What tiles the player is mining; only used when the player is mining tiles (holding a tile in the cursor).  \n **Note:** When the player isn't mining tiles the player will mine what ever entity is currently selected. See [LuaControl::selected](https://lua-api.factorio.com/latest/LuaControl.html#LuaControl.selected) and [LuaControl::update_selected_entity](https://lua-api.factorio.com/latest/LuaControl.html#LuaControl.update_selected_entity) ."
},
"shooting_state": {
"name": "shooting_state",
"type": "table",
"mode": "[RW]",
"doc": "Current shooting state.  \n It is a table with two fields:  \n   \n  * state :: [defines.shooting](https://lua-api.factorio.com/latest/defines.html#defines.shooting) :  The current state  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position being shot at  \n"
},
"picking_state": {
"name": "picking_state",
"type": "boolean",
"mode": "[RW]",
"doc": "Current item-picking state.  \n"
},
"repair_state": {
"name": "repair_state",
"type": "table",
"mode": "[RW]",
"doc": "Current repair state.  \n It is a table with two fields:  \n   \n  * repairing :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  The current state  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position being repaired  \n"
},
"cursor_stack": {
"name": "cursor_stack",
"type": "LuaItemStack",
"mode": "[R]",
"doc": "The player's cursor stack, or ````nil```` if the player controller is a spectator.  \n"
},
"cursor_ghost": {
"name": "cursor_ghost",
"type": "ItemPrototypeSpecification",
"mode": "[RW]",
"doc": "The ghost prototype in the player's cursor.  \n **Note:** When read, it will be a [LuaItemPrototype](https://lua-api.factorio.com/latest/LuaItemPrototype.html) . **Note:** Items in the cursor stack will take priority over the cursor ghost."
},
"driving": {
"name": "driving",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the player is in a vehicle. Writing to this attribute puts the player in or out of a\n vehicle.  \n"
},
"crafting_queue": {
"name": "crafting_queue",
"type": "array ofCraftingQueueItem",
"mode": "[R]",
"doc": "Gets the current crafting queue items.  \n Each CraftingQueueItem is a table:  \n   \n  * index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The crafting queue index  \n  * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The recipe.  \n  * count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The count being crafted.  \n"
},
"following_robots": {
"name": "following_robots",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "The current combat robots following the character  \n **Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character(see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"cheat_mode": {
"name": "cheat_mode",
"type": "boolean",
"mode": "[RW]",
"doc": "When ````true```` hand crafting is free and instant  \n"
},
"character_crafting_speed_modifier": {
"name": "character_crafting_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_mining_speed_modifier": {
"name": "character_mining_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_additional_mining_categories": {
"name": "character_additional_mining_categories",
"type": "array ofstring",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_running_speed_modifier": {
"name": "character_running_speed_modifier",
"type": "double",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_build_distance_bonus": {
"name": "character_build_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_item_drop_distance_bonus": {
"name": "character_item_drop_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_reach_distance_bonus": {
"name": "character_reach_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_resource_reach_distance_bonus": {
"name": "character_resource_reach_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_item_pickup_distance_bonus": {
"name": "character_item_pickup_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_loot_pickup_distance_bonus": {
"name": "character_loot_pickup_distance_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_inventory_slots_bonus": {
"name": "character_inventory_slots_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_trash_slot_count_bonus": {
"name": "character_trash_slot_count_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_maximum_following_robot_count_bonus": {
"name": "character_maximum_following_robot_count_bonus",
"type": "uint",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_health_bonus": {
"name": "character_health_bonus",
"type": "float",
"mode": "[RW]",
"doc": "**Note:** When called on a [LuaPlayer](https://lua-api.factorio.com/latest/LuaPlayer.html) , it must be associated with a character (see [LuaPlayer::character](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.character) )."
},
"character_personal_logistic_requests_enabled": {
"name": "character_personal_logistic_requests_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "If personal logistic requests are enabled for this character or players character.  \n"
},
"vehicle_logistic_requests_enabled": {
"name": "vehicle_logistic_requests_enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "If personal logistic requests are enabled for this vehicle (spidertron).  \n"
},
"opened_gui_type": {
"name": "opened_gui_type",
"type": "defines.gui_type",
"mode": "[R]",
"doc": "Returns the [defines.gui_type](https://lua-api.factorio.com/latest/defines.html#defines.gui_type) or ````nil```` .  \n"
},
"build_distance": {
"name": "build_distance",
"type": "uint",
"mode": "[R]",
"doc": "The build distance of this character or max uint when not a character or player connected to a character.  \n"
},
"drop_item_distance": {
"name": "drop_item_distance",
"type": "uint",
"mode": "[R]",
"doc": "The item drop distance of this character or max uint when not a character or player connected to a character.  \n"
},
"reach_distance": {
"name": "reach_distance",
"type": "uint",
"mode": "[R]",
"doc": "The reach distance of this character or max uint when not a character or player connected to a character.  \n"
},
"item_pickup_distance": {
"name": "item_pickup_distance",
"type": "double",
"mode": "[R]",
"doc": "The item pickup distance of this character or max double when not a character or player connected to a character.  \n"
},
"loot_pickup_distance": {
"name": "loot_pickup_distance",
"type": "double",
"mode": "[R]",
"doc": "The loot pickup distance of this character or max double when not a character or player connected to a character.  \n"
},
"resource_reach_distance": {
"name": "resource_reach_distance",
"type": "double",
"mode": "[R]",
"doc": "The resource reach distance of this character or max double when not a character or player connected to a character.  \n"
},
"in_combat": {
"name": "in_combat",
"type": "boolean",
"mode": "[R]",
"doc": "If this character entity is in combat.  \n"
},
"character_running_speed": {
"name": "character_running_speed",
"type": "double",
"mode": "[R]",
"doc": "Gets the current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting.  \n"
},
"character_mining_progress": {
"name": "character_mining_progress",
"type": "double",
"mode": "[R]",
"doc": "Gets the current mining progress between 0 and 1 of this character, or 0 if they aren't mining.  \n"
}
},
"inherits": [
"Inherited from LuaControl : get_inventory , get_main_inventory , can_insert , insert , set_gui_arrow , clear_gui_arrow , get_item_count , has_items_inside , can_reach_entity , clear_items_inside , remove_item , teleport , update_selected_entity , clear_selected_entity , disable_flashlight , enable_flashlight , is_flashlight_enabled , get_craftable_count , begin_crafting , cancel_crafting , mine_entity , mine_tile , is_player , open_technology_gui , set_personal_logistic_slot , set_vehicle_logistic_slot , get_personal_logistic_slot , get_vehicle_logistic_slot , clear_personal_logistic_slot , clear_vehicle_logistic_slot , is_cursor_blueprint , get_blueprint_entities , surface , position , vehicle , force , selected , opened , crafting_queue_size , crafting_queue_progress , walking_state , riding_state , mining_state , shooting_state , picking_state , repair_state , cursor_stack , cursor_ghost , driving , crafting_queue , following_robots , cheat_mode , character_crafting_speed_modifier , character_mining_speed_modifier , character_additional_mining_categories , character_running_speed_modifier , character_build_distance_bonus , character_item_drop_distance_bonus , character_reach_distance_bonus , character_resource_reach_distance_bonus , character_item_pickup_distance_bonus , character_loot_pickup_distance_bonus , character_inventory_slots_bonus , character_trash_slot_count_bonus , character_maximum_following_robot_count_bonus , character_health_bonus , character_personal_logistic_requests_enabled , vehicle_logistic_requests_enabled , opened_gui_type , build_distance , drop_item_distance , reach_distance , item_pickup_distance , loot_pickup_distance , resource_reach_distance , in_combat , character_running_speed , character_mining_progress"
]
},
"LuaProfiler": {
"name": "LuaProfiler",
"type": "LuaProfiler",
"doc": "An object used to measure script performance.  \n **Note:** Since performance is non-deterministic these objects don't allow reading the raw time values from lua. They can be used anywhere a [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) is used.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"reset": {
"name": "reset",
"type": "function",
"doc": "Resets the clock, also restarting it.  \n"
},
"stop": {
"name": "stop",
"type": "function",
"doc": "Stops the clock.  \n"
},
"restart": {
"name": "restart",
"type": "function",
"doc": "Start the clock again, without resetting it.  \n"
},
"add": {
"name": "add",
"args": {
"other": {
"name": "other",
"type": "LuaProfiler",
"doc": "other :: [LuaProfiler](https://lua-api.factorio.com/latest/LuaProfiler.html) :  The timer to add to this timer."
}
},
"type": "function",
"doc": "Add the duration of another timer to this timer. Useful to reduce start/stop overhead when accumulating time onto many timers at once.  \n  \n**Parameters**  \nother :: [LuaProfiler](https://lua-api.factorio.com/latest/LuaProfiler.html) :  The timer to add to this timer.  \n  \n"
},
"divide": {
"name": "divide",
"args": {
"number": {
"name": "number",
"type": "double",
"doc": "number :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The number to divide by. Must be > 0."
}
},
"type": "function",
"doc": "Divides the current duration by a set value. Useful for calculating the average of many iterations.  \n  \n**Parameters**  \nnumber :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The number to divide by. Must be > 0.  \n  \n"
}
},
"inherits": []
},
"LuaProgrammableSpeakerControlBehavior": {
"name": "LuaProgrammableSpeakerControlBehavior",
"type": "LuaProgrammableSpeakerControlBehavior",
"doc": "Control behavior for programmable speakers.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"circuit_parameters": {
"name": "circuit_parameters",
"type": "ProgrammableSpeakerCircuitParameters",
"mode": "[RW]"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaRCON": {
"name": "LuaRCON",
"type": "LuaRCON",
"doc": "An interface to send messages to the calling RCON interface.  \n",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "This objects name.  \n"
},
"print": {
"name": "print",
"args": {
"message": {
"name": "message",
"type": "LocalisedString",
"doc": "message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
}
},
"type": "function",
"doc": "Print text to the calling RCON interface if any.  \n  \n**Parameters**  \nmessage :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n  \n"
}
},
"inherits": []
},
"LuaRailChainSignalControlBehavior": {
"name": "LuaRailChainSignalControlBehavior",
"type": "LuaRailChainSignalControlBehavior",
"doc": "Control behavior for rail chain signals.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"red_signal": {
"name": "red_signal",
"type": "SignalID",
"mode": "[RW]"
},
"orange_signal": {
"name": "orange_signal",
"type": "SignalID",
"mode": "[RW]"
},
"green_signal": {
"name": "green_signal",
"type": "SignalID",
"mode": "[RW]"
},
"blue_signal": {
"name": "blue_signal",
"type": "SignalID",
"mode": "[RW]"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaRailPath": {
"name": "LuaRailPath",
"type": "LuaRailPath",
"doc": "A rail path.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"size": {
"name": "size",
"type": "uint",
"mode": "[R]",
"doc": "The total number of rails in this path.  \n"
},
"current": {
"name": "current",
"type": "uint",
"mode": "[R]",
"doc": "The current rail index.  \n"
},
"total_distance": {
"name": "total_distance",
"type": "double",
"mode": "[R]",
"doc": "The total path distance.  \n"
},
"travelled_distance": {
"name": "travelled_distance",
"type": "double",
"mode": "[R]",
"doc": "The total distance travelled.  \n"
},
"rails": {
"name": "rails",
"type": "CustomDictionaryuint\u2192LuaEntity",
"mode": "[R]",
"doc": "The rails this path travels.  \n"
}
},
"inherits": []
},
"LuaRailSignalControlBehavior": {
"name": "LuaRailSignalControlBehavior",
"type": "LuaRailSignalControlBehavior",
"doc": "Control behavior for rail signals.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"red_signal": {
"name": "red_signal",
"type": "SignalID",
"mode": "[RW]"
},
"orange_signal": {
"name": "orange_signal",
"type": "SignalID",
"mode": "[RW]"
},
"green_signal": {
"name": "green_signal",
"type": "SignalID",
"mode": "[RW]"
},
"close_signal": {
"name": "close_signal",
"type": "boolean",
"mode": "[RW]",
"doc": "If this will close the rail signal based off the circuit condition.  \n"
},
"read_signal": {
"name": "read_signal",
"type": "boolean",
"mode": "[RW]",
"doc": "If this will read the rail signal state.  \n"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The circuit condition when controlling the signal through the circuit network.  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaRandomGenerator": {
"name": "LuaRandomGenerator",
"type": "LuaRandomGenerator",
"doc": "A deterministic random generator independent from the core games random generator that can be seeded and re-seeded at will.\n This random generator can be saved and loaded and will maintain its state.\n Note this is entirely different from calling [math.random](https://lua-api.factorio.com/latest/Libraries.html#math.random) () and you should be sure you actually want to use this over calling ````math.random()```` .\n If you aren't sure if you need to use this over calling ````math.random()```` then you probably don't need to use this.  \n Example Create a generator and use it to print a random number. ````global.generator\u00a0=\u00a0game.create_random_generator() game.player.print(global.generator())````",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"operator ": {
"name": "operator ",
"returns": "double",
"args": {
"lower": {
"name": "lower",
"type": "int",
"doc": "lower :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  Inclusive lower bound on the result"
},
"upper": {
"name": "upper",
"type": "int",
"doc": "upper :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  Inclusive upper bound on the result"
}
},
"type": "function",
"doc": "Generates a random number.\n If no parameters are given a number in the [0, 1) range is returned.\n If a single parameter is given a floored number in the [1, N] range is returned.\n If 2 parameters are given a floored number in the [N1, N2] range is returned.  \n  \n**Parameters**  \n* lower :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  Inclusive lower bound on the result  \n* upper :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  Inclusive upper bound on the result  \n  \n"
},
"re_seed": {
"name": "re_seed",
"args": {
"seed": {
"name": "seed",
"type": "uint",
"doc": "seed :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Re-seeds the random generator with the given value.  \n  \n**Parameters**  \nseed :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
}
},
"inherits": []
},
"LuaRecipe": {
"name": "LuaRecipe",
"type": "LuaRecipe",
"doc": "A crafting recipe. Recipes belong to forces (see [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) ) because some recipes\n are unlocked by research, and researches are per-force.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"reload": {
"name": "reload",
"type": "function",
"doc": "Reload the recipe from the prototype.  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of the recipe. This can be different than the name of the result items as there could\n be more recipes to make the same item.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]",
"doc": "Localised name of the recipe.  \n"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"prototype": {
"name": "prototype",
"type": "LuaRecipePrototype",
"mode": "[R]",
"doc": "The prototype for this recipe.  \n"
},
"enabled": {
"name": "enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Can the recipe be used?  \n"
},
"category": {
"name": "category",
"type": "string",
"mode": "[R]",
"doc": "Category of the recipe.  \n"
},
"ingredients": {
"name": "ingredients",
"type": "array ofIngredient",
"mode": "[R]",
"doc": "Ingredients for this recipe.  \n Example What the \"steel-chest\" recipe would return ````{\u00a0{type=\"item\",\u00a0name=\"steel-plate\",\u00a0amount=8}\u00a0}```` Example What the \"advanced-oil-processing\" recipe would return ````{\u00a0{type=\"fluid\",\u00a0name=\"crude-oil\",\u00a0amount=10},\u00a0{type=\"fluid\",\u00a0name=\"water\",\u00a0amount=5}\u00a0}````"
},
"products": {
"name": "products",
"type": "array ofProduct",
"mode": "[R]",
"doc": "The results of this recipe.  \n"
},
"hidden": {
"name": "hidden",
"type": "boolean",
"mode": "[R]",
"doc": "Is the recipe hidden? Hidden recipe don't show up in the crafting menu.  \n"
},
"hidden_from_flow_stats": {
"name": "hidden_from_flow_stats",
"type": "boolean",
"mode": "[RW]",
"doc": "Is the recipe hidden from flow statistics?  \n"
},
"energy": {
"name": "energy",
"type": "double",
"mode": "[R]",
"doc": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy\n is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed\n exactly equal to one.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string. This is used to sort the crafting menu.  \n"
},
"group": {
"name": "group",
"type": "LuaGroup",
"mode": "[R]",
"doc": "Group of this recipe.  \n"
},
"subgroup": {
"name": "subgroup",
"type": "LuaGroup",
"mode": "[R]",
"doc": "Subgroup of this recipe.  \n"
},
"force": {
"name": "force",
"type": "LuaForce",
"mode": "[R]",
"doc": "The force that owns this recipe.  \n"
}
},
"inherits": []
},
"LuaRecipeCategoryPrototype": {
"name": "LuaRecipeCategoryPrototype",
"type": "LuaRecipeCategoryPrototype",
"doc": "Prototype of a recipe category.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
}
},
"inherits": []
},
"LuaRecipePrototype": {
"name": "LuaRecipePrototype",
"type": "LuaRecipePrototype",
"doc": "A crafting recipe prototype.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"enabled": {
"name": "enabled",
"type": "boolean",
"mode": "[R]",
"doc": "If this recipe prototype is enabled by default (enabled at the beginning of a game).  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of the recipe. This can be different than the name of the result items as there could\n be more recipes to make the same item.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]",
"doc": "Localised name of the recipe.  \n"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"category": {
"name": "category",
"type": "string",
"mode": "[R]",
"doc": "Category of the recipe.  \n"
},
"ingredients": {
"name": "ingredients",
"type": "array ofIngredient",
"mode": "[R]",
"doc": "Ingredients for this recipe.  \n"
},
"products": {
"name": "products",
"type": "array ofProduct",
"mode": "[R]",
"doc": "The results of this recipe.  \n"
},
"main_product": {
"name": "main_product",
"type": "Product",
"mode": "[R]",
"doc": "The main product of this recipe, ````nil```` if no main product is defined.  \n"
},
"hidden": {
"name": "hidden",
"type": "boolean",
"mode": "[R]",
"doc": "Is the recipe hidden? Hidden recipe don't show up in the crafting menu.  \n"
},
"hidden_from_flow_stats": {
"name": "hidden_from_flow_stats",
"type": "boolean",
"mode": "[R]",
"doc": "Is the recipe hidden from flow statistics (item/fluid production statistics)?  \n"
},
"hidden_from_player_crafting": {
"name": "hidden_from_player_crafting",
"type": "boolean",
"mode": "[R]",
"doc": "Is the recipe hidden from player crafting? The recipe will still show up for selection in machines.  \n"
},
"always_show_made_in": {
"name": "always_show_made_in",
"type": "boolean",
"mode": "[R]",
"doc": "Should this recipe always show \"Made in\" in the tooltip?  \n"
},
"energy": {
"name": "energy",
"type": "double",
"mode": "[R]",
"doc": "Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy\n is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed\n exactly equal to one.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string. This is used to sort the crafting menu.  \n"
},
"group": {
"name": "group",
"type": "LuaGroup",
"mode": "[R]",
"doc": "Group of this recipe.  \n"
},
"subgroup": {
"name": "subgroup",
"type": "LuaGroup",
"mode": "[R]",
"doc": "Subgroup of this recipe.  \n"
},
"request_paste_multiplier": {
"name": "request_paste_multiplier",
"type": "uint",
"mode": "[R]",
"doc": "The multiplier used when this recipe is copied from an assembling machine to a requester chest.\n For each item in the recipe the item count * this value is set in the requester chest.  \n"
},
"overload_multiplier": {
"name": "overload_multiplier",
"type": "uint",
"mode": "[R]",
"doc": "Used to determine how many extra items are put into an assembling machine before it's considered \"full enough\".  \n"
},
"allow_as_intermediate": {
"name": "allow_as_intermediate",
"type": "boolean",
"mode": "[R]",
"doc": "If this recipe is enabled for the purpose of intermediate hand-crafting.  \n"
},
"allow_intermediates": {
"name": "allow_intermediates",
"type": "boolean",
"mode": "[R]",
"doc": "If this recipe is allowed to use intermediate recipes when hand-crafting.  \n"
},
"show_amount_in_title": {
"name": "show_amount_in_title",
"type": "boolean",
"mode": "[R]",
"doc": "If the amount is shown in the recipe tooltip title when the recipe produces more than 1 product.  \n"
},
"always_show_products": {
"name": "always_show_products",
"type": "boolean",
"mode": "[R]",
"doc": "If the products are always shown in the recipe tooltip.  \n"
},
"emissions_multiplier": {
"name": "emissions_multiplier",
"type": "double",
"mode": "[R]",
"doc": "The emissions multiplier for this recipe.  \n"
},
"allow_decomposition": {
"name": "allow_decomposition",
"type": "boolean",
"mode": "[R]",
"doc": "Is this recipe allowed to be broken down for the recipe tooltip \"Total raw\" calculations?  \n"
},
"unlock_results": {
"name": "unlock_results",
"type": "boolean",
"mode": "[R]",
"doc": "Is this recipe unlocks the result item(s) so they're shown in filter-select GUIs.  \n"
}
},
"inherits": []
},
"LuaRemote": {
"name": "LuaRemote",
"type": "LuaRemote",
"doc": "Registry of interfaces between scripts. An interface is simply a dictionary mapping names to functions. A\n script or mod can then register an interface with [LuaRemote](https://lua-api.factorio.com/latest/LuaRemote.html) , after that any script can call the\n registered functions, provided it knows the interface name and the desired function name. An instance of\n LuaRemote is available through the global object named ````remote```` .  \n Example Will register a remote interface containing two functions. Later, it will call these functions through ````remote```` . ````remote.add_interface(\"human\u00a0interactor\", {hello\u00a0=\u00a0function()\u00a0game.player.print(\"Hi!\")\u00a0end, bye\u00a0=\u00a0function(name)\u00a0game.player.print(\"Bye\u00a0\"\u00a0..\u00a0name)\u00a0end}) --\u00a0Some\u00a0time\u00a0later,\u00a0possibly\u00a0in\u00a0a\u00a0different\u00a0mod... remote.call(\"human\u00a0interactor\",\u00a0\"hello\") remote.call(\"human\u00a0interactor\",\u00a0\"bye\",\u00a0\"dear\u00a0reader\")````",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "This objects name.  \n"
},
"add_interface": {
"name": "add_interface",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the interface."
},
"functions": {
"name": "functions",
"type": "dictionarystring\u2192function",
"doc": "functions :: dictionary [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) \u2192 function :  List of functions that are members of the new interface."
}
},
"type": "function",
"doc": "Add a remote interface.  \n  \n**Parameters**  \n* name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the interface.  \n* functions :: dictionary [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) \u2192 function :  List of functions that are members of the new interface.  \n  \n"
},
"remove_interface": {
"name": "remove_interface",
"returns": "boolean",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the interface."
}
},
"type": "function",
"doc": "Removes an interface with the given name.  \n  \n**Parameters**  \nname :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the interface.  \n  \n  \n**Return value**  \nIf the interface was removed. ````False```` if the interface didn't exist."
},
"call": {
"name": "call",
"returns": "Anything",
"args": {
"interface": {
"name": "interface",
"type": "string",
"doc": "interface :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Interface to look up ````function```` in."
},
"function": {
"name": "function",
"type": "string",
"doc": "function :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Function name that belongs to ````interface```` ."
},
"...": {
"name": "...",
"doc": "... :  Arguments to pass to the called function."
}
},
"type": "function",
"doc": "Call a function of an interface.  \n  \n**Parameters**  \n* interface :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Interface to look up ````function```` in.  \n* function :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Function name that belongs to ````interface```` .  \n* ... :  Arguments to pass to the called function.  \n  \n  \n**Return value**  \nAnything, including most LuaObjects."
},
"interfaces": {
"name": "interfaces",
"type": "dictionarystring\u2192dictionarystring\u2192boolean",
"mode": "[R]",
"doc": "List of all registered interfaces. For each interface name, ````remote.interfaces[name]```` is a dictionary\n mapping the interface's registered functions to the value ````true```` .  \n Example Assuming the \"human interactor\" interface is registered as above ````game.player.print(tostring(remote.interfaces[\"human\u00a0interactor\"][\"hello\"]))\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0--\u00a0prints\u00a0true game.player.print(tostring(remote.interfaces[\"human\u00a0interactor\"][\"nonexistent\"]))\u00a0\u00a0--\u00a0prints\u00a0nil````"
}
},
"inherits": []
},
"LuaRendering": {
"name": "LuaRendering",
"type": "LuaRendering",
"doc": "Allows rendering of geometric shapes, text and sprites in the game world. Each render object is identified by an id that is universally unique for the lifetime of a whole game.  \n **Note:** If an entity target of an object is destroyed or changes surface, then the object is also destroyed.",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "This objects name.  \n"
},
"draw_line": {
"name": "draw_line",
"returns": "uint64",
"args": {
"color": {
"name": "color",
"type": "Color",
"doc": "Table with the following fields:   \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  * width :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  In pixels (32 per tile).  \n  * gap_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Length of the gaps that this line has, in tiles. Default is 0.  \n  * dash_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Length of the dashes that this line has. Used only if gap_length > 0. Default is 0.  \n  * from :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * from_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````from```` is a LuaEntity.  \n  * to :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * to_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````to```` is a LuaEntity.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create a line.  \n  \n**Parameters**  \nTable with the following fields:   \n  + color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  + width :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  In pixels (32 per tile).  \n  + gap_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Length of the gaps that this line has, in tiles. Default is 0.  \n  + dash_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Length of the dashes that this line has. Used only if gap_length > 0. Default is 0.  \n  + from :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  + from_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````from```` is a LuaEntity.  \n  + to :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  + to_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````to```` is a LuaEntity.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"draw_text": {
"name": "draw_text",
"returns": "uint64",
"args": {
"text": {
"name": "text",
"type": "LocalisedString",
"doc": "Table with the following fields:   \n  * text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  The text to display.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  * scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  * font :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Name of font to use. Defaults to the same font as flying-text.  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  * orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation of the text. Default is 0.  \n  * alignment :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Defaults to \"left\". Other options are \"right\" and \"center\".  \n  * scale_with_zoom :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create a text.  \n  \n**Parameters**  \nTable with the following fields:   \n  + text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  The text to display.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  + target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  + color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  + scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional)  \n  + font :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Name of font to use. Defaults to the same font as flying-text.  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  + orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation of the text. Default is 0.  \n  + alignment :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Defaults to \"left\". Other options are \"right\" and \"center\".  \n  + scale_with_zoom :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"draw_circle": {
"name": "draw_circle",
"returns": "uint64",
"args": {
"color": {
"name": "color",
"type": "Color",
"doc": "Table with the following fields:   \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  * radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  In tiles.  \n  * width :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \n  * filled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If the circle should be filled.  \n  * target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create a circle.  \n  \n**Parameters**  \nTable with the following fields:   \n  + color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  + radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  In tiles.  \n  + width :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \n  + filled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If the circle should be filled.  \n  + target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  + target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"draw_rectangle": {
"name": "draw_rectangle",
"returns": "uint64",
"args": {
"color": {
"name": "color",
"type": "Color",
"doc": "Table with the following fields:   \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  * width :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \n  * filled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If the rectangle should be filled.  \n  * left_top :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * left_top_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````left_top```` is a LuaEntity.  \n  * right_bottom :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * right_bottom_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````right_bottom```` is a LuaEntity.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create a rectangle.  \n  \n**Parameters**  \nTable with the following fields:   \n  + color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  + width :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  Width of the outline, used only if filled = false. Value is in pixels (32 per tile).  \n  + filled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If the rectangle should be filled.  \n  + left_top :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  + left_top_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````left_top```` is a LuaEntity.  \n  + right_bottom :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  + right_bottom_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````right_bottom```` is a LuaEntity.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"draw_arc": {
"name": "draw_arc",
"returns": "uint64",
"args": {
"color": {
"name": "color",
"type": "Color",
"doc": "Table with the following fields:   \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  * max_radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The radius of the outer edge of the arc, in tiles.  \n  * min_radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The radius of the inner edge of the arc, in tiles.  \n  * start_angle :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Where the arc starts, in radian.  \n  * angle :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  The angle of the arc, in radian.  \n  * target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create an arc.  \n  \n**Parameters**  \nTable with the following fields:   \n  + color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  + max_radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The radius of the outer edge of the arc, in tiles.  \n  + min_radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The radius of the inner edge of the arc, in tiles.  \n  + start_angle :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Where the arc starts, in radian.  \n  + angle :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  The angle of the arc, in radian.  \n  + target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  + target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"draw_polygon": {
"name": "draw_polygon",
"returns": "uint64",
"args": {
"color": {
"name": "color",
"type": "Color",
"doc": "Table with the following fields:   \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  * vertices :: array of CustomScriptRenderTarget :   \n    + target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n    + target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  \n  * target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  Acts like an offset applied to all vertices that are not set to an entity.  \n  * target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  * orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation applied to all vertices. Default is 0.  \n  * orientation_target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that ````orientation```` is still applied.  \n  * orientation_target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````orientation_target```` is a LuaEntity.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create a polygon.  \n  \n**Parameters**  \nTable with the following fields:   \n  + color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  + vertices :: array of CustomScriptRenderTarget :   \n    - target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n    - target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  \n  + target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  Acts like an offset applied to all vertices that are not set to an entity.  \n  + target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  + orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation applied to all vertices. Default is 0.  \n  + orientation_target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that ````orientation```` is still applied.  \n  + orientation_target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````orientation_target```` is a LuaEntity.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should be drawn below sprites and entities.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"draw_sprite": {
"name": "draw_sprite",
"returns": "uint64",
"args": {
"sprite": {
"name": "sprite",
"type": "SpritePath",
"doc": "Table with the following fields:   \n  * sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \n  * orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation of the sprite. Default is 0.  \n  * x_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Horizontal scale of the sprite. Default is 1.  \n  * y_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Vertical scale of the sprite. Default is 1.  \n  * tint :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  * render_layer :: [RenderLayer](https://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \n  * orientation_target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  If given, the sprite rotates so that it faces this target. Note that ````orientation```` is still applied to the sprite.  \n  * orientation_target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````orientation_target```` is a LuaEntity.  \n  * oriented_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Offsets the center of the sprite if ````orientation_target```` is given. This offset will rotate together with the sprite.  \n  * target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Center of the sprite.  \n  * target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create a sprite.  \n  \n**Parameters**  \nTable with the following fields:   \n  + sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \n  + orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation of the sprite. Default is 0.  \n  + x_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Horizontal scale of the sprite. Default is 1.  \n  + y_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Vertical scale of the sprite. Default is 1.  \n  + tint :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  + render_layer :: [RenderLayer](https://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \n  + orientation_target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  If given, the sprite rotates so that it faces this target. Note that ````orientation```` is still applied to the sprite.  \n  + orientation_target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````orientation_target```` is a LuaEntity.  \n  + oriented_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Offsets the center of the sprite if ````orientation_target```` is given. This offset will rotate together with the sprite.  \n  + target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Center of the sprite.  \n  + target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"draw_light": {
"name": "draw_light",
"returns": "uint64",
"args": {
"sprite": {
"name": "sprite",
"type": "SpritePath",
"doc": "Table with the following fields:   \n  * sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \n  * orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation of the light. Default is 0.  \n  * scale :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  Default is 1.  \n  * intensity :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  Default is 1.  \n  * minimum_darkness :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The minimum darkness at which this light is rendered. Default is 0.  \n  * oriented :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this light has the same orientation as the entity target, default is false. Note that ````orientation```` is still applied to the sprite.  \n  * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional) :  Defaults to white (no tint).  \n  * target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Center of the light.  \n  * target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create a light.  \n  \n**Parameters**  \nTable with the following fields:   \n  + sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \n  + orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation of the light. Default is 0.  \n  + scale :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  Default is 1.  \n  + intensity :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  Default is 1.  \n  + minimum_darkness :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The minimum darkness at which this light is rendered. Default is 0.  \n  + oriented :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this light has the same orientation as the entity target, default is false. Note that ````orientation```` is still applied to the sprite.  \n  + color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional) :  Defaults to white (no tint).  \n  + target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Center of the light.  \n  + target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"draw_animation": {
"name": "draw_animation",
"returns": "uint64",
"args": {
"animation": {
"name": "animation",
"type": "string",
"doc": "Table with the following fields:   \n  * animation :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of an [animation prototype](https://lua-api.factorio.com/latest/https://wiki.factorio.com/Prototype/Animation) .  \n  * orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation of the animation. Default is 0.  \n  * x_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Horizontal scale of the animation. Default is 1.  \n  * y_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Vertical scale of the animation. Default is 1.  \n  * tint :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  * render_layer :: [RenderLayer](https://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \n  * animation_speed :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  How many frames the animation goes forward per tick. Default is 1.  \n  * animation_offset :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Offset of the animation in frames. Default is 0.  \n  * orientation_target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  If given, the animation rotates so that it faces this target. Note that ````orientation```` is still applied to the animation.  \n  * orientation_target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````orientation_target```` is a LuaEntity.  \n  * oriented_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Offsets the center of the animation if ````orientation_target```` is given. This offset will rotate together with the animation.  \n  * target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Center of the animation.  \n  * target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  * surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  * forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  * players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  * visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  * only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n"
}
},
"type": "function",
"doc": "Create an animation.  \n  \n**Parameters**  \nTable with the following fields:   \n  + animation :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of an [animation prototype](https://lua-api.factorio.com/latest/https://wiki.factorio.com/Prototype/Animation) .  \n  + orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) (optional) :  The orientation of the animation. Default is 0.  \n  + x_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Horizontal scale of the animation. Default is 1.  \n  + y_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Vertical scale of the animation. Default is 1.  \n  + tint :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  + render_layer :: [RenderLayer](https://lua-api.factorio.com/latest/Concepts.html#RenderLayer) (optional)  \n  + animation_speed :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  How many frames the animation goes forward per tick. Default is 1.  \n  + animation_offset :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Offset of the animation in frames. Default is 0.  \n  + orientation_target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  If given, the animation rotates so that it faces this target. Note that ````orientation```` is still applied to the animation.  \n  + orientation_target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````orientation_target```` is a LuaEntity.  \n  + oriented_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Offsets the center of the animation if ````orientation_target```` is given. This offset will rotate together with the animation.  \n  + target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  Center of the animation.  \n  + target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Only used if ````target```` is a LuaEntity.  \n  + surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification)  \n  + time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  In ticks. Defaults to living forever.  \n  + forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The forces that this object is rendered to.  \n  + players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The players that this object is rendered to.  \n  + visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this is rendered to anyone at all. Defaults to true.  \n  + only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If this should only be rendered in alt mode. Defaults to false.  \n  \n  \n  \n**Return value**  \nId of the render object"
},
"destroy": {
"name": "destroy",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Destroy the object with the given id.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"is_font_valid": {
"name": "is_font_valid",
"returns": "boolean",
"args": {
"font_name": {
"name": "font_name",
"type": "string",
"doc": "font_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)"
}
},
"type": "function",
"doc": "Does a font with this name exist?  \n  \n**Parameters**  \nfont_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  \n"
},
"is_valid": {
"name": "is_valid",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Does a valid object with this id exist?  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"get_all_ids": {
"name": "get_all_ids",
"returns": "array ofuint64",
"args": {
"mod_name": {
"name": "mod_name",
"type": "string",
"doc": "mod_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If provided, get only the render objects created by this mod."
}
},
"type": "function",
"doc": "Gets an array of all valid object ids.  \n  \n**Parameters**  \nmod_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If provided, get only the render objects created by this mod.  \n  \n"
},
"clear": {
"name": "clear",
"args": {
"mod_name": {
"name": "mod_name",
"type": "string",
"doc": "mod_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If provided, only the render objects created by this mod are destroyed."
}
},
"type": "function",
"doc": "Destroys all render objects.  \n  \n**Parameters**  \nmod_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  If provided, only the render objects created by this mod are destroyed.  \n  \n"
},
"get_type": {
"name": "get_type",
"returns": "string",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Gets the type of the given object. The types are \"text\", \"line\", \"circle\", \"rectangle\", \"arc\", \"polygon\", \"sprite\", \"light\" and \"animation\".  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"bring_to_front": {
"name": "bring_to_front",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Reorder this object so that it is drawn in front of the already existing objects.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"get_surface": {
"name": "get_surface",
"returns": "LuaSurface",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "The surface the object with this id is rendered on.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"get_time_to_live": {
"name": "get_time_to_live",
"returns": "uint",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the time to live of the object with this id. This will be 0 if the object does not expire.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"set_time_to_live": {
"name": "set_time_to_live",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"time_to_live": {
"name": "time_to_live",
"type": "uint",
"doc": "time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Set the time to live of the object with this id. Set to 0 if the object should not expire.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"get_forces": {
"name": "get_forces",
"returns": "array ofLuaForce",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the forces that the object with this id is rendered to or ````nil```` if visible to all forces.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"set_forces": {
"name": "set_forces",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"forces": {
"name": "forces",
"type": "array ofForceSpecification",
"doc": "forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Providing an empty array will set the object to be visible to all forces."
}
},
"type": "function",
"doc": "Set the forces that the object with this id is rendered to.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* forces :: array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Providing an empty array will set the object to be visible to all forces.  \n  \n"
},
"get_players": {
"name": "get_players",
"returns": "array ofLuaPlayer",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the players that the object with this id is rendered to or ````nil```` if visible to all players.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"set_players": {
"name": "set_players",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"players": {
"name": "players",
"type": "array ofPlayerSpecification",
"doc": "players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) :  Providing an empty array will set the object to be visible to all players."
}
},
"type": "function",
"doc": "Set the players that the object with this id is rendered to.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* players :: array of [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) :  Providing an empty array will set the object to be visible to all players.  \n  \n"
},
"get_visible": {
"name": "get_visible",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get whether this is rendered to anyone at all.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"set_visible": {
"name": "set_visible",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"visible": {
"name": "visible",
"type": "boolean",
"doc": "visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Set whether this is rendered to anyone at all.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* visible :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"get_draw_on_ground": {
"name": "get_draw_on_ground",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get whether this is being drawn on the ground, under most entities and sprites.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Text,  Line,  Circle,  Rectangle,  Arc, or  Polygon_"
},
"set_draw_on_ground": {
"name": "set_draw_on_ground",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"draw_on_ground": {
"name": "draw_on_ground",
"type": "boolean",
"doc": "draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Set whether this is being drawn on the ground, under most entities and sprites.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* draw_on_ground :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n  \n_Can only be used if this is Text,  Line,  Circle,  Rectangle,  Arc, or  Polygon_"
},
"get_only_in_alt_mode": {
"name": "get_only_in_alt_mode",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get whether this is only rendered in alt-mode.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n"
},
"set_only_in_alt_mode": {
"name": "set_only_in_alt_mode",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"only_in_alt_mode": {
"name": "only_in_alt_mode",
"type": "boolean",
"doc": "only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Set whether this is only rendered in alt-mode.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* only_in_alt_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n"
},
"get_color": {
"name": "get_color",
"returns": "Color",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the color or tint of the object with this id.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n**Return value**  \nor ````nil```` if the object does not support color.  \n_Can only be used if this is Text,  Line,  Circle,  Rectangle,  Arc,  Polygon,  Sprite,  Light, or  Animation_"
},
"set_color": {
"name": "set_color",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"color": {
"name": "color",
"type": "Color",
"doc": "color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)"
}
},
"type": "function",
"doc": "Set the color or tint of the object with this id. Does nothing if this object does not support color.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color)  \n  \n  \n_Can only be used if this is Text,  Line,  Circle,  Rectangle,  Arc,  Polygon,  Sprite,  Light, or  Animation_"
},
"get_width": {
"name": "get_width",
"returns": "float",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the width of the object with this id. Value is in pixels (32 per tile).  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n**Return value**  \nor ````nil```` if the object does not support width.  \n_Can only be used if this is Line,  Circle, or  Rectangle_"
},
"set_width": {
"name": "set_width",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"width": {
"name": "width",
"type": "float",
"doc": "width :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)"
}
},
"type": "function",
"doc": "Set the width of the object with this id. Does nothing if this object does not support width. Value is in pixels (32 per tile).  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* width :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  \n  \n_Can only be used if this is Line,  Circle, or  Rectangle_"
},
"get_from": {
"name": "get_from",
"returns": "ScriptRenderTarget",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get from where the line with this id is drawn or ````nil```` if this object is not a line.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Line_"
},
"set_from": {
"name": "set_from",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"from": {
"name": "from",
"type": "PositionorLuaEntity",
"doc": "from :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"from_offset": {
"name": "from_offset",
"type": "Vector",
"doc": "from_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
}
},
"type": "function",
"doc": "Set from where the line with this id is drawn. Does nothing if the object is not a line.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* from :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* from_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n  \n  \n_Can only be used if this is Line_"
},
"get_to": {
"name": "get_to",
"returns": "ScriptRenderTarget",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get where the line with this id is drawn to or ````nil```` if the object is not a line.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Line_"
},
"set_to": {
"name": "set_to",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"to": {
"name": "to",
"type": "PositionorLuaEntity",
"doc": "to :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"to_offset": {
"name": "to_offset",
"type": "Vector",
"doc": "to_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
}
},
"type": "function",
"doc": "Set where the line with this id is drawn to. Does nothing if this object is not a line.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* to :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* to_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n  \n  \n_Can only be used if this is Line_"
},
"get_dash_length": {
"name": "get_dash_length",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the dash length of the line with this id or ````nil```` if the object is not a line.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Line_"
},
"set_dash_length": {
"name": "set_dash_length",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"dash_length": {
"name": "dash_length",
"type": "double",
"doc": "dash_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the dash length of the line with this id. Does nothing if this object is not a line.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* dash_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Line_"
},
"get_gap_length": {
"name": "get_gap_length",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the length of the gaps in the line with this id or ````nil```` if the object is not a line.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Line_"
},
"set_gap_length": {
"name": "set_gap_length",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"gap_length": {
"name": "gap_length",
"type": "double",
"doc": "gap_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the length of the gaps in the line with this id. Does nothing if this object is not a line.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* gap_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Line_"
},
"set_dashes": {
"name": "set_dashes",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"dash_length": {
"name": "dash_length",
"type": "double",
"doc": "dash_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
},
"gap_length": {
"name": "gap_length",
"type": "double",
"doc": "gap_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the length of the dashes and the length of the gaps in the line with this id. Does nothing if this object is not a line.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* dash_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n* gap_length :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Line_"
},
"get_target": {
"name": "get_target",
"returns": "ScriptRenderTarget",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get where the object with this id is drawn or ````nil```` if the object does not support target.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Text,  Circle,  Arc,  Polygon,  Sprite,  Light, or  Animation_"
},
"set_target": {
"name": "set_target",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"target": {
"name": "target",
"type": "PositionorLuaEntity",
"doc": "target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"target_offset": {
"name": "target_offset",
"type": "Vector",
"doc": "target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
}
},
"type": "function",
"doc": "Set where the object with this id is drawn. Does nothing if this object does not support target.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n  \n  \n_Can only be used if this is Text,  Circle,  Arc,  Polygon,  Sprite,  Light, or  Animation_"
},
"get_orientation": {
"name": "get_orientation",
"returns": "float",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the orientation of the object with this id or ````nil```` if the object is not a text, polygon, sprite, light or animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Text,  Polygon,  Sprite,  Light, or  Animation_"
},
"set_orientation": {
"name": "set_orientation",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"orientation": {
"name": "orientation",
"type": "float",
"doc": "orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)"
}
},
"type": "function",
"doc": "Set the orientation of the object with this id. Does nothing if this object is not a text, polygon, sprite, light or animation.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* orientation :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  \n  \n_Can only be used if this is Text,  Polygon,  Sprite,  Light, or  Animation_"
},
"get_scale": {
"name": "get_scale",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the scale of the text or light with this id or ````nil```` if the object is not a text or light.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Text or  Light_"
},
"set_scale": {
"name": "set_scale",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"scale": {
"name": "scale",
"type": "double",
"doc": "scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the scale of the text or light with this id. Does nothing if this object is not a text or light.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Text or  Light_"
},
"get_text": {
"name": "get_text",
"returns": "LocalisedString",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the text that is displayed by the text with this id or ````nil```` if the object is not a text.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Text_"
},
"set_text": {
"name": "set_text",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"text": {
"name": "text",
"type": "LocalisedString",
"doc": "text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
}
},
"type": "function",
"doc": "Set the text that is displayed by the text with this id. Does nothing if this object is not a text.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n  \n  \n_Can only be used if this is Text_"
},
"get_font": {
"name": "get_font",
"returns": "string",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the font of the text with this id or ````nil```` if the object is not a text.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Text_"
},
"set_font": {
"name": "set_font",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"font": {
"name": "font",
"type": "string",
"doc": "font :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)"
}
},
"type": "function",
"doc": "Set the font of the text with this id. Does nothing if this object is not a text.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* font :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  \n  \n_Can only be used if this is Text_"
},
"get_alignment": {
"name": "get_alignment",
"returns": "string",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the alignment  of the text with this id or ````nil```` if the object is not a text.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Text_"
},
"set_alignment": {
"name": "set_alignment",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"alignment": {
"name": "alignment",
"type": "string",
"doc": "alignment :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  \"left\", \"right\" or \"center\"."
}
},
"type": "function",
"doc": "Set the alignment of the text with this id. Does nothing if this object is not a text.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* alignment :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  \"left\", \"right\" or \"center\".  \n  \n  \n_Can only be used if this is Text_"
},
"get_scale_with_zoom": {
"name": "get_scale_with_zoom",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get if the text with this id scales with player zoom or ````nil```` if the object is not a text.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Text_"
},
"set_scale_with_zoom": {
"name": "set_scale_with_zoom",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"scale_with_zoom": {
"name": "scale_with_zoom",
"type": "boolean",
"doc": "scale_with_zoom :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Set if the text with this id scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.\n Does nothing if this object is not a text.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* scale_with_zoom :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n  \n_Can only be used if this is Text_"
},
"get_filled": {
"name": "get_filled",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get if the circle or rectangle with this id is filled or ````nil```` if the object is not a circle or rectangle.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Circle or  Rectangle_"
},
"set_filled": {
"name": "set_filled",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"filled": {
"name": "filled",
"type": "boolean",
"doc": "filled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Set if the circle or rectangle with this id is filled. Does nothing if this object is not a circle or rectangle.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* filled :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n  \n_Can only be used if this is Circle or  Rectangle_"
},
"get_radius": {
"name": "get_radius",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the radius of the circle with this id or ````nil```` if the object is not a circle.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Circle_"
},
"set_radius": {
"name": "set_radius",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"radius": {
"name": "radius",
"type": "double",
"doc": "radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the radius of the circle with this id. Does nothing if this object is not a circle.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Circle_"
},
"get_left_top": {
"name": "get_left_top",
"returns": "ScriptRenderTarget",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get where top left corner of the rectangle with this id is drawn or ````nil```` if the object is not a rectangle.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Rectangle_"
},
"set_left_top": {
"name": "set_left_top",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"left_top": {
"name": "left_top",
"type": "PositionorLuaEntity",
"doc": "left_top :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"left_top_offset": {
"name": "left_top_offset",
"type": "Vector",
"doc": "left_top_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
}
},
"type": "function",
"doc": "Set where top left corner of the rectangle with this id is drawn. Does nothing if this object is not a rectangle.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* left_top :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* left_top_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n  \n  \n_Can only be used if this is Rectangle_"
},
"get_right_bottom": {
"name": "get_right_bottom",
"returns": "ScriptRenderTarget",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get where bottom right corner of the rectangle with this id is drawn or ````nil```` if the object is not a rectangle.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Rectangle_"
},
"set_right_bottom": {
"name": "set_right_bottom",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"right_bottom": {
"name": "right_bottom",
"type": "PositionorLuaEntity",
"doc": "right_bottom :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"right_bottom_offset": {
"name": "right_bottom_offset",
"type": "Vector",
"doc": "right_bottom_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
}
},
"type": "function",
"doc": "Set where top bottom right of the rectangle with this id is drawn. Does nothing if this object is not a rectangle.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* right_bottom :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* right_bottom_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n  \n  \n_Can only be used if this is Rectangle_"
},
"set_corners": {
"name": "set_corners",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"left_top": {
"name": "left_top",
"type": "PositionorLuaEntity",
"doc": "left_top :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"left_top_offset": {
"name": "left_top_offset",
"type": "Vector",
"doc": "left_top_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)"
},
"right_bottom": {
"name": "right_bottom",
"type": "PositionorLuaEntity",
"doc": "right_bottom :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"right_bottom_offset": {
"name": "right_bottom_offset",
"type": "Vector",
"doc": "right_bottom_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)"
}
},
"type": "function",
"doc": "Set the corners of the rectangle with this id. Does nothing if this object is not a rectangle.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* left_top :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* left_top_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n* right_bottom :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* right_bottom_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n  \n  \n_Can only be used if this is Rectangle_"
},
"get_max_radius": {
"name": "get_max_radius",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the radius of the outer edge of the arc with this id or ````nil```` if the object is not a arc.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Arc_"
},
"set_max_radius": {
"name": "set_max_radius",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"max_radius": {
"name": "max_radius",
"type": "double",
"doc": "max_radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the radius of the outer edge of the arc with this id. Does nothing if this object is not a arc.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* max_radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Arc_"
},
"get_min_radius": {
"name": "get_min_radius",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the radius of the inner edge of the arc with this id or ````nil```` if the object is not a arc.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Arc_"
},
"set_min_radius": {
"name": "set_min_radius",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"min_radius": {
"name": "min_radius",
"type": "double",
"doc": "min_radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the radius of the inner edge of the arc with this id. Does nothing if this object is not a arc.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* min_radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Arc_"
},
"get_start_angle": {
"name": "get_start_angle",
"returns": "float",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get where the arc with this id starts or ````nil```` if the object is not a arc.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n**Return value**  \nangle in radian  \n_Can only be used if this is Arc_"
},
"set_start_angle": {
"name": "set_start_angle",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"start_angle": {
"name": "start_angle",
"type": "float",
"doc": "start_angle :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  angle in radian"
}
},
"type": "function",
"doc": "Set where the arc with this id starts. Does nothing if this object is not a arc.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* start_angle :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  angle in radian  \n  \n  \n_Can only be used if this is Arc_"
},
"get_angle": {
"name": "get_angle",
"returns": "float",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the angle of the arc with this id or ````nil```` if the object is not a arc.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n**Return value**  \nangle in radian  \n_Can only be used if this is Arc_"
},
"set_angle": {
"name": "set_angle",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"angle": {
"name": "angle",
"type": "float",
"doc": "angle :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  angle in radian"
}
},
"type": "function",
"doc": "Set the angle of the arc with this id. Does nothing if this object is not a arc.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* angle :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  angle in radian  \n  \n  \n_Can only be used if this is Arc_"
},
"get_vertices": {
"name": "get_vertices",
"returns": "array ofScriptRenderTarget",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the vertices of the polygon with this id or ````nil```` if the object is not a polygon.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Polygon_"
},
"set_vertices": {
"name": "set_vertices",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"vertices": {
"name": "vertices",
"type": "array ofScriptRenderTarget",
"doc": "vertices :: array of [ScriptRenderTarget](https://lua-api.factorio.com/latest/Concepts.html#ScriptRenderTarget)"
}
},
"type": "function",
"doc": "Set the vertices of the polygon with this id. Does nothing if this object is not a polygon.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* vertices :: array of [ScriptRenderTarget](https://lua-api.factorio.com/latest/Concepts.html#ScriptRenderTarget)  \n  \n  \n_Can only be used if this is Polygon_"
},
"get_sprite": {
"name": "get_sprite",
"returns": "SpritePath",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the sprite of the sprite or light with this id or ````nil```` if the object is not a sprite or light.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Sprite or  Light_"
},
"set_sprite": {
"name": "set_sprite",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"sprite": {
"name": "sprite",
"type": "SpritePath",
"doc": "sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath)"
}
},
"type": "function",
"doc": "Set the sprite of the sprite or light with this id. Does nothing if this object is not a sprite or light.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* sprite :: [SpritePath](https://lua-api.factorio.com/latest/Concepts.html#SpritePath)  \n  \n  \n_Can only be used if this is Sprite or  Light_"
},
"get_x_scale": {
"name": "get_x_scale",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the horizontal scale of the sprite or animation with this id or ````nil```` if the object is not a sprite or animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Sprite or  Animation_"
},
"set_x_scale": {
"name": "set_x_scale",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"x_scale": {
"name": "x_scale",
"type": "double",
"doc": "x_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the horizontal scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animation.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* x_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Sprite or  Animation_"
},
"get_y_scale": {
"name": "get_y_scale",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the vertical scale of the sprite or animation with this id or ````nil```` if the object is not a sprite or animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Sprite or  Animation_"
},
"set_y_scale": {
"name": "set_y_scale",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"y_scale": {
"name": "y_scale",
"type": "double",
"doc": "y_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)"
}
},
"type": "function",
"doc": "Set the vertical scale of the sprite or animation with this id. Does nothing if this object is not a sprite or animation.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* y_scale :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n  \n_Can only be used if this is Sprite or  Animation_"
},
"get_render_layer": {
"name": "get_render_layer",
"returns": "RenderLayer",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the render layer of the sprite or animation with this id or ````nil```` if the object is not a sprite or animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Sprite or  Animation_"
},
"set_render_layer": {
"name": "set_render_layer",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"render_layer": {
"name": "render_layer",
"type": "RenderLayer",
"doc": "render_layer :: [RenderLayer](https://lua-api.factorio.com/latest/Concepts.html#RenderLayer)"
}
},
"type": "function",
"doc": "Set the render layer of the sprite or animation with this id. Does nothing if this object is not a sprite or animation.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* render_layer :: [RenderLayer](https://lua-api.factorio.com/latest/Concepts.html#RenderLayer)  \n  \n  \n_Can only be used if this is Sprite or  Animation_"
},
"get_orientation_target": {
"name": "get_orientation_target",
"returns": "ScriptRenderTarget",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "The object rotates so that it faces this target. Note that ````orientation```` is still applied to the object.\n Get the orientation_target of the object with this id or ````nil```` if no target or if this object is not a polygon, sprite, or animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Polygon,  Sprite, or  Animation_"
},
"set_orientation_target": {
"name": "set_orientation_target",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"orientation_target": {
"name": "orientation_target",
"type": "PositionorLuaEntity",
"doc": "orientation_target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
},
"orientation_target_offset": {
"name": "orientation_target_offset",
"type": "Vector",
"doc": "orientation_target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)"
}
},
"type": "function",
"doc": "The object rotates so that it faces this target. Note that ````orientation```` is still applied to the object.\n Set the orientation_target of the object with this id. Does nothing if this object is not a polygon, sprite, or animation.\n Set to ````nil```` if the object should not have an orientation_target.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* orientation_target :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) or [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n* orientation_target_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional)  \n  \n  \n_Can only be used if this is Polygon,  Sprite, or  Animation_"
},
"get_oriented_offset": {
"name": "get_oriented_offset",
"returns": "Vector",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Offsets the center of the sprite or animation if ````orientation_target```` is given. This offset will rotate together with the sprite or animation.\n Get the oriented_offset of the sprite or animation with this id or ````nil```` if this object is not a sprite or animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Sprite or  Animation_"
},
"set_oriented_offset": {
"name": "set_oriented_offset",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"oriented_offset": {
"name": "oriented_offset",
"type": "Vector",
"doc": "oriented_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)"
}
},
"type": "function",
"doc": "Offsets the center of the sprite or animation if ````orientation_target```` is given. This offset will rotate together with the sprite or animation.\n Set the oriented_offset of the sprite or animation with this id. Does nothing if this object is not a sprite or animation.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* oriented_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n  \n  \n_Can only be used if this is Sprite or  Animation_"
},
"get_intensity": {
"name": "get_intensity",
"returns": "float",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the intensity of the light with this id or ````nil```` if the object is not a light.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Light_"
},
"set_intensity": {
"name": "set_intensity",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"intensity": {
"name": "intensity",
"type": "float",
"doc": "intensity :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)"
}
},
"type": "function",
"doc": "Set the intensity of the light with this id. Does nothing if this object is not a light.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* intensity :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  \n  \n_Can only be used if this is Light_"
},
"get_minimum_darkness": {
"name": "get_minimum_darkness",
"returns": "float",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the minimum darkness at which the light with this id is rendered or ````nil```` if the object is not a light.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Light_"
},
"set_minimum_darkness": {
"name": "set_minimum_darkness",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"minimum_darkness": {
"name": "minimum_darkness",
"type": "float",
"doc": "minimum_darkness :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)"
}
},
"type": "function",
"doc": "Set the minimum darkness at which the light with this id is rendered. Does nothing if this object is not a light.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* minimum_darkness :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  \n  \n_Can only be used if this is Light_"
},
"get_oriented": {
"name": "get_oriented",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get if the light with this id is rendered has the same orientation as the target entity or ````nil```` if the object is not a light.\n Note that ````orientation```` is still applied to the sprite.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Light_"
},
"set_oriented": {
"name": "set_oriented",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"oriented": {
"name": "oriented",
"type": "boolean",
"doc": "oriented :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)"
}
},
"type": "function",
"doc": "Set if the light with this id is rendered has the same orientation as the target entity. Does nothing if this object is not a light.\n Note that ````orientation```` is still applied to the sprite.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* oriented :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean)  \n  \n  \n_Can only be used if this is Light_"
},
"get_animation": {
"name": "get_animation",
"returns": "string",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the animation prototype name of the animation with this id or ````nil```` if the object is not an animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n_Can only be used if this is Animation_"
},
"set_animation": {
"name": "set_animation",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"animation": {
"name": "animation",
"type": "string",
"doc": "animation :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)"
}
},
"type": "function",
"doc": "Set the animation prototype name of the animation with this id. Does nothing if this object is not an animation.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* animation :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  \n  \n_Can only be used if this is Animation_"
},
"get_animation_speed": {
"name": "get_animation_speed",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the animation speed of the animation with this id or ````nil```` if the object is not an animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n**Return value**  \nAnimation speed in frames per tick.  \n_Can only be used if this is Animation_"
},
"set_animation_speed": {
"name": "set_animation_speed",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"animation_speed": {
"name": "animation_speed",
"type": "double",
"doc": "animation_speed :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Animation speed in frames per tick."
}
},
"type": "function",
"doc": "Set the animation speed of the animation with this id. Does nothing if this object is not an animation.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* animation_speed :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Animation speed in frames per tick.  \n  \n  \n_Can only be used if this is Animation_"
},
"get_animation_offset": {
"name": "get_animation_offset",
"returns": "double",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
}
},
"type": "function",
"doc": "Get the animation offset of the animation with this id or ````nil```` if the object is not an animation.  \n  \n**Parameters**  \nid :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n  \n  \n**Return value**  \nAnimation offset in frames.  \n_Can only be used if this is Animation_"
},
"set_animation_offset": {
"name": "set_animation_offset",
"args": {
"id": {
"name": "id",
"type": "uint64",
"doc": "id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)"
},
"animation_offset": {
"name": "animation_offset",
"type": "double",
"doc": "animation_offset :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Animation offset in frames."
}
},
"type": "function",
"doc": "Set the animation offset of the animation with this id. Does nothing if this object is not an animation.  \n  \n**Parameters**  \n* id :: [uint64](https://lua-api.factorio.com/latest/Builtin-Types.html#uint64)  \n* animation_offset :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Animation offset in frames.  \n  \n  \n_Can only be used if this is Animation_"
}
},
"inherits": []
},
"LuaResourceCategoryPrototype": {
"name": "LuaResourceCategoryPrototype",
"type": "LuaResourceCategoryPrototype",
"doc": "Prototype of a resource category.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
}
},
"inherits": []
},
"LuaRoboportControlBehavior": {
"name": "LuaRoboportControlBehavior",
"type": "LuaRoboportControlBehavior",
"doc": "Control behavior for roboports.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"read_logistics": {
"name": "read_logistics",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the roboport should report the logistics network content to the circuit network.  \n"
},
"read_robot_stats": {
"name": "read_robot_stats",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the roboport should report the robot statistics to the circuit network.  \n"
},
"available_logistic_output_signal": {
"name": "available_logistic_output_signal",
"type": "SignalID",
"mode": "[RW]"
},
"total_logistic_output_signal": {
"name": "total_logistic_output_signal",
"type": "SignalID",
"mode": "[RW]"
},
"available_construction_output_signal": {
"name": "available_construction_output_signal",
"type": "SignalID",
"mode": "[RW]"
},
"total_construction_output_signal": {
"name": "total_construction_output_signal",
"type": "SignalID",
"mode": "[RW]"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaSettings": {
"name": "LuaSettings",
"type": "LuaSettings",
"doc": "Runtime settings can be changed through console commands and by the mod that owns the settings.  \n",
"properties": {
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "This objects name.  \n"
},
"get_player_settings": {
"name": "get_player_settings",
"returns": "CustomDictionarystring\u2192ModSetting",
"args": {
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)"
}
},
"type": "function",
"doc": "**Parameters**  \nplayer :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification)  \n  \n"
},
"startup": {
"name": "startup",
"type": "CustomDictionarystring\u2192ModSetting",
"mode": "[R]"
},
"global": {
"name": "global",
"type": "CustomDictionarystring\u2192ModSetting",
"mode": "[R]"
},
"player": {
"name": "player",
"type": "CustomDictionarystring\u2192ModSetting",
"mode": "[R]"
}
},
"inherits": []
},
"LuaShortcutPrototype": {
"name": "LuaShortcutPrototype",
"type": "LuaShortcutPrototype",
"doc": "Prototype of a shortcut.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"action": {
"name": "action",
"type": "string",
"mode": "[R]"
},
"item_to_spawn": {
"name": "item_to_spawn",
"type": "LuaItemPrototype",
"mode": "[R]"
},
"technology_to_unlock": {
"name": "technology_to_unlock",
"type": "LuaTechnologyPrototype",
"mode": "[R]"
},
"toggleable": {
"name": "toggleable",
"type": "boolean",
"mode": "[R]"
},
"associated_control_input": {
"name": "associated_control_input",
"type": "string",
"mode": "[R]"
}
},
"inherits": []
},
"LuaStorageTankControlBehavior": {
"name": "LuaStorageTankControlBehavior",
"type": "LuaStorageTankControlBehavior",
"doc": "Control behavior for storage tanks.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
},
"LuaStyle": {
"name": "LuaStyle",
"type": "LuaStyle",
"doc": "Style of a GUI element. All of the attributes listed here may be ````nil```` if not available for a\n particular GUI element.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"gui": {
"name": "gui",
"type": "LuaGui",
"mode": "[R]",
"doc": "Gui of the [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) of this style.  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this style.  \n"
},
"minimal_width": {
"name": "minimal_width",
"type": "int",
"mode": "[RW]",
"doc": "Minimal width ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller.  \n"
},
"maximal_width": {
"name": "maximal_width",
"type": "int",
"mode": "[RW]",
"doc": "Maximal width ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger.  \n"
},
"minimal_height": {
"name": "minimal_height",
"type": "int",
"mode": "[RW]",
"doc": "Minimal height ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller.  \n"
},
"maximal_height": {
"name": "maximal_height",
"type": "int",
"mode": "[RW]",
"doc": "Maximal height ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger.  \n"
},
"natural_width": {
"name": "natural_width",
"type": "int",
"mode": "[RW]",
"doc": "Natural width specifies the width of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.  \n"
},
"natural_height": {
"name": "natural_height",
"type": "int",
"mode": "[RW]",
"doc": "Natural height specifies the height of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.  \n"
},
"top_padding": {
"name": "top_padding",
"type": "int",
"mode": "[RW]"
},
"right_padding": {
"name": "right_padding",
"type": "int",
"mode": "[RW]"
},
"bottom_padding": {
"name": "bottom_padding",
"type": "int",
"mode": "[RW]"
},
"left_padding": {
"name": "left_padding",
"type": "int",
"mode": "[RW]"
},
"top_margin": {
"name": "top_margin",
"type": "int",
"mode": "[RW]"
},
"right_margin": {
"name": "right_margin",
"type": "int",
"mode": "[RW]"
},
"bottom_margin": {
"name": "bottom_margin",
"type": "int",
"mode": "[RW]"
},
"left_margin": {
"name": "left_margin",
"type": "int",
"mode": "[RW]"
},
"horizontal_align": {
"name": "horizontal_align",
"type": "string",
"mode": "[RW]",
"doc": "Horizontal align of the inner content of the widget, possible values are \"left\", \"center\" or \"right\"  \n"
},
"vertical_align": {
"name": "vertical_align",
"type": "string",
"mode": "[RW]",
"doc": "Vertical align of the inner content of the widget, possible values are \"top\", \"center\" or \"bottom\"  \n"
},
"font_color": {
"name": "font_color",
"type": "Color",
"mode": "[RW]"
},
"font": {
"name": "font",
"type": "string",
"mode": "[RW]"
},
"top_cell_padding": {
"name": "top_cell_padding",
"type": "int",
"mode": "[RW]",
"doc": "Space between the table cell contents top and border.  \n _Can only be used if this is LuaTableStyle_"
},
"right_cell_padding": {
"name": "right_cell_padding",
"type": "int",
"mode": "[RW]",
"doc": "Space between the table cell contents right and border.  \n _Can only be used if this is LuaTableStyle_"
},
"bottom_cell_padding": {
"name": "bottom_cell_padding",
"type": "int",
"mode": "[RW]",
"doc": "Space between the table cell contents bottom and border.  \n _Can only be used if this is LuaTableStyle_"
},
"left_cell_padding": {
"name": "left_cell_padding",
"type": "int",
"mode": "[RW]",
"doc": "Space between the table cell contents left and border.  \n _Can only be used if this is LuaTableStyle_"
},
"horizontally_stretchable": {
"name": "horizontally_stretchable",
"type": "boolean",
"mode": "[RW]",
"doc": "If the GUI element stretches its size horizontally to other elements.  \n"
},
"vertically_stretchable": {
"name": "vertically_stretchable",
"type": "boolean",
"mode": "[RW]",
"doc": "If the GUI element stretches its size vertically to other elements.  \n"
},
"horizontally_squashable": {
"name": "horizontally_squashable",
"type": "boolean",
"mode": "[RW]",
"doc": "If the GUI element can be squashed (by maximal width of some parent element) horizontally.\n This is mainly meant to be used for scroll-pane The default value is false.  \n"
},
"vertically_squashable": {
"name": "vertically_squashable",
"type": "boolean",
"mode": "[RW]",
"doc": "If the GUI element can be squashed (by maximal height of some parent element) vertically.\n This is mainly meant to be used for scroll-pane The default (parent) value for scroll pane is true, false otherwise.  \n"
},
"rich_text_setting": {
"name": "rich_text_setting",
"type": "defines.rich_text_setting",
"mode": "[RW]",
"doc": "How this GUI element handles rich text.  \n _Can only be used if this is LuaLabelStyle,  LuaTextBoxStyle, or  LuaTextFieldStyle_"
},
"hovered_font_color": {
"name": "hovered_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle_"
},
"clicked_font_color": {
"name": "clicked_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle_"
},
"disabled_font_color": {
"name": "disabled_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle or  LuaTabStyle_"
},
"pie_progress_color": {
"name": "pie_progress_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle_"
},
"clicked_vertical_offset": {
"name": "clicked_vertical_offset",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle_"
},
"selected_font_color": {
"name": "selected_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle_"
},
"selected_hovered_font_color": {
"name": "selected_hovered_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle_"
},
"selected_clicked_font_color": {
"name": "selected_clicked_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle_"
},
"strikethrough_color": {
"name": "strikethrough_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaButtonStyle_"
},
"horizontal_spacing": {
"name": "horizontal_spacing",
"type": "int",
"mode": "[RW]",
"doc": "Horizontal space between individual cells.  \n _Can only be used if this is LuaTableStyle,  LuaFlowStyle, or  LuaHorizontalFlow_"
},
"vertical_spacing": {
"name": "vertical_spacing",
"type": "int",
"mode": "[RW]",
"doc": "Vertical space between individual cells.  \n _Can only be used if this is LuaTableStyle,  LuaFlowStyle,  LuaVerticalFlowStyle, or  LuaTabbedPaneStyle_"
},
"use_header_filler": {
"name": "use_header_filler",
"type": "boolean",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaFrameStyle_"
},
"color": {
"name": "color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is LuaProgressBarStyle_"
},
"column_alignments": {
"name": "column_alignments",
"type": "CustomArrayofAlignment",
"mode": "[R]",
"doc": "Alignment for every column of this table. Even though this property is marked as read-only, the alignment can be changed by indexing this CustomArray, like so:  \n Example ````table_element.style.column_alignments[1]\u00a0=\u00a0\"center\"````"
},
"single_line": {
"name": "single_line",
"type": "boolean",
"mode": "[RW]",
"doc": "_Can only be used if this is LabelStyle_"
},
"extra_top_padding_when_activated": {
"name": "extra_top_padding_when_activated",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is ScrollPaneStyle_"
},
"extra_bottom_padding_when_activated": {
"name": "extra_bottom_padding_when_activated",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is ScrollPaneStyle_"
},
"extra_left_padding_when_activated": {
"name": "extra_left_padding_when_activated",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is ScrollPaneStyle_"
},
"extra_right_padding_when_activated": {
"name": "extra_right_padding_when_activated",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is ScrollPaneStyle_"
},
"extra_top_margin_when_activated": {
"name": "extra_top_margin_when_activated",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is ScrollPaneStyle_"
},
"extra_bottom_margin_when_activated": {
"name": "extra_bottom_margin_when_activated",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is ScrollPaneStyle_"
},
"extra_left_margin_when_activated": {
"name": "extra_left_margin_when_activated",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is ScrollPaneStyle_"
},
"extra_right_margin_when_activated": {
"name": "extra_right_margin_when_activated",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is ScrollPaneStyle_"
},
"stretch_image_to_widget_size": {
"name": "stretch_image_to_widget_size",
"type": "boolean",
"mode": "[RW]",
"doc": "_Can only be used if this is ImageStyle_"
},
"badge_font": {
"name": "badge_font",
"type": "string",
"mode": "[RW]",
"doc": "_Can only be used if this is TabStyle_"
},
"badge_horizontal_spacing": {
"name": "badge_horizontal_spacing",
"type": "int",
"mode": "[RW]",
"doc": "_Can only be used if this is TabStyle_"
},
"default_badge_font_color": {
"name": "default_badge_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is TabStyle_"
},
"selected_badge_font_color": {
"name": "selected_badge_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is TabStyle_"
},
"disabled_badge_font_color": {
"name": "disabled_badge_font_color",
"type": "Color",
"mode": "[RW]",
"doc": "_Can only be used if this is TabStyle_"
},
"width": {
"name": "width",
"type": "int",
"mode": "[W]",
"doc": "Sets both minimal and maximal width to the given value.  \n"
},
"height": {
"name": "height",
"type": "int",
"mode": "[W]",
"doc": "Sets both minimal and maximal height to the given value.  \n"
},
"size": {
"name": "size",
"type": "intorarray ofint",
"mode": "[W]",
"doc": "Sets both width and height to the given value.\n Also accepts an array with two values, setting width to the first and height to the second one.  \n"
},
"padding": {
"name": "padding",
"type": "intorarray ofint",
"mode": "[W]",
"doc": "Sets top/right/bottom/left paddings to this value.\n An array with two values sets top/bottom padding to the first value and left/right padding to the second value.\n An array with four values sets top, right, bottom, left padding respectively.  \n"
},
"margin": {
"name": "margin",
"type": "intorarray ofint",
"mode": "[W]",
"doc": "Sets top/right/bottom/left margins to this value.\n An array with two values sets top/bottom margin to the first value and left/right margin to the second value.\n An array with four values sets top, right, bottom, left margin respectively.  \n"
},
"cell_padding": {
"name": "cell_padding",
"type": "int",
"mode": "[W]",
"doc": "Space between the table cell contents and border. Sets top/right/bottom/left cell paddings to this value.  \n _Can only be used if this is LuaTableStyle_"
},
"extra_padding_when_activated": {
"name": "extra_padding_when_activated",
"type": "intorarray ofint",
"mode": "[W]",
"doc": "Sets extra_top/right/bottom/left_padding_when_actived to this value.\n An array with two values sets top/bottom padding to the first value and left/right padding to the second value.\n An array with four values sets top, right, bottom, left padding respectively.  \n"
},
"extra_margin_when_activated": {
"name": "extra_margin_when_activated",
"type": "intorarray ofint",
"mode": "[W]",
"doc": "Sets extra_top/right/bottom/left_margin_when_activated to this value.\n An array with two values sets top/bottom margin to the first value and left/right margin to the second value.\n An array with four values sets top, right, bottom, left margin respectively.  \n"
}
},
"inherits": []
},
"LuaSurface": {
"name": "LuaSurface",
"type": "LuaSurface",
"doc": "A \"domain\" of the world. Surfaces can only be created and deleted through the API. Surfaces\n are uniquely identified by their name. Every game contains at least the surface \"nauvis\".  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_pollution": {
"name": "get_pollution",
"returns": "double",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
}
},
"type": "function",
"doc": "Get the pollution for a given position.  \n  \n**Parameters**  \nposition :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n"
},
"can_place_entity": {
"name": "can_place_entity",
"returns": "boolean",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the entity to check  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The force that would place the entity. If not specified, the enemy force is assumed.  \n  * build_check_type :: [defines.build_check_type](https://lua-api.factorio.com/latest/defines.html#defines.build_check_type) (optional) :  What check type should be done.  \n  * forced :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If [defines.build_check_type](https://lua-api.factorio.com/latest/defines.html#defines.build_check_type) is \"ghost_place\" and this is true things that can be marked for deconstruction are ignored.  \n"
}
},
"type": "function",
"doc": "Check for collisions with terrain or other entities.  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the entity to check  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The force that would place the entity. If not specified, the enemy force is assumed.  \n  + build_check_type :: [defines.build_check_type](https://lua-api.factorio.com/latest/defines.html#defines.build_check_type) (optional) :  What check type should be done.  \n  + forced :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If [defines.build_check_type](https://lua-api.factorio.com/latest/defines.html#defines.build_check_type) is \"ghost_place\" and this is true things that can be marked for deconstruction are ignored.  \n  \n  \n"
},
"can_fast_replace": {
"name": "can_fast_replace",
"returns": "boolean",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the entity to check  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The force that would place the entity.\n     If not specified, the enemy force is assumed.  \n"
}
},
"type": "function",
"doc": "If there exists an entity at the given location that can be fast-replaced with the given entity parameters.  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Name of the entity to check  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where the entity would be placed  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Direction the entity would be placed  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The force that would place the entity.\n     If not specified, the enemy force is assumed.  \n  \n  \n"
},
"find_entity": {
"name": "find_entity",
"returns": "LuaEntity",
"args": {
"entity": {
"name": "entity",
"type": "string",
"doc": "entity :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Entity to look for"
},
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Coordinates to look at"
}
},
"type": "function",
"doc": "Find a specific entity at a specific position.  \n  \n**Parameters**  \n* entity :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Entity to look for  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Coordinates to look at  \n  \n  \n**Return value**  \nWill be ````nil```` if no such entity is found."
},
"find_entities": {
"name": "find_entities",
"returns": "array ofLuaEntity",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)"
}
},
"type": "function",
"doc": "Find entities in a given area.  \n If no area is given all entities on the surface are returned.  \n  \n**Parameters**  \narea :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  \n"
},
"find_entities_filtered": {
"name": "find_entities_filtered",
"returns": "array ofLuaEntity",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Has precedence over area field.  \n  * radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If given with position, will return all entities within the radius of the position.  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * ghost_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * ghost_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) or array of [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \n  * collision_mask :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) or array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  * to_be_deconstructed :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  * to_be_upgraded :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  * limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  * invert :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the filters should be inverted. These filters are: name, type, ghost_name, ghost_type, direction, collision_mask, force.  \n"
}
},
"type": "function",
"doc": "Find entities of given type or name in a given area.  \n If no filters ( ````name```` , ````type```` , ````force```` , etc.) are given, returns all entities in the search area.\n If multiple filters are specified, returns only entities matching all given filters.  \n If no area or position are given, then the entire surface is searched.\n If position is given, returns entities colliding with that position (i.e the given position is within the entity's collision box).\n If position and radius are given, returns entities in that radius of the position.\n If area is specified, returns entities colliding with that area.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Has precedence over area field.  \n  + radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If given with position, will return all entities within the radius of the position.  \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + ghost_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + ghost_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) or array of [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \n  + collision_mask :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) or array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  + to_be_deconstructed :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  + to_be_upgraded :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  + limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  + invert :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the filters should be inverted. These filters are: name, type, ghost_name, ghost_type, direction, collision_mask, force.  \n  \n  \n"
},
"find_tiles_filtered": {
"name": "find_tiles_filtered",
"returns": "array ofLuaTile",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Ignored if not given with radius.  \n  * radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If given with position, will return all entities within the radius of the position.  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  * has_hidden_tile :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  * collision_mask :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \n"
}
},
"type": "function",
"doc": "Find tiles of a given name in a given area.  \n If no filters are given returns all tiles in the search area.  \n If no area or position and radius is given, then the entire surface is searched.\n If position and radius are given, only tiles within the radius of the position are included.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Ignored if not given with radius.  \n  + radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If given with position, will return all entities within the radius of the position.  \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  + has_hidden_tile :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  + collision_mask :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \n  \n  \n"
},
"count_entities_filtered": {
"name": "count_entities_filtered",
"returns": "uint",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \n  * radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If given with position, will count all entities within the radius of the position.  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * ghost_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * ghost_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) or array of [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \n  * collision_mask :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) or array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  * to_be_deconstructed :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  * to_be_upgraded :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  * limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  * invert :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the filters should be inverted. These filters are: name, type, ghost_name, ghost_type, direction, collision_mask, force.  \n"
}
},
"type": "function",
"doc": "Count entities of given type or name in a given area. Works just like [LuaSurface::find_entities_filtered](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.find_entities_filtered) , except this only returns the count. As it doesn't\n construct all the wrapper objects, this is more efficient if one is only interested in the\n number of entities.  \n If no area or position are given, then the entire surface is searched.\n If position is given, returns entities colliding with that position (i.e the given position is within the entity's collision box).\n If position and radius are given, returns entities in that radius of the position.\n If area is specified, returns entities colliding with that area.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional)  \n  + radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If given with position, will count all entities within the radius of the position.  \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + ghost_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + ghost_type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) or array of [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \n  + collision_mask :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) or array of [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  + to_be_deconstructed :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  + to_be_upgraded :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  + limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  + invert :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the filters should be inverted. These filters are: name, type, ghost_name, ghost_type, direction, collision_mask, force.  \n  \n  \n"
},
"count_tiles_filtered": {
"name": "count_tiles_filtered",
"returns": "uint",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Ignored if not given with radius.  \n  * radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If given with position, will return all entities within the radius of the position.  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  * has_hidden_tile :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  * collision_mask :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \n"
}
},
"type": "function",
"doc": "Count tiles of a given name in a given area. Works just like [LuaSurface::find_tiles_filtered](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.find_tiles_filtered) , except this only returns the count. As it doesn't\n construct all the wrapper objects, this is more efficient if one is only interested in the\n number of tiles.  \n If no area or position and radius is given, then the entire surface is searched.\n If position and radius are given, only tiles within the radius of the position are included.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Ignored if not given with radius.  \n  + radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  If given with position, will return all entities within the radius of the position.  \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  + has_hidden_tile :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  + collision_mask :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) or array of [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer) (optional)  \n  \n  \n"
},
"find_non_colliding_position": {
"name": "find_non_colliding_position",
"returns": "Position",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the entity to find a position for. (The bounding\n   box for the collision checking is taken from this prototype.)"
},
"center": {
"name": "center",
"type": "Position",
"doc": "center :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Center of the search area."
},
"radius": {
"name": "radius",
"type": "double",
"doc": "radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Max distance from ````center```` to search in. ````0```` for infinitely-large\n   search area."
},
"precision": {
"name": "precision",
"type": "double",
"doc": "precision :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The step length from the given position as it searches, in tiles. Minimum value is 0.01."
},
"force_to_tile_center": {
"name": "force_to_tile_center",
"type": "boolean",
"doc": "force_to_tile_center :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Will only check tile centers. This can be useful when your intent is to place a building at the resulting position,\n   as they must generally be placed at tile centers. Default false."
}
},
"type": "function",
"doc": "Find a non-colliding position within a given radius.  \n  \n**Parameters**  \n* name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the entity to find a position for. (The bounding\n   box for the collision checking is taken from this prototype.)  \n* center :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Center of the search area.  \n* radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Max distance from ````center```` to search in. ````0```` for infinitely-large\n   search area.  \n* precision :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The step length from the given position as it searches, in tiles. Minimum value is 0.01.  \n* force_to_tile_center :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Will only check tile centers. This can be useful when your intent is to place a building at the resulting position,\n   as they must generally be placed at tile centers. Default false.  \n  \n  \n**Return value**  \nThe non-colliding position. May be ````nil```` if no suitable position was found."
},
"find_non_colliding_position_in_box": {
"name": "find_non_colliding_position_in_box",
"returns": "Position",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the entity to find a position for. (The bounding\n   box for the collision checking is taken from this prototype.)"
},
"search_space": {
"name": "search_space",
"type": "BoundingBox",
"doc": "search_space :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The rectangle to search inside."
},
"precision": {
"name": "precision",
"type": "double",
"doc": "precision :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The step length from the given position as it searches, in tiles. Minimum value is 0.01."
},
"force_to_tile_center": {
"name": "force_to_tile_center",
"type": "boolean",
"doc": "force_to_tile_center :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Will only check tile centers. This can be useful when your intent is to place a building at the resulting position,\n   as they must generally be placed at tile centers. Default false."
}
},
"type": "function",
"doc": "Find a non-colliding position within a given rectangle.  \n  \n**Parameters**  \n* name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Prototype name of the entity to find a position for. (The bounding\n   box for the collision checking is taken from this prototype.)  \n* search_space :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The rectangle to search inside.  \n* precision :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  The step length from the given position as it searches, in tiles. Minimum value is 0.01.  \n* force_to_tile_center :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Will only check tile centers. This can be useful when your intent is to place a building at the resulting position,\n   as they must generally be placed at tile centers. Default false.  \n  \n  \n**Return value**  \nThe non-colliding position. May be ````nil```` if no suitable position was found."
},
"spill_item_stack": {
"name": "spill_item_stack",
"returns": "array ofLuaEntity",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Center of the spillage"
},
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to spill"
},
"enable_looted": {
"name": "enable_looted",
"type": "boolean",
"doc": "enable_looted :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, each created item will be flagged with the [LuaEntity::to_be_looted](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.to_be_looted) flag."
},
"force": {
"name": "force",
"type": "LuaForceorstring",
"doc": "force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  When provided (and not ````nil```` ) the items will be marked for deconstruction by this force."
},
"allow_belts": {
"name": "allow_belts",
"type": "boolean",
"doc": "allow_belts :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether items can be spilled onto belts. Defaults to ````true```` ."
}
},
"type": "function",
"doc": "Spill items on the ground centered at a given location.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Center of the spillage  \n* items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to spill  \n* enable_looted :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  When true, each created item will be flagged with the [LuaEntity::to_be_looted](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.to_be_looted) flag.  \n* force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  When provided (and not ````nil```` ) the items will be marked for deconstruction by this force.  \n* allow_belts :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether items can be spilled onto belts. Defaults to ````true```` .  \n  \n  \n**Return value**  \nThe created item-on-ground entities."
},
"find_enemy_units": {
"name": "find_enemy_units",
"returns": "array ofLuaEntity",
"args": {
"center": {
"name": "center",
"type": "Position",
"doc": "center :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Center of the search area"
},
"radius": {
"name": "radius",
"type": "double",
"doc": "radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Radius of the circular search area"
},
"force": {
"name": "force",
"type": "LuaForceorstring",
"doc": "force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Force to find enemies of. If not given,\n   uses the player force."
}
},
"type": "function",
"doc": "Find enemy units (entities with type \"unit\") of a given force within an area.  \n  \n**Parameters**  \n* center :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Center of the search area  \n* radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Radius of the circular search area  \n* force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Force to find enemies of. If not given,\n   uses the player force.  \n  \n"
},
"find_units": {
"name": "find_units",
"returns": "array ofLuaEntity",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  Box to find units within.  \n  * force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Force performing the search.  \n  * condition :: [ForceCondition](https://lua-api.factorio.com/latest/Concepts.html#ForceCondition) :  Only forces which meet the condition will be included in the search.  \n"
}
},
"type": "function",
"doc": "Find units (entities with type \"unit\") of a given force and force condition within a given area.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  Box to find units within.  \n  + force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Force performing the search.  \n  + condition :: [ForceCondition](https://lua-api.factorio.com/latest/Concepts.html#ForceCondition) :  Only forces which meet the condition will be included in the search.  \n  \n  \n"
},
"find_nearest_enemy": {
"name": "find_nearest_enemy",
"returns": "LuaEntity",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "Table with the following fields:   \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Center of the search area.  \n  * max_distance :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Radius of the circular search area.  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The force the result will be an enemy of.\n     Uses the player force if not specified.  \n"
}
},
"type": "function",
"doc": "Find the enemy entity-with-force ( [military entity](https://lua-api.factorio.com/latest/https://wiki.factorio.com/Military_units_and_structures) ) closest to the given position.  \n  \n**Parameters**  \nTable with the following fields:   \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Center of the search area.  \n  + max_distance :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Radius of the circular search area.  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  The force the result will be an enemy of.\n     Uses the player force if not specified.  \n  \n  \n  \n**Return value**  \nThe nearest enemy entity-with-force or ````nil```` if no enemy could be found within the\n   given area."
},
"set_multi_command": {
"name": "set_multi_command",
"returns": "uint",
"args": {
"command": {
"name": "command",
"type": "Command",
"doc": "Table with the following fields:   \n  * command :: [Command](https://lua-api.factorio.com/latest/Concepts.html#Command)  \n  * unit_count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Number of units to give the command to.  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  Force of the units this command is to be given to.\n     If not specified, uses the enemy force.  \n  * unit_search_distance :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Radius to search for units. The search area is centered on\n     the destination of the command.  \n"
}
},
"type": "function",
"doc": "Give a command to multiple units. This will automatically select suitable units for the\n task.  \n  \n**Parameters**  \nTable with the following fields:   \n  + command :: [Command](https://lua-api.factorio.com/latest/Concepts.html#Command)  \n  + unit_count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Number of units to give the command to.  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  Force of the units this command is to be given to.\n     If not specified, uses the enemy force.  \n  + unit_search_distance :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Radius to search for units. The search area is centered on\n     the destination of the command.  \n  \n  \n  \n**Return value**  \nNumber of units actually sent. May be less than ````count```` if not enough units were\n   available."
},
"create_entity": {
"name": "create_entity",
"returns": "LuaEntity",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The entity prototype name to create.  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to create the entity.  \n  * direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Desired orientation of the entity after creation.  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  Force of the entity, default is enemy.  \n  * target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  Entity with health for the new entity to target.  \n  * source :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  Source entity. Used for beams.  \n  * fast_replace :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, building will attempt to simulate fast-replace building.  \n  * player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If given set the last_user to this player. If fast_replace is true simulate fast replace using this player.  \n  * spill :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false while fast_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground.  \n  * raise_built :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true; [defines.events.script_raised_built](https://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation.  \n  * create_build_effect_smoke :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false, the building effect smoke will not be shown around the new entity.  \n  * spawn_decorations :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, entity types that have spawn_decorations property will apply triggers defined in the property.  \n  * Additional entity-specific parameters   \n    + assembling-machine   \n      - recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  \n    + beam   \n      - target_position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).  \n      - source_position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).  \n      - max_length :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  If set, beam will be destroyed when distance between source and target is greater than this value.  \n      - duration :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  If set, beam will be destroyed after this value of ticks.  \n      - source_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Source position will be offset by this value when rendering the beam.  \n  \n    + container   \n      - bar :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Inventory index where the red limiting bar should be set.  \n  \n    + cliff   \n      - cliff_orientation :: [CliffOrientation](https://lua-api.factorio.com/latest/Concepts.html#CliffOrientation) (optional) :  If not specified, ````direction```` will be used instead.  \n  \n    + flying-text   \n      - text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  The string to show.  \n      - color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional) :  Color of the displayed text.  \n      - render_player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n    + entity-ghost   \n      - inner_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The prototype name of the entity contained in the ghost.  \n      - expires :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````false```` the ghost entity will not expire. Default is ````false```` .  \n  \n    + fire   \n      - initial_ground_flame_count :: [uint8](https://lua-api.factorio.com/latest/Builtin-Types.html#uint8) (optional) :  With how many small flames should the fire on ground be created. Defaults to the initial flame count of the prototype.  \n  \n    + inserter   \n      - conditions :  Table with the following fields:   \n        * circuit :: [CircuitCondition](https://lua-api.factorio.com/latest/Concepts.html#CircuitCondition) (optional)  \n        * logistics :: [CircuitCondition](https://lua-api.factorio.com/latest/Concepts.html#CircuitCondition) (optional)  \n  \n      - filters :: array of [Filter](https://lua-api.factorio.com/latest/Concepts.html#Filter)  \n  \n    + item-entity   \n      - stack :: [SimpleItemStack](https://lua-api.factorio.com/latest/Concepts.html#SimpleItemStack) :  The stack of items to create.  \n  \n    + item-request-proxy   \n      - target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The target items are to be delivered to.  \n      - modules :: dictionary [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) \u2192 [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The stacks of items to be delivered to target entity from logistic network.  \n  \n    + locomotive   \n      - snap_to_train_stop :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the locomotive should snap to an adjacent train stop. Defaults to true.  \n  \n    + logistic-container   \n      - request_filters :: array of [Filter](https://lua-api.factorio.com/latest/Concepts.html#Filter) (optional)  \n  \n    + particle   \n      - movement :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n      - height :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n      - vertical_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n      - frame_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  \n    + projectile   \n      - speed :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n      - max_range :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n    + resource   \n      - amount :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n      - enable_tree_removal :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If colliding trees are removed normally for this resource entity based off the prototype tree removal values. Default is true.  \n      - enable_cliff_removal :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If colliding cliffs are removed. Default is true.  \n      - snap_to_tile_center :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, the resource entity will be placed to center of a tile as map generator would place it, otherwise standard non-resource grid alignment rules will apply. Default is true.  \n  \n    + underground-belt   \n      - type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) : ````\"output\"```` or ````\"input\"```` ; default is ````\"input\"```` .  \n  \n    + programmable-speaker   \n      - parameters :: [ProgrammableSpeakerParameters](https://lua-api.factorio.com/latest/Concepts.html#ProgrammableSpeakerParameters) (optional)  \n      - alert_parameters :: [ProgrammableSpeakerAlertParameters](https://lua-api.factorio.com/latest/Concepts.html#ProgrammableSpeakerAlertParameters) (optional)  \n  \n    + character-corpse   \n      - inventory_size :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n      - player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n    + highlight-box   \n      - bounding_box :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n      - box_type :: [CursorBoxRenderType](https://lua-api.factorio.com/latest/Concepts.html#CursorBoxRenderType) (optional)  \n      - render_player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n      - blink_interval :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n      - time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n    + speech-bubble   \n      - text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n      - lifetime :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n    + simple-entity-with-owner & simple-entity-with-force   \n      - render_player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n  \n"
}
},
"type": "function",
"doc": "Create an entity on this surface.  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The entity prototype name to create.  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to create the entity.  \n  + direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional) :  Desired orientation of the entity after creation.  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  Force of the entity, default is enemy.  \n  + target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  Entity with health for the new entity to target.  \n  + source :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  Source entity. Used for beams.  \n  + fast_replace :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, building will attempt to simulate fast-replace building.  \n  + player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  If given set the last_user to this player. If fast_replace is true simulate fast replace using this player.  \n  + spill :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false while fast_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground.  \n  + raise_built :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true; [defines.events.script_raised_built](https://lua-api.factorio.com/latest/defines.html#defines.events.script_raised_built) will be fired on successful entity creation.  \n  + create_build_effect_smoke :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If false, the building effect smoke will not be shown around the new entity.  \n  + spawn_decorations :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, entity types that have spawn_decorations property will apply triggers defined in the property.  \n  + Additional entity-specific parameters   \n    - assembling-machine   \n      * recipe :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  \n    - beam   \n      * target_position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).  \n      * source_position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).  \n      * max_length :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  If set, beam will be destroyed when distance between source and target is greater than this value.  \n      * duration :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  If set, beam will be destroyed after this value of ticks.  \n      * source_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector) (optional) :  Source position will be offset by this value when rendering the beam.  \n  \n    - container   \n      * bar :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  Inventory index where the red limiting bar should be set.  \n  \n    - cliff   \n      * cliff_orientation :: [CliffOrientation](https://lua-api.factorio.com/latest/Concepts.html#CliffOrientation) (optional) :  If not specified, ````direction```` will be used instead.  \n  \n    - flying-text   \n      * text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString) :  The string to show.  \n      * color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional) :  Color of the displayed text.  \n      * render_player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n    - entity-ghost   \n      * inner_name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The prototype name of the entity contained in the ghost.  \n      * expires :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````false```` the ghost entity will not expire. Default is ````false```` .  \n  \n    - fire   \n      * initial_ground_flame_count :: [uint8](https://lua-api.factorio.com/latest/Builtin-Types.html#uint8) (optional) :  With how many small flames should the fire on ground be created. Defaults to the initial flame count of the prototype.  \n  \n    - inserter   \n      * conditions :  Table with the following fields:   \n        + circuit :: [CircuitCondition](https://lua-api.factorio.com/latest/Concepts.html#CircuitCondition) (optional)  \n        + logistics :: [CircuitCondition](https://lua-api.factorio.com/latest/Concepts.html#CircuitCondition) (optional)  \n  \n      * filters :: array of [Filter](https://lua-api.factorio.com/latest/Concepts.html#Filter)  \n  \n    - item-entity   \n      * stack :: [SimpleItemStack](https://lua-api.factorio.com/latest/Concepts.html#SimpleItemStack) :  The stack of items to create.  \n  \n    - item-request-proxy   \n      * target :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The target items are to be delivered to.  \n      * modules :: dictionary [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) \u2192 [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The stacks of items to be delivered to target entity from logistic network.  \n  \n    - locomotive   \n      * snap_to_train_stop :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether the locomotive should snap to an adjacent train stop. Defaults to true.  \n  \n    - logistic-container   \n      * request_filters :: array of [Filter](https://lua-api.factorio.com/latest/Concepts.html#Filter) (optional)  \n  \n    - particle   \n      * movement :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n      * height :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n      * vertical_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n      * frame_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  \n    - projectile   \n      * speed :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n      * max_range :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double)  \n  \n    - resource   \n      * amount :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n      * enable_tree_removal :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If colliding trees are removed normally for this resource entity based off the prototype tree removal values. Default is true.  \n      * enable_cliff_removal :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If colliding cliffs are removed. Default is true.  \n      * snap_to_tile_center :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If true, the resource entity will be placed to center of a tile as map generator would place it, otherwise standard non-resource grid alignment rules will apply. Default is true.  \n  \n    - underground-belt   \n      * type :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) : ````\"output\"```` or ````\"input\"```` ; default is ````\"input\"```` .  \n  \n    - programmable-speaker   \n      * parameters :: [ProgrammableSpeakerParameters](https://lua-api.factorio.com/latest/Concepts.html#ProgrammableSpeakerParameters) (optional)  \n      * alert_parameters :: [ProgrammableSpeakerAlertParameters](https://lua-api.factorio.com/latest/Concepts.html#ProgrammableSpeakerAlertParameters) (optional)  \n  \n    - character-corpse   \n      * inventory_size :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n      * player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n    - highlight-box   \n      * bounding_box :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n      * box_type :: [CursorBoxRenderType](https://lua-api.factorio.com/latest/Concepts.html#CursorBoxRenderType) (optional)  \n      * render_player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n      * blink_interval :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n      * time_to_live :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n    - speech-bubble   \n      * text :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n      * lifetime :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n    - simple-entity-with-owner & simple-entity-with-force   \n      * render_player_index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  \n  \n  \n  \n  \n**Return value**  \nThe created entity or ````nil```` if the creation failed."
},
"create_trivial_smoke": {
"name": "create_trivial_smoke",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The smoke prototype name to create.  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to create the smoke.  \n"
}
},
"type": "function",
"doc": "**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The smoke prototype name to create.  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to create the smoke.  \n  \n  \n"
},
"create_particle": {
"name": "create_particle",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The particle name.  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to create the particle.  \n  * movement :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n  * height :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * vertical_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  * frame_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n"
}
},
"type": "function",
"doc": "Creates a particle at the given location  \n  \n**Parameters**  \nTable with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The particle name.  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to create the particle.  \n  + movement :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n  + height :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  + vertical_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  + frame_speed :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float)  \n  \n  \n"
},
"create_unit_group": {
"name": "create_unit_group",
"returns": "LuaUnitGroup",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "Table with the following fields:   \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Initial position of the new unit group.  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  Force of the new unit group. Defaults to ````\"enemy\"```` .  \n"
}
},
"type": "function",
"doc": "Create a new unit group at a given position.  \n  \n**Parameters**  \nTable with the following fields:   \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Initial position of the new unit group.  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  Force of the new unit group. Defaults to ````\"enemy\"```` .  \n  \n  \n"
},
"build_enemy_base": {
"name": "build_enemy_base",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Location of the new base."
},
"unit_count": {
"name": "unit_count",
"type": "uint",
"doc": "unit_count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Number of biters to send for the base-building task."
},
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  Force the new base will belong to. Defaults to enemy."
}
},
"type": "function",
"doc": "Send a group to build a new base.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Location of the new base.  \n* unit_count :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  Number of biters to send for the base-building task.  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  Force the new base will belong to. Defaults to enemy.  \n  \n"
},
"get_tile": {
"name": "get_tile",
"returns": "LuaTile",
"args": {
"x": {
"name": "x",
"type": "int",
"doc": "x :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int)"
},
"y": {
"name": "y",
"type": "int",
"doc": "y :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int)"
}
},
"type": "function",
"doc": "Get the tile at a given position.  \n  \n**Parameters**  \n* x :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int)  \n* y :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int)  \n  \n"
},
"set_tiles": {
"name": "set_tiles",
"args": {
"tiles": {
"name": "tiles",
"type": "array ofTile",
"doc": "tiles :: array of Tile :  Each Tile is a table:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n"
},
"correct_tiles": {
"name": "correct_tiles",
"type": "boolean",
"doc": "correct_tiles :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````false```` , the correction logic is not done on the changed tiles.\n                                           Defaults to ````true```` ."
},
"remove_colliding_entities": {
"name": "remove_colliding_entities",
"type": "booleanorstring",
"doc": "remove_colliding_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) : ````true```` , ````false```` , or ````abort_on_collision```` . Defaults to ````true```` ."
},
"remove_colliding_decoratives": {
"name": "remove_colliding_decoratives",
"type": "boolean",
"doc": "remove_colliding_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) : ````true```` or ````false```` . Defaults to ````true````"
},
"raise_event": {
"name": "raise_event",
"type": "boolean",
"doc": "raise_event :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) : ````true```` or ````false```` . Defaults to ````false````"
}
},
"type": "function",
"doc": "Set tiles at specified locations. Automatically corrects the edges around modified tiles.  \n  \n**Parameters**  \n* tiles :: array of Tile :  Each Tile is a table:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  \n* correct_tiles :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If ````false```` , the correction logic is not done on the changed tiles.\n                                           Defaults to ````true```` .  \n* remove_colliding_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) : ````true```` , ````false```` , or ````abort_on_collision```` . Defaults to ````true```` .  \n* remove_colliding_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) : ````true```` or ````false```` . Defaults to ````true````  \n* raise_event :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) : ````true```` or ````false```` . Defaults to ````false````  \n  \n"
},
"pollute": {
"name": "pollute",
"args": {
"source": {
"name": "source",
"type": "Position",
"doc": "source :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to spawn the pollution."
},
"amount": {
"name": "amount",
"type": "double",
"doc": "amount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  How much pollution to add."
}
},
"type": "function",
"doc": "Spawn pollution at the given position.  \n  \n**Parameters**  \n* source :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to spawn the pollution.  \n* amount :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  How much pollution to add.  \n  \n"
},
"get_chunks": {
"name": "get_chunks",
"returns": "LuaChunkIterator",
"type": "function",
"doc": "Get an iterator going over every chunk on this surface.  \n"
},
"is_chunk_generated": {
"name": "is_chunk_generated",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "ChunkPosition",
"doc": "position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk's position."
}
},
"type": "function",
"doc": "Is a given chunk generated?  \n  \n**Parameters**  \nposition :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk's position.  \n  \n"
},
"request_to_generate_chunks": {
"name": "request_to_generate_chunks",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to generate the new chunks."
},
"radius": {
"name": "radius",
"type": "uint",
"doc": "radius :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The chunk radius from ````position```` to generate new chunks in."
}
},
"type": "function",
"doc": "Request that the game's map generator generate chunks at the given position\n for the given radius on this surface.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Where to generate the new chunks.  \n* radius :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The chunk radius from ````position```` to generate new chunks in.  \n  \n"
},
"force_generate_chunk_requests": {
"name": "force_generate_chunk_requests",
"type": "function",
"doc": "Blocks and generates all chunks that have been requested using all available threads.  \n"
},
"set_chunk_generated_status": {
"name": "set_chunk_generated_status",
"args": {
"position": {
"name": "position",
"type": "ChunkPosition",
"doc": "position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk's position."
},
"status": {
"name": "status",
"type": "defines.chunk_generated_status",
"doc": "status :: [defines.chunk_generated_status](https://lua-api.factorio.com/latest/defines.html#defines.chunk_generated_status) :  The chunk's new status."
}
},
"type": "function",
"doc": "Set generated status of a chunk. Useful when copying chunks.  \n  \n**Parameters**  \n* position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk's position.  \n* status :: [defines.chunk_generated_status](https://lua-api.factorio.com/latest/defines.html#defines.chunk_generated_status) :  The chunk's new status.  \n  \n"
},
"find_logistic_network_by_position": {
"name": "find_logistic_network_by_position",
"returns": "LuaLogisticNetwork",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
},
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force the logistic network should belong to."
}
},
"type": "function",
"doc": "Find the logistic network that covers a given position.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force the logistic network should belong to.  \n  \n  \n**Return value**  \nThe found network or ````nil```` if no such network was found."
},
"find_logistic_networks_by_construction_area": {
"name": "find_logistic_networks_by_construction_area",
"returns": "array ofLuaLogisticNetwork",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
},
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force the logistic networks should belong to."
}
},
"type": "function",
"doc": "Finds all of the logistics networks whose construction area intersects with the given position.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  Force the logistic networks should belong to.  \n  \n"
},
"deconstruct_area": {
"name": "deconstruct_area",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to mark for deconstruction.  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose bots should perform the deconstruction.  \n  * player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  * item :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) (optional) :  The deconstruction item to use if any.  \n"
}
},
"type": "function",
"doc": "Place a deconstruction request.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to mark for deconstruction.  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose bots should perform the deconstruction.  \n  + player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  + item :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) (optional) :  The deconstruction item to use if any.  \n  \n  \n"
},
"cancel_deconstruct_area": {
"name": "cancel_deconstruct_area",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to cancel deconstruction orders in.  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose deconstruction orders to cancel.  \n  * player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  * item :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) (optional) :  The deconstruction item to use if any.  \n"
}
},
"type": "function",
"doc": "Cancel a deconstruction order.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to cancel deconstruction orders in.  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose deconstruction orders to cancel.  \n  + player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  + item :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) (optional) :  The deconstruction item to use if any.  \n  \n  \n"
},
"upgrade_area": {
"name": "upgrade_area",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to mark for upgrade.  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose bots should perform the upgrade.  \n  * player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  * item :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) :  The upgrade item to use.  \n"
}
},
"type": "function",
"doc": "Place an upgrade request.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to mark for upgrade.  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose bots should perform the upgrade.  \n  + player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  + item :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) :  The upgrade item to use.  \n  \n  \n"
},
"cancel_upgrade_area": {
"name": "cancel_upgrade_area",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to cancel upgrade orders in.  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose upgrade orders to cancel.  \n  * player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  * skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  * item :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) (optional) :  The upgrade item to use if any.  \n"
}
},
"type": "function",
"doc": "Cancel a upgrade order.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The area to cancel upgrade orders in.  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose upgrade orders to cancel.  \n  + player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  + skip_fog_of_war :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If chunks covered by fog-of-war are skipped.  \n  + item :: [LuaItemStack](https://lua-api.factorio.com/latest/LuaItemStack.html) (optional) :  The upgrade item to use if any.  \n  \n  \n"
},
"get_hidden_tile": {
"name": "get_hidden_tile",
"returns": "string",
"args": {
"position": {
"name": "position",
"type": "TilePosition",
"doc": "position :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition) :  The tile position."
}
},
"type": "function",
"doc": "The hidden tile name or ````nil```` if there isn't one for the given position.  \n  \n**Parameters**  \nposition :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition) :  The tile position.  \n  \n"
},
"set_hidden_tile": {
"name": "set_hidden_tile",
"args": {
"position": {
"name": "position",
"type": "TilePosition",
"doc": "position :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition) :  The tile position."
},
"tile": {
"name": "tile",
"type": "stringorLuaTilePrototype",
"doc": "tile :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](https://lua-api.factorio.com/latest/LuaTilePrototype.html) :  The new hidden tile or ````nil```` to clear the hidden tile."
}
},
"type": "function",
"doc": "**Parameters**  \n* position :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition) :  The tile position.  \n* tile :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaTilePrototype](https://lua-api.factorio.com/latest/LuaTilePrototype.html) :  The new hidden tile or ````nil```` to clear the hidden tile.  \n  \n"
},
"get_connected_tiles": {
"name": "get_connected_tiles",
"returns": "array ofPosition",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The tile position to start at."
},
"tiles": {
"name": "tiles",
"type": "array ofstring",
"doc": "tiles :: array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The tiles to search for."
}
},
"type": "function",
"doc": "Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile position.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The tile position to start at.  \n* tiles :: array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The tiles to search for.  \n  \n  \n**Return value**  \nThe resulting set of tiles."
},
"delete_chunk": {
"name": "delete_chunk",
"args": {
"position": {
"name": "position",
"type": "ChunkPosition",
"doc": "position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk position to delete"
}
},
"type": "function",
"doc": "**Parameters**  \nposition :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk position to delete  \n  \n"
},
"regenerate_entity": {
"name": "regenerate_entity",
"args": {
"entities": {
"name": "entities",
"type": "stringorarray ofstring",
"doc": "entities :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) : \n   Prototype names of entity or entities to autoplace. When ````nil```` all entities with an autoplace are used."
},
"chunks": {
"name": "chunks",
"type": "array ofChunkPosition",
"doc": "chunks :: array of [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) (optional) : \n   The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored."
}
},
"type": "function",
"doc": "Regenerate autoplacement of some entities on this surface. This can be used to autoplace newly-added entities.  \n  \n**Parameters**  \n* entities :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) : \n   Prototype names of entity or entities to autoplace. When ````nil```` all entities with an autoplace are used.  \n* chunks :: array of [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) (optional) : \n   The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.  \n  \n"
},
"regenerate_decorative": {
"name": "regenerate_decorative",
"args": {
"decoratives": {
"name": "decoratives",
"type": "stringorarray ofstring",
"doc": "decoratives :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) : \n   Prototype names of decorative or decoratives to autoplace. When ````nil```` all decoratives with an autoplace are used."
},
"chunks": {
"name": "chunks",
"type": "array ofChunkPosition",
"doc": "chunks :: array of [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) (optional) : \n   The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored."
}
},
"type": "function",
"doc": "Regenerate autoplacement of some decoratives on this surface. This can be used to autoplace newly-added decoratives.  \n  \n**Parameters**  \n* decoratives :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) : \n   Prototype names of decorative or decoratives to autoplace. When ````nil```` all decoratives with an autoplace are used.  \n* chunks :: array of [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) (optional) : \n   The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.  \n  \n"
},
"print": {
"name": "print",
"args": {
"message": {
"name": "message",
"type": "LocalisedString",
"doc": "message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)"
},
"color": {
"name": "color",
"type": "Color",
"doc": "color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)"
}
},
"type": "function",
"doc": "Print text to the chat console of all players on this surface.  \n  \n**Parameters**  \n* message :: [LocalisedString](https://lua-api.factorio.com/latest/Concepts.html#LocalisedString)  \n* color :: [Color](https://lua-api.factorio.com/latest/Concepts.html#Color) (optional)  \n  \n"
},
"destroy_decoratives": {
"name": "destroy_decoratives",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  * position :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition) (optional)  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaDecorativePrototype](https://lua-api.factorio.com/latest/LuaDecorativePrototype.html) or array of [LuaDecorativePrototype](https://lua-api.factorio.com/latest/LuaDecorativePrototype.html) (optional)  \n  * limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  * invert :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the filters should be inverted.  \n"
}
},
"type": "function",
"doc": "Removes all decoratives from the given area.  \n If no area and no position are given, then the entire surface is searched.  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  + position :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition) (optional)  \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaDecorativePrototype](https://lua-api.factorio.com/latest/LuaDecorativePrototype.html) or array of [LuaDecorativePrototype](https://lua-api.factorio.com/latest/LuaDecorativePrototype.html) (optional)  \n  + limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  + invert :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the filters should be inverted.  \n  \n  \n"
},
"create_decoratives": {
"name": "create_decoratives",
"args": {
"check_collision": {
"name": "check_collision",
"type": "boolean",
"doc": "Table with the following fields:   \n  * check_collision :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If collision should be checked against entities/tiles.  \n  * decoratives :: array of Decorative  \n"
}
},
"type": "function",
"doc": "Adds the given decoratives to the surface.  \n Each Decorative is  \n  \n**Parameters**  \nTable with the following fields:   \n  + check_collision :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If collision should be checked against entities/tiles.  \n  + decoratives :: array of Decorative  \n  \n  \n"
},
"find_decoratives_filtered": {
"name": "find_decoratives_filtered",
"returns": "array ofDecorativeResult",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  * position :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition) (optional)  \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaDecorativePrototype](https://lua-api.factorio.com/latest/LuaDecorativePrototype.html) or array of [LuaDecorativePrototype](https://lua-api.factorio.com/latest/LuaDecorativePrototype.html) (optional)  \n  * limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  * invert :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the filters should be inverted.  \n"
}
},
"type": "function",
"doc": "Find decoratives of a given name in a given area.  \n If no filters are given, returns all decoratives in the search area.\n If multiple filters are specified, returns only decoratives matching all given filters.  \n If no area and no position are given, then the entire surface is searched.  \n Each DecorativeResult is a table:  \n  \n**Parameters**  \nTable with the following fields:   \n  + area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) (optional)  \n  + position :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition) (optional)  \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [LuaDecorativePrototype](https://lua-api.factorio.com/latest/LuaDecorativePrototype.html) or array of [LuaDecorativePrototype](https://lua-api.factorio.com/latest/LuaDecorativePrototype.html) (optional)  \n  + limit :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional)  \n  + invert :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the filters should be inverted.  \n  \n  \n"
},
"get_trains": {
"name": "get_trains",
"returns": "array ofLuaTrain",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  If given only trains matching this force are returned."
}
},
"type": "function",
"doc": "**Parameters**  \nforce :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional) :  If given only trains matching this force are returned.  \n  \n"
},
"clear_pollution": {
"name": "clear_pollution",
"type": "function",
"doc": "Clears all pollution on this surface.  \n"
},
"play_sound": {
"name": "play_sound",
"returns": "boolean",
"args": {
"path": {
"name": "path",
"type": "SoundPath",
"doc": "Table with the following fields:   \n  * path :: [SoundPath](https://lua-api.factorio.com/latest/Concepts.html#SoundPath) :  The sound to play  \n  * position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Where the sound should be played. If not given it's played 'everywhere'.  \n  * volume_modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Must be between 0 and 1 inclusive.  \n"
}
},
"type": "function",
"doc": "Plays a sound on this surface.  \n  \n**Parameters**  \nTable with the following fields:   \n  + path :: [SoundPath](https://lua-api.factorio.com/latest/Concepts.html#SoundPath) :  The sound to play  \n  + position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) (optional) :  Where the sound should be played. If not given it's played 'everywhere'.  \n  + volume_modifier :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  Must be between 0 and 1 inclusive.  \n  \n  \n"
},
"get_resource_counts": {
"name": "get_resource_counts",
"returns": "dictionarystring\u2192uint",
"type": "function",
"doc": "Gets the resource amount of all resources on this surface  \n"
},
"get_random_chunk": {
"name": "get_random_chunk",
"returns": "ChunkPosition",
"type": "function",
"doc": "Gets a random generated chunk position or 0,0 if no chunks have been generated on this surface.  \n"
},
"clone_area": {
"name": "clone_area",
"args": {
"source_area": {
"name": "source_area",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * source_area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \n  * destination_area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \n  * destination_surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  * destination_force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * clone_tiles :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If tiles should be cloned  \n  * clone_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If entities should be cloned  \n  * clone_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If decoratives should be cloned  \n  * clear_destination_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination entities should be cleared  \n  * clear_destination_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination decoratives should be cleared  \n  * expand_map :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination surface should be expanded when destination_area is outside current bounds. Default false.  \n"
}
},
"type": "function",
"doc": "Clones the given area.  \n  \n**Parameters**  \nTable with the following fields:   \n  + source_area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \n  + destination_area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \n  + destination_surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  + destination_force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + clone_tiles :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If tiles should be cloned  \n  + clone_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If entities should be cloned  \n  + clone_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If decoratives should be cloned  \n  + clear_destination_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination entities should be cleared  \n  + clear_destination_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination decoratives should be cleared  \n  + expand_map :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination surface should be expanded when destination_area is outside current bounds. Default false.  \n  \n  \n"
},
"clone_brush": {
"name": "clone_brush",
"args": {
"source_offset": {
"name": "source_offset",
"type": "TilePosition",
"doc": "Table with the following fields:   \n  * source_offset :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition)  \n  * destination_offset :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition)  \n  * source_positions :: array of [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition)  \n  * destination_surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  * destination_force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * clone_tiles :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If tiles should be cloned  \n  * clone_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If entities should be cloned  \n  * clone_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If decoratives should be cloned  \n  * clear_destination_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination entities should be cleared  \n  * clear_destination_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination decoratives should be cleared  \n  * expand_map :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination surface should be expanded when destination_area is outside current bounds. Default false.  \n  * manual_collision_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If manual-style collision checks should be done.  \n"
}
},
"type": "function",
"doc": "Clones the given area.  \n  \n**Parameters**  \nTable with the following fields:   \n  + source_offset :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition)  \n  + destination_offset :: [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition)  \n  + source_positions :: array of [TilePosition](https://lua-api.factorio.com/latest/Concepts.html#TilePosition)  \n  + destination_surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  + destination_force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + clone_tiles :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If tiles should be cloned  \n  + clone_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If entities should be cloned  \n  + clone_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If decoratives should be cloned  \n  + clear_destination_entities :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination entities should be cleared  \n  + clear_destination_decoratives :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination decoratives should be cleared  \n  + expand_map :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the destination surface should be expanded when destination_area is outside current bounds. Default false.  \n  + manual_collision_mode :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If manual-style collision checks should be done.  \n  \n  \n"
},
"clone_entities": {
"name": "clone_entities",
"args": {
"entities": {
"name": "entities",
"type": "array ofLuaEntity",
"doc": "Table with the following fields:   \n  * entities :: array of [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  * destination_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n  * destination_surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  * destination_force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  * snap_to_grid :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n"
}
},
"type": "function",
"doc": "Clones the given entities.  \n  \n**Parameters**  \nTable with the following fields:   \n  + entities :: array of [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  + destination_offset :: [Vector](https://lua-api.factorio.com/latest/Concepts.html#Vector)  \n  + destination_surface :: [SurfaceSpecification](https://lua-api.factorio.com/latest/Concepts.html#SurfaceSpecification) (optional)  \n  + destination_force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  + snap_to_grid :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional)  \n  \n  \n"
},
"clear": {
"name": "clear",
"args": {
"ignore_characters": {
"name": "ignore_characters",
"type": "boolean",
"doc": "ignore_characters :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether characters on this surface that are connected to or associated with players should be ignored (not destroyed)."
}
},
"type": "function",
"doc": "Clears this surface deleting all entities and chunks on it.  \n  \n**Parameters**  \nignore_characters :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Whether characters on this surface that are connected to or associated with players should be ignored (not destroyed).  \n  \n"
},
"request_path": {
"name": "request_path",
"returns": "uint",
"args": {
"bounding_box": {
"name": "bounding_box",
"type": "BoundingBox",
"doc": "Table with the following fields:   \n  * bounding_box :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \n  * collision_mask :: [CollisionMask](https://lua-api.factorio.com/latest/Concepts.html#CollisionMask) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  * start :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  * goal :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  * force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  * radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  How close we need to get to the goal. Default 1.  \n  * pathfind_flags :: [PathFindFlags](https://lua-api.factorio.com/latest/Concepts.html#PathFindFlags) (optional) :  Flags to affect the pathfinder.  \n  * can_open_gates :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the path request can open gates. Default false.  \n  * path_resolution_modifier :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  The resolution modifier of the pathing. Defaults to 0.  \n  * entity_to_ignore :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  If given, the pathfind will ignore collisions with this entity.  \n"
}
},
"type": "function",
"doc": "Starts a path find request without actually ordering a unit to move.\n Result is ultimately returned asynchronously via [defines.events.on_script_path_request_finished](https://lua-api.factorio.com/latest/defines.html#defines.events.on_script_path_request_finished) .  \n  \n**Parameters**  \nTable with the following fields:   \n  + bounding_box :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox)  \n  + collision_mask :: [CollisionMask](https://lua-api.factorio.com/latest/Concepts.html#CollisionMask) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  + start :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  + goal :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n  + force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string)  \n  + radius :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) (optional) :  How close we need to get to the goal. Default 1.  \n  + pathfind_flags :: [PathFindFlags](https://lua-api.factorio.com/latest/Concepts.html#PathFindFlags) (optional) :  Flags to affect the pathfinder.  \n  + can_open_gates :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  If the path request can open gates. Default false.  \n  + path_resolution_modifier :: [int](https://lua-api.factorio.com/latest/Builtin-Types.html#int) (optional) :  The resolution modifier of the pathing. Defaults to 0.  \n  + entity_to_ignore :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) (optional) :  If given, the pathfind will ignore collisions with this entity.  \n  \n  \n  \n**Return value**  \nA unique handle to identify this call when [defines.events.on_script_path_request_finished](https://lua-api.factorio.com/latest/defines.html#defines.events.on_script_path_request_finished) fires."
},
"get_script_areas": {
"name": "get_script_areas",
"returns": "array ofScriptArea",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)"
}
},
"type": "function",
"doc": "Gets the script areas that match the given name or if no name is given all areas are returned.  \n  \n**Parameters**  \nname :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  \n"
},
"get_script_area": {
"name": "get_script_area",
"returns": "ScriptArea",
"args": {
"key": {
"name": "key",
"type": "stringoruint",
"doc": "key :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The name or id of the area to get."
}
},
"type": "function",
"doc": "Gets the first script area by name or id.  \n  \n**Parameters**  \nkey :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The name or id of the area to get.  \n  \n"
},
"edit_script_area": {
"name": "edit_script_area",
"args": {
"id": {
"name": "id",
"type": "uint",
"doc": "id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The area to edit."
},
"area": {
"name": "area",
"type": "ScriptArea",
"doc": "area :: [ScriptArea](https://lua-api.factorio.com/latest/Concepts.html#ScriptArea)"
}
},
"type": "function",
"doc": "Sets the given script area to the new values.  \n  \n**Parameters**  \n* id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The area to edit.  \n* area :: [ScriptArea](https://lua-api.factorio.com/latest/Concepts.html#ScriptArea)  \n  \n"
},
"add_script_area": {
"name": "add_script_area",
"returns": "uint",
"args": {
"area": {
"name": "area",
"type": "ScriptArea",
"doc": "area :: [ScriptArea](https://lua-api.factorio.com/latest/Concepts.html#ScriptArea)"
}
},
"type": "function",
"doc": "Adds the given script area.  \n  \n**Parameters**  \narea :: [ScriptArea](https://lua-api.factorio.com/latest/Concepts.html#ScriptArea)  \n  \n  \n**Return value**  \nThe id of the created area."
},
"remove_script_area": {
"name": "remove_script_area",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint",
"doc": "id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Removes the given script area.  \n  \n**Parameters**  \nid :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n  \n**Return value**  \nIf the area was actually removed. False when it didn't exist."
},
"get_script_positions": {
"name": "get_script_positions",
"returns": "array ofScriptPosition",
"args": {
"name": {
"name": "name",
"type": "string",
"doc": "name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)"
}
},
"type": "function",
"doc": "Gets the script positions that match the given name or if no name is given all positions are returned.  \n  \n**Parameters**  \nname :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  \n"
},
"get_script_position": {
"name": "get_script_position",
"returns": "ScriptPosition",
"args": {
"key": {
"name": "key",
"type": "stringoruint",
"doc": "key :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The name or id of the position to get."
}
},
"type": "function",
"doc": "Gets the first script position by name or id.  \n  \n**Parameters**  \nkey :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) (optional) :  The name or id of the position to get.  \n  \n"
},
"edit_script_position": {
"name": "edit_script_position",
"args": {
"id": {
"name": "id",
"type": "uint",
"doc": "id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The position to edit."
},
"area": {
"name": "area",
"type": "ScriptPosition",
"doc": "area :: [ScriptPosition](https://lua-api.factorio.com/latest/Concepts.html#ScriptPosition)"
}
},
"type": "function",
"doc": "Sets the given script position to the new values.  \n  \n**Parameters**  \n* id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint) :  The position to edit.  \n* area :: [ScriptPosition](https://lua-api.factorio.com/latest/Concepts.html#ScriptPosition)  \n  \n"
},
"add_script_position": {
"name": "add_script_position",
"returns": "uint",
"args": {
"area": {
"name": "area",
"type": "ScriptPosition",
"doc": "area :: [ScriptPosition](https://lua-api.factorio.com/latest/Concepts.html#ScriptPosition)"
}
},
"type": "function",
"doc": "Adds the given script position.  \n  \n**Parameters**  \narea :: [ScriptPosition](https://lua-api.factorio.com/latest/Concepts.html#ScriptPosition)  \n  \n  \n**Return value**  \nThe id of the created position."
},
"remove_script_position": {
"name": "remove_script_position",
"returns": "boolean",
"args": {
"id": {
"name": "id",
"type": "uint",
"doc": "id :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Removes the given script position.  \n  \n**Parameters**  \nid :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n  \n**Return value**  \nIf the position was actually removed. False when it didn't exist."
},
"get_map_exchange_string": {
"name": "get_map_exchange_string",
"returns": "string",
"type": "function",
"doc": "Gets the map exchange string for the current map generation settings of this surface.  \n"
},
"get_starting_area_radius": {
"name": "get_starting_area_radius",
"returns": "double",
"type": "function",
"doc": "Gets the starting area radius of this surface.  \n"
},
"get_closest": {
"name": "get_closest",
"returns": "LuaEntity",
"args": {
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)"
},
"entities": {
"name": "entities",
"type": "array ofLuaEntity",
"doc": "entities :: array of [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The Entities to check"
}
},
"type": "function",
"doc": "Gets the closest entity in the list to this position.  \n  \n**Parameters**  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position)  \n* entities :: array of [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html) :  The Entities to check  \n  \n"
},
"get_train_stops": {
"name": "get_train_stops",
"returns": "array ofLuaEntity",
"args": {
"opts": {
"name": "opts",
"type": "stringorarray ofstring",
"doc": "opts (optional) :  Table with the following fields:   \n  * name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  * force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n"
}
},
"type": "function",
"doc": "Gets train stops matching the given filters.  \n  \n**Parameters**  \nopts (optional) :  Table with the following fields:   \n  + name :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) or array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional)  \n  + force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) (optional)  \n  \n  \n"
},
"get_total_pollution": {
"name": "get_total_pollution",
"returns": "double",
"type": "function",
"doc": "Gets the total amount of pollution on the surface by iterating over all of the chunks containing pollution.  \n"
},
"entity_prototype_collides": {
"name": "entity_prototype_collides",
"args": {
"prototype": {
"name": "prototype",
"type": "EntityPrototypeSpecification",
"doc": "prototype :: [EntityPrototypeSpecification](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification) :  The entity prototype to check"
},
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position to check"
},
"use_map_generation_bounding_box": {
"name": "use_map_generation_bounding_box",
"type": "boolean",
"doc": "use_map_generation_bounding_box :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If the map generation bounding box should be used instead of the collision bounding box"
},
"direction": {
"name": "direction",
"type": "defines.direction",
"doc": "direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)"
}
},
"type": "function",
"doc": "**Parameters**  \n* prototype :: [EntityPrototypeSpecification](https://lua-api.factorio.com/latest/Concepts.html#EntityPrototypeSpecification) :  The entity prototype to check  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position to check  \n* use_map_generation_bounding_box :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  If the map generation bounding box should be used instead of the collision bounding box  \n* direction :: [defines.direction](https://lua-api.factorio.com/latest/defines.html#defines.direction) (optional)  \n  \n"
},
"decorative_prototype_collides": {
"name": "decorative_prototype_collides",
"args": {
"prototype": {
"name": "prototype",
"type": "string",
"doc": "prototype :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The decorative prototype to check"
},
"position": {
"name": "position",
"type": "Position",
"doc": "position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position to check"
}
},
"type": "function",
"doc": "**Parameters**  \n* prototype :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  The decorative prototype to check  \n* position :: [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  The position to check  \n  \n"
},
"calculate_tile_properties": {
"name": "calculate_tile_properties",
"returns": "dictionarystring\u2192array ofdouble",
"args": {
"property_names": {
"name": "property_names",
"type": "array ofstring",
"doc": "property_names :: array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Names of properties (e.g. \"elevation\") to calculate"
},
"positions": {
"name": "positions",
"type": "array ofPosition",
"doc": "positions :: array of [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Positions for which to calculate property values"
}
},
"type": "function",
"doc": "**Parameters**  \n* property_names :: array of [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Names of properties (e.g. \"elevation\") to calculate  \n* positions :: array of [Position](https://lua-api.factorio.com/latest/Concepts.html#Position) :  Positions for which to calculate property values  \n  \n  \n**Return value**  \nTable of property value lists, keyed by property name"
},
"get_entities_with_force": {
"name": "get_entities_with_force",
"returns": "array ofLuaEntity",
"args": {
"position": {
"name": "position",
"type": "ChunkPosition",
"doc": "position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk's position."
},
"force": {
"name": "force",
"type": "LuaForceorstring",
"doc": "force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Entities of this force will be returned."
}
},
"type": "function",
"doc": "Returns all the entities with force on this chunk for the given force.  \n  \n**Parameters**  \n* position :: [ChunkPosition](https://lua-api.factorio.com/latest/Concepts.html#ChunkPosition) :  The chunk's position.  \n* force :: [LuaForce](https://lua-api.factorio.com/latest/LuaForce.html) or [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) :  Entities of this force will be returned.  \n  \n"
},
"build_checkerboard": {
"name": "build_checkerboard",
"args": {
"area": {
"name": "area",
"type": "BoundingBox",
"doc": "area :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The tile area."
}
},
"type": "function",
"doc": "Sets the given area to the checkerboard lab tiles.  \n  \n**Parameters**  \narea :: [BoundingBox](https://lua-api.factorio.com/latest/Concepts.html#BoundingBox) :  The tile area.  \n  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[RW]",
"doc": "The name of this surface. Names are unique among surfaces.  \n **Note:** the default surface can't be renamed."
},
"index": {
"name": "index",
"type": "uint",
"mode": "[R]",
"doc": "Unique ID associated with this surface.  \n"
},
"map_gen_settings": {
"name": "map_gen_settings",
"type": "MapGenSettings",
"mode": "[RW]",
"doc": "The generation settings for the surface.  \n can be used to adjust the surface after changing generation settings.  \n **Note:** When changing settings runtime the game will not retroactively change anything. **Note:** [LuaSurface::regenerate_entity](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.regenerate_entity) , [LuaSurface::regenerate_decorative](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.regenerate_decorative) , and [LuaSurface::delete_chunk](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk)"
},
"generate_with_lab_tiles": {
"name": "generate_with_lab_tiles",
"type": "boolean",
"mode": "[RW]",
"doc": "When set to true, new chunks will be generated with lab tiles, instead of using the surface's map generation settings.  \n"
},
"always_day": {
"name": "always_day",
"type": "boolean",
"mode": "[RW]",
"doc": "When set to true, the sun will always shine.  \n"
},
"daytime": {
"name": "daytime",
"type": "float",
"mode": "[RW]",
"doc": "Current time of day, as a number in range [0, 1).  \n"
},
"darkness": {
"name": "darkness",
"type": "float",
"mode": "[R]",
"doc": "Amount of darkness at the current time.  \n"
},
"wind_speed": {
"name": "wind_speed",
"type": "float",
"mode": "[RW]",
"doc": "Current wind speed.  \n"
},
"wind_orientation": {
"name": "wind_orientation",
"type": "float",
"mode": "[RW]",
"doc": "Current wind direction.  \n"
},
"wind_orientation_change": {
"name": "wind_orientation_change",
"type": "float",
"mode": "[RW]",
"doc": "Change in wind orientation per tick.  \n"
},
"peaceful_mode": {
"name": "peaceful_mode",
"type": "boolean",
"mode": "[RW]",
"doc": "Is peaceful mode enabled on this surface?  \n"
},
"freeze_daytime": {
"name": "freeze_daytime",
"type": "boolean",
"mode": "[RW]",
"doc": "True if daytime is currently frozen.  \n"
},
"ticks_per_day": {
"name": "ticks_per_day",
"type": "uint",
"mode": "[RW]",
"doc": "The number of ticks per day for this surface.  \n"
},
"dusk": {
"name": "dusk",
"type": "double",
"mode": "[RW]",
"doc": "The daytime when dusk starts.  \n"
},
"dawn": {
"name": "dawn",
"type": "double",
"mode": "[RW]",
"doc": "The daytime when dawn starts.  \n"
},
"evening": {
"name": "evening",
"type": "double",
"mode": "[RW]",
"doc": "The daytime when evening starts.  \n"
},
"morning": {
"name": "morning",
"type": "double",
"mode": "[RW]",
"doc": "The daytime when morning starts.  \n"
},
"solar_power_multiplier": {
"name": "solar_power_multiplier",
"type": "double",
"mode": "[RW]",
"doc": "The multiplier of solar power on this surface. Cannot be less than 0.  \n **Note:** Solar equipment is still limited to its maximum power output."
},
"min_brightness": {
"name": "min_brightness",
"type": "double",
"mode": "[RW]",
"doc": "The minimal brightness during the night. Default is ````0.15```` .\n The value has an effect on the game simalution only, it doesn't have any effect on rendering.  \n"
},
"brightness_visual_weights": {
"name": "brightness_visual_weights",
"type": "ColorModifier",
"mode": "[RW]",
"doc": "Defines how surface daytime brightness influences each color channel of the current color lookup table (LUT).  \n The LUT is multiplied by ````((1 - weight) + brightness * weight)```` and result is clamped to range [0, 1].  \n Default is ````{0, 0, 0}```` , which means no influence.  \n Example Makes night on the surface pitch black, assuming [LuaSurface::min_brightness](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.min_brightness) being set to default value ````0.15```` . ````game.surfaces[1].brightness_visual_weights\u00a0=\u00a0{\u00a01\u00a0/\u00a00.85,\u00a01\u00a0/\u00a00.85,\u00a01\u00a0/\u00a00.85\u00a0}````"
},
"show_clouds": {
"name": "show_clouds",
"type": "boolean",
"mode": "[RW]",
"doc": "If clouds are shown on this surface.  \n **Note:** If false, clouds are never shown. If true the player must also have clouds enabled in graphics settings for them to be shown."
}
},
"inherits": []
},
"LuaTechnology": {
"name": "LuaTechnology",
"type": "LuaTechnology",
"doc": "One research item.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"reload": {
"name": "reload",
"type": "function",
"doc": "Reload this technology from its prototype.  \n"
},
"force": {
"name": "force",
"type": "LuaForce",
"mode": "[R]",
"doc": "The force this technology belongs to.  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this technology.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]",
"doc": "Localised name of this technology.  \n"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"prototype": {
"name": "prototype",
"type": "LuaTechnologyPrototype",
"mode": "[R]",
"doc": "The prototype of this technology.  \n"
},
"enabled": {
"name": "enabled",
"type": "boolean",
"mode": "[RW]",
"doc": "Can this technology be researched?  \n"
},
"visible_when_disabled": {
"name": "visible_when_disabled",
"type": "boolean",
"mode": "[RW]",
"doc": "If this technology will be visible in the research GUI even though it is disabled.  \n"
},
"upgrade": {
"name": "upgrade",
"type": "boolean",
"mode": "[R]",
"doc": "Is this an upgrade-type research?  \n"
},
"researched": {
"name": "researched",
"type": "boolean",
"mode": "[RW]",
"doc": "Has this technology been researched? Switching from ````false```` to ````true```` will trigger the technology\n advancement perks; switching from ````true```` to ````false```` will reverse them.  \n"
},
"prerequisites": {
"name": "prerequisites",
"type": "dictionarystring\u2192LuaTechnology",
"mode": "[R]",
"doc": "Prerequisites of this technology. The result maps technology name to the [LuaTechnology](https://lua-api.factorio.com/latest/LuaTechnology.html) object.  \n"
},
"research_unit_ingredients": {
"name": "research_unit_ingredients",
"type": "array ofIngredient",
"mode": "[R]",
"doc": "Ingredients labs will require to research this technology.  \n See also   \n  * [LuaTechnology::research_unit_count](https://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.research_unit_count)  \n"
},
"effects": {
"name": "effects",
"type": "array ofModifier",
"mode": "[R]",
"doc": "Effects applied when this technology is researched.  \n"
},
"research_unit_count": {
"name": "research_unit_count",
"type": "uint",
"mode": "[R]",
"doc": "Number of research units required for this technology.  \n **Note:** This is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.ignore_tech_cost_multiplier) is ````true```` . See also   \n  * [LuaTechnology::research_unit_ingredients](https://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.research_unit_ingredients)  \n"
},
"research_unit_energy": {
"name": "research_unit_energy",
"type": "double",
"mode": "[R]",
"doc": "Amount of energy required to finish a unit of research.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string for this prototype.  \n"
},
"level": {
"name": "level",
"type": "uint",
"mode": "[RW]",
"doc": "The current level of this technology. For level-based technology writing to this is the same as researching the technology to the *previous* level. Writing the level will set [LuaTechnology::enabled](https://lua-api.factorio.com/latest/LuaTechnology.html#LuaTechnology.enabled) to ````true```` .  \n"
},
"research_unit_count_formula": {
"name": "research_unit_count_formula",
"type": "string",
"mode": "[R]",
"doc": "The count formula used for this infinite research or nil if this isn't an infinite research.  \n See also   \n  * [LuaGameScript::evaluate_expression](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.evaluate_expression)  \n"
}
},
"inherits": []
},
"LuaTechnologyPrototype": {
"name": "LuaTechnologyPrototype",
"type": "LuaTechnologyPrototype",
"doc": "A Technology prototype.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this technology.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]",
"doc": "Localised name of this technology.  \n"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"enabled": {
"name": "enabled",
"type": "boolean",
"mode": "[R]",
"doc": "If this technology prototype is enabled by default (enabled at the beginning of a game).  \n"
},
"hidden": {
"name": "hidden",
"type": "boolean",
"mode": "[R]",
"doc": "If this technology prototype is hidden.  \n"
},
"visible_when_disabled": {
"name": "visible_when_disabled",
"type": "boolean",
"mode": "[R]",
"doc": "If this technology will be visible in the research GUI even though it is disabled.  \n"
},
"ignore_tech_cost_multiplier": {
"name": "ignore_tech_cost_multiplier",
"type": "boolean",
"mode": "[R]",
"doc": "If this technology ignores the technology cost multiplier setting.  \n **Note:** [LuaTechnologyPrototype::research_unit_count](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_count) will already take this setting into account."
},
"upgrade": {
"name": "upgrade",
"type": "boolean",
"mode": "[R]",
"doc": "If the is technology prototype is an upgrade to some other technology.  \n"
},
"prerequisites": {
"name": "prerequisites",
"type": "dictionarystring\u2192LuaTechnologyPrototype",
"mode": "[R]",
"doc": "Prerequisites of this technology. The result maps technology name to the [LuaTechnologyPrototype](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html) object.  \n"
},
"research_unit_ingredients": {
"name": "research_unit_ingredients",
"type": "array ofIngredient",
"mode": "[R]",
"doc": "Ingredients labs will require to research this technology.  \n See also   \n  * [LuaTechnologyPrototype::research_unit_count](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_count)  \n"
},
"effects": {
"name": "effects",
"type": "array ofModifier",
"mode": "[R]",
"doc": "Effects applied when this technology is researched.  \n"
},
"research_unit_count": {
"name": "research_unit_count",
"type": "uint",
"mode": "[R]",
"doc": "Number of research units required for this technology.  \n **Note:** This is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.ignore_tech_cost_multiplier) is ````true```` . See also   \n  * [LuaTechnologyPrototype::research_unit_ingredients](https://lua-api.factorio.com/latest/LuaTechnologyPrototype.html#LuaTechnologyPrototype.research_unit_ingredients)  \n"
},
"research_unit_energy": {
"name": "research_unit_energy",
"type": "double",
"mode": "[R]",
"doc": "Amount of energy required to finish a unit of research.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string for this prototype.  \n"
},
"level": {
"name": "level",
"type": "uint",
"mode": "[R]",
"doc": "The level of this research.  \n"
},
"max_level": {
"name": "max_level",
"type": "uint",
"mode": "[R]",
"doc": "The max level of this research.  \n"
},
"research_unit_count_formula": {
"name": "research_unit_count_formula",
"type": "string",
"mode": "[R]",
"doc": "The count formula used for this infinite research or nil if this isn't an infinite research.  \n See also   \n  * [LuaGameScript::evaluate_expression](https://lua-api.factorio.com/latest/LuaGameScript.html#LuaGameScript.evaluate_expression)  \n"
}
},
"inherits": []
},
"LuaTile": {
"name": "LuaTile",
"type": "LuaTile",
"doc": "A single \"square\" on the map.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"collides_with": {
"name": "collides_with",
"returns": "boolean",
"args": {
"layer": {
"name": "layer",
"type": "CollisionMaskLayer",
"doc": "layer :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer)"
}
},
"type": "function",
"doc": "What type of things can collide with this tile?  \n  \n**Parameters**  \nlayer :: [CollisionMaskLayer](https://lua-api.factorio.com/latest/Concepts.html#CollisionMaskLayer)  \n  \n"
},
"to_be_deconstructed": {
"name": "to_be_deconstructed",
"returns": "boolean",
"type": "function",
"doc": "Is this tile marked for deconstruction?  \n"
},
"order_deconstruction": {
"name": "order_deconstruction",
"returns": "LuaEntity",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose robots are supposed to do the deconstruction."
},
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any."
}
},
"type": "function",
"doc": "Orders deconstruction of this tile by the given force.  \n  \n**Parameters**  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force whose robots are supposed to do the deconstruction.  \n* player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  \n  \n**Return value**  \nThe deconstructible tile proxy created if any or ````nil```` ."
},
"cancel_deconstruction": {
"name": "cancel_deconstruction",
"args": {
"force": {
"name": "force",
"type": "ForceSpecification",
"doc": "force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force who did the deconstruction order."
},
"player": {
"name": "player",
"type": "PlayerSpecification",
"doc": "player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any."
}
},
"type": "function",
"doc": "Cancels deconstruction if it is scheduled, does nothing otherwise.  \n  \n**Parameters**  \n* force :: [ForceSpecification](https://lua-api.factorio.com/latest/Concepts.html#ForceSpecification) :  The force who did the deconstruction order.  \n* player :: [PlayerSpecification](https://lua-api.factorio.com/latest/Concepts.html#PlayerSpecification) (optional) :  The player to set the last_user to if any.  \n  \n"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Prototype name of this tile. E.g. ````\"sand-3\"```` or ````\"grass-2\"```` .  \n"
},
"prototype": {
"name": "prototype",
"type": "LuaTilePrototype",
"mode": "[R]"
},
"position": {
"name": "position",
"type": "Position",
"mode": "[R]",
"doc": "The position this tile references.  \n"
},
"hidden_tile": {
"name": "hidden_tile",
"type": "string",
"mode": "[R]"
},
"surface": {
"name": "surface",
"type": "LuaSurface",
"mode": "[R]",
"doc": "The surface this tile is on.  \n"
}
},
"inherits": []
},
"LuaTilePrototype": {
"name": "LuaTilePrototype",
"type": "LuaTilePrototype",
"doc": "Prototype of a tile.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"collision_mask": {
"name": "collision_mask",
"type": "CollisionMask",
"mode": "[R]",
"doc": "The collision mask this tile uses  \n"
},
"collision_mask_with_flags": {
"name": "collision_mask_with_flags",
"type": "CollisionMaskWithFlags",
"mode": "[R]"
},
"layer": {
"name": "layer",
"type": "uint",
"mode": "[R]"
},
"autoplace_specification": {
"name": "autoplace_specification",
"type": "AutoplaceSpecification",
"mode": "[R]",
"doc": "Autoplace specification for this prototype. ````nil```` if none.  \n"
},
"walking_speed_modifier": {
"name": "walking_speed_modifier",
"type": "float",
"mode": "[R]"
},
"vehicle_friction_modifier": {
"name": "vehicle_friction_modifier",
"type": "float",
"mode": "[R]"
},
"map_color": {
"name": "map_color",
"type": "Color",
"mode": "[R]"
},
"decorative_removal_probability": {
"name": "decorative_removal_probability",
"type": "float",
"mode": "[R]",
"doc": "The probability that decorative entities will be removed from on top of this tile when this tile is generated.  \n"
},
"automatic_neighbors": {
"name": "automatic_neighbors",
"type": "boolean",
"mode": "[R]"
},
"allowed_neighbors": {
"name": "allowed_neighbors",
"type": "dictionarystring\u2192LuaTilePrototype",
"mode": "[R]"
},
"needs_correction": {
"name": "needs_correction",
"type": "boolean",
"mode": "[R]",
"doc": "If this tile needs correction logic applied when it's generated in the world..  \n"
},
"mineable_properties": {
"name": "mineable_properties",
"type": "table",
"mode": "[R]",
"doc": "It is a table:  \n   \n  * minable :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) :  Is this tile mineable at all?  \n  * miningtime :: [double](https://lua-api.factorio.com/latest/Builtin-Types.html#double) :  Energy required to mine a tile.  \n  * miningparticle :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the particle produced when mining this tile.\n     Will only be present if this tile produces any particle during mining.  \n  * products :: array of [Product](https://lua-api.factorio.com/latest/Concepts.html#Product) :  Products obtained by mining this tile.  \n"
},
"next_direction": {
"name": "next_direction",
"type": "LuaTilePrototype",
"mode": "[R]",
"doc": "The next direction of this tile or ````nil```` - used when a tile has multiple directions (such as hazard concrete)  \n"
},
"items_to_place_this": {
"name": "items_to_place_this",
"type": "array ofSimpleItemStack",
"mode": "[R]",
"doc": "Items that when placed will produce this tile. It is a dictionary indexed by the item prototype name.  \n"
},
"can_be_part_of_blueprint": {
"name": "can_be_part_of_blueprint",
"type": "boolean",
"mode": "[R]",
"doc": "False if this tile is not allowed in blueprints regardless of the ability to build it.  \n"
},
"emissions_per_second": {
"name": "emissions_per_second",
"type": "double",
"mode": "[R]",
"doc": "Amount of pollution emissions per second this tile will absorb.  \n"
}
},
"inherits": []
},
"LuaTrain": {
"name": "LuaTrain",
"type": "LuaTrain",
"doc": "A train. Trains are a sequence of connected rolling stocks -- locomotives and wagons.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"get_item_count": {
"name": "get_item_count",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Item name to count. If not given, counts all items."
}
},
"type": "function",
"doc": "Get the amount of a particular item stored in the train.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Item name to count. If not given, counts all items.  \n  \n"
},
"get_contents": {
"name": "get_contents",
"returns": "dictionarystring\u2192uint",
"type": "function",
"doc": "Get a mapping of the train's inventory.  \n  \n**Return value**  \nThe counts, indexed by item names."
},
"remove_item": {
"name": "remove_item",
"returns": "uint",
"args": {
"stack": {
"name": "stack",
"type": "ItemStackSpecification",
"doc": "stack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  The amount and type of items to remove"
}
},
"type": "function",
"doc": "Remove some items from the train.  \n  \n**Parameters**  \nstack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  The amount and type of items to remove  \n  \n  \n**Return value**  \nNumber of items actually removed."
},
"insert": {
"name": "insert",
"args": {
"stack": {
"name": "stack",
"type": "ItemStackSpecification",
"doc": "stack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
}
},
"type": "function",
"doc": "Insert a stack into the train.  \n  \n**Parameters**  \nstack :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)  \n  \n"
},
"clear_items_inside": {
"name": "clear_items_inside",
"type": "function",
"doc": "Clear all items in this train.  \n"
},
"recalculate_path": {
"name": "recalculate_path",
"returns": "boolean",
"args": {
"force": {
"name": "force",
"type": "boolean",
"doc": "force :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Forces the train to re-path regardless of the current path being valid or not."
}
},
"type": "function",
"doc": "Checks if the path is invalid and tries to re-path if it isn't.  \n  \n**Parameters**  \nforce :: [boolean](https://lua-api.factorio.com/latest/Builtin-Types.html#boolean) (optional) :  Forces the train to re-path regardless of the current path being valid or not.  \n  \n  \n**Return value**  \nIf the train has a path after the repath attempt."
},
"get_fluid_count": {
"name": "get_fluid_count",
"returns": "double",
"args": {
"fluid": {
"name": "fluid",
"type": "string",
"doc": "fluid :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Fluid name to count. If not given, counts all fluids."
}
},
"type": "function",
"doc": "Get the amount of a particular fluid stored in the train.  \n  \n**Parameters**  \nfluid :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Fluid name to count. If not given, counts all fluids.  \n  \n"
},
"get_fluid_contents": {
"name": "get_fluid_contents",
"returns": "dictionarystring\u2192double",
"type": "function",
"doc": "Gets a mapping of the train's fluid inventory.  \n  \n**Return value**  \nThe counts, indexed by fluid names."
},
"remove_fluid": {
"name": "remove_fluid",
"returns": "double",
"args": {
"fluid": {
"name": "fluid",
"type": "Fluid",
"doc": "fluid :: [Fluid](https://lua-api.factorio.com/latest/Concepts.html#Fluid)"
}
},
"type": "function",
"doc": "Remove some fluid from the train.  \n  \n**Parameters**  \nfluid :: [Fluid](https://lua-api.factorio.com/latest/Concepts.html#Fluid)  \n  \n  \n**Return value**  \nThe amount of fluid actually removed."
},
"insert_fluid": {
"name": "insert_fluid",
"returns": "double",
"args": {
"fluid": {
"name": "fluid",
"type": "Fluid",
"doc": "fluid :: [Fluid](https://lua-api.factorio.com/latest/Concepts.html#Fluid)"
}
},
"type": "function",
"doc": "Inserts the given fluid into the first available location in this train.  \n  \n**Parameters**  \nfluid :: [Fluid](https://lua-api.factorio.com/latest/Concepts.html#Fluid)  \n  \n  \n**Return value**  \nThe amount inserted."
},
"clear_fluids_inside": {
"name": "clear_fluids_inside",
"type": "function",
"doc": "Clears all fluids in this train.  \n"
},
"go_to_station": {
"name": "go_to_station",
"args": {
"index": {
"name": "index",
"type": "uint",
"doc": "index :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)"
}
},
"type": "function",
"doc": "Go to the station specified by the index in the train's schedule.  \n  \n**Parameters**  \nindex :: [uint](https://lua-api.factorio.com/latest/Builtin-Types.html#uint)  \n  \n"
},
"get_rails": {
"name": "get_rails",
"returns": "array ofLuaEntity",
"type": "function",
"doc": "Gets all rails under the train.  \n"
},
"manual_mode": {
"name": "manual_mode",
"type": "boolean",
"mode": "[RW]",
"doc": "When ````true```` , the train is explicitly controlled by the player or script. When ````false```` , the\n train moves autonomously according to its schedule.  \n"
},
"speed": {
"name": "speed",
"type": "double",
"mode": "[RW]",
"doc": "Current speed.  \n **Note:** Changing the speed of the train is potentially an unsafe operation because train\n       uses the speed for its internal calculations of break distances, etc."
},
"max_forward_speed": {
"name": "max_forward_speed",
"type": "double",
"mode": "[R]",
"doc": "Current max speed when moving forward, depends on locomotive prototype and fuel.  \n"
},
"max_backward_speed": {
"name": "max_backward_speed",
"type": "double",
"mode": "[R]",
"doc": "Current max speed when moving backwards, depends on locomotive prototype and fuel.  \n"
},
"weight": {
"name": "weight",
"type": "double",
"mode": "[R]",
"doc": "The weight of this train.  \n"
},
"carriages": {
"name": "carriages",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "Rolling stocks the train is composed of.  \n"
},
"locomotives": {
"name": "locomotives",
"type": "dictionarystring\u2192array ofLuaEntity",
"mode": "[R]",
"doc": "Arrays of locomotives. The result is two arrays, indexed by ````\"front_movers\"```` and ````\"back_movers\"```` containing the locomotives. E.g. ````{front_movers={loco1, loco2}, back_movers={loco3}}```` .  \n"
},
"cargo_wagons": {
"name": "cargo_wagons",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "The cargo carriages the train contains.  \n"
},
"fluid_wagons": {
"name": "fluid_wagons",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "The fluid carriages the train contains.  \n"
},
"schedule": {
"name": "schedule",
"type": "TrainSchedule",
"mode": "[RW]",
"doc": "The trains current schedule or ````nil```` if empty. Set to ````nil```` to clear.  \n **Note:** The schedule can't be changed by modifying the returned table. Instead, changes must\n       be made by assigning a new table to this attribute."
},
"state": {
"name": "state",
"type": "defines.train_state",
"mode": "[R]",
"doc": "This train's current state.  \n"
},
"front_rail": {
"name": "front_rail",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The rail at the front end of the train, possibly ````nil```` .  \n"
},
"back_rail": {
"name": "back_rail",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The rail at the back end of the train, possibly ````nil```` .  \n"
},
"rail_direction_from_front_rail": {
"name": "rail_direction_from_front_rail",
"type": "defines.rail_direction",
"mode": "[R]"
},
"rail_direction_from_back_rail": {
"name": "rail_direction_from_back_rail",
"type": "defines.rail_direction",
"mode": "[R]"
},
"front_stock": {
"name": "front_stock",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The front stock of this train or ````nil```` .  \n"
},
"back_stock": {
"name": "back_stock",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The back stock of this train or ````nil```` .  \n"
},
"station": {
"name": "station",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The train stop this train is stopped at or ````nil```` .  \n"
},
"has_path": {
"name": "has_path",
"type": "boolean",
"mode": "[R]",
"doc": "If this train has a path.  \n"
},
"path_end_rail": {
"name": "path_end_rail",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The destination rail this train is currently pathing to or ````nil```` .  \n"
},
"path_end_stop": {
"name": "path_end_stop",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The destination train stop this train is currently pathing to or ````nil```` .  \n"
},
"id": {
"name": "id",
"type": "uint",
"mode": "[R]",
"doc": "The unique train ID.  \n"
},
"passengers": {
"name": "passengers",
"type": "array ofLuaPlayer",
"mode": "[R]",
"doc": "The player passengers on the train  \n **Note:** This does *not* index using player index. See [LuaPlayer::index](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.index) on each player instance for the player index."
},
"riding_state": {
"name": "riding_state",
"type": "RidingState",
"mode": "[R]",
"doc": "The riding state of this train.  \n"
},
"killed_players": {
"name": "killed_players",
"type": "dictionaryuint\u2192uint",
"mode": "[R]",
"doc": "The players killed by this train.  \n The keys are the player indexes, the values are how often this train killed that player.  \n"
},
"kill_count": {
"name": "kill_count",
"type": "uint",
"mode": "[R]",
"doc": "The total number of kills by this train.  \n"
},
"path": {
"name": "path",
"type": "LuaRailPath",
"mode": "[R]",
"doc": "The path this train is using or ````nil```` if none.  \n"
},
"signal": {
"name": "signal",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The signal this train is arriving or waiting at or ````nil```` if none.  \n"
}
},
"inherits": []
},
"LuaTrainStopControlBehavior": {
"name": "LuaTrainStopControlBehavior",
"type": "LuaTrainStopControlBehavior",
"doc": "Control behavior for train stops.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"send_to_train": {
"name": "send_to_train",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the train stop should send the circuit network contents to the train to use.  \n"
},
"read_from_train": {
"name": "read_from_train",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the train stop should send the train contents to the circuit network.  \n"
},
"read_stopped_train": {
"name": "read_stopped_train",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the train stop should send the stopped train id to the circuit network.  \n"
},
"set_trains_limit": {
"name": "set_trains_limit",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the trains_limit_signal is used to set a limit of trains incoming for train stop.  \n"
},
"read_trains_count": {
"name": "read_trains_count",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the train stop should send amount of incoming trains to the circuit network.  \n"
},
"enable_disable": {
"name": "enable_disable",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if the train stop is enabled/disabled through the circuit network.  \n"
},
"stopped_train_signal": {
"name": "stopped_train_signal",
"type": "SignalID",
"mode": "[RW]",
"doc": "The signal that will be sent when using the send-train-id option.  \n"
},
"trains_count_signal": {
"name": "trains_count_signal",
"type": "SignalID",
"mode": "[RW]",
"doc": "The signal that will be sent when using the read-trains-count option.  \n"
},
"trains_limit_signal": {
"name": "trains_limit_signal",
"type": "SignalID",
"mode": "[RW]",
"doc": "The signal to be used by set-trains-limit to limit amount of incoming trains  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
},
"disabled": {
"name": "disabled",
"type": "boolean",
"mode": "[R]",
"doc": "If the entity is currently disabled because of the control behavior.  \n"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The circuit condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the circuit condition. Example Tell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 chain\n   signals. ````a_behavior.circuit_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"logistic_condition": {
"name": "logistic_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The logistic condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the logistic condition. Example Tell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more than\n   4 chain signals. ````a_behavior.logistic_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"connect_to_logistic_network": {
"name": "connect_to_logistic_network",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if this should connect to the logistic network.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity",
"Inherited from LuaGenericOnOffControlBehavior : disabled , circuit_condition , logistic_condition , connect_to_logistic_network"
]
},
"LuaTransportBeltControlBehavior": {
"name": "LuaTransportBeltControlBehavior",
"type": "LuaTransportBeltControlBehavior",
"doc": "Control behavior for transport belts.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"enable_disable": {
"name": "enable_disable",
"type": "boolean",
"mode": "[RW]",
"doc": "If the belt will be enabled/disabled based off the circuit network.  \n"
},
"read_contents": {
"name": "read_contents",
"type": "boolean",
"mode": "[RW]",
"doc": "If the belt will read the contents and send them to the circuit network.  \n"
},
"read_contents_mode": {
"name": "read_contents_mode",
"type": "defines.control_behavior.transport_belt.content_read_mode",
"mode": "[RW]",
"doc": "The read mode for the belt.  \n"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
},
"disabled": {
"name": "disabled",
"type": "boolean",
"mode": "[R]",
"doc": "If the entity is currently disabled because of the control behavior.  \n"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The circuit condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the circuit condition. Example Tell an entity to be active (e.g. a lamp to be lit) when it receives a circuit signal of more than 4 chain\n   signals. ````a_behavior.circuit_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"logistic_condition": {
"name": "logistic_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The logistic condition.  \n **Note:** ````condition```` may be ````nil```` in order to clear the logistic condition. Example Tell an entity to be active (e.g. a lamp to be lit) when the logistics network it's connected to has more than\n   4 chain signals. ````a_behavior.logistic_condition\u00a0=\u00a0{condition={comparator=\">\", first_signal={type=\"item\",\u00a0name=\"rail-chain-signal\"}, constant=4}}````"
},
"connect_to_logistic_network": {
"name": "connect_to_logistic_network",
"type": "boolean",
"mode": "[RW]",
"doc": "````true```` if this should connect to the logistic network.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity",
"Inherited from LuaGenericOnOffControlBehavior : disabled , circuit_condition , logistic_condition , connect_to_logistic_network"
]
},
"LuaTransportLine": {
"name": "LuaTransportLine",
"type": "LuaTransportLine",
"doc": "One line on a transport belt.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"clear": {
"name": "clear",
"type": "function",
"doc": "Remove all items from this transport line.  \n"
},
"get_item_count": {
"name": "get_item_count",
"returns": "uint",
"args": {
"item": {
"name": "item",
"type": "string",
"doc": "item :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items."
}
},
"type": "function",
"doc": "Count some or all items on this line.  \n  \n**Parameters**  \nitem :: [string](https://lua-api.factorio.com/latest/Builtin-Types.html#string) (optional) :  Prototype name of the item to count. If not specified, count all items.  \n  \n  \n**See also**  \nSee also   \n  * [LuaInventory::get_item_count](https://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_item_count)  \n"
},
"remove_item": {
"name": "remove_item",
"returns": "uint",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove."
}
},
"type": "function",
"doc": "Remove some items from this line.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to remove.  \n  \n  \n**Return value**  \nNumber of items actually removed."
},
"can_insert_at": {
"name": "can_insert_at",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "float",
"doc": "position :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Where to insert an item."
}
},
"type": "function",
"doc": "Can an item be inserted at a given position?  \n  \n**Parameters**  \nposition :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Where to insert an item.  \n  \n"
},
"can_insert_at_back": {
"name": "can_insert_at_back",
"returns": "boolean",
"type": "function",
"doc": "Can an item be inserted at the back of this line?  \n"
},
"insert_at": {
"name": "insert_at",
"returns": "boolean",
"args": {
"position": {
"name": "position",
"type": "float",
"doc": "position :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Where on the line to insert the items."
},
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert."
}
},
"type": "function",
"doc": "Insert items at a given position.  \n  \n**Parameters**  \n* position :: [float](https://lua-api.factorio.com/latest/Builtin-Types.html#float) :  Where on the line to insert the items.  \n* items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification) :  Items to insert.  \n  \n  \n**Return value**  \nWere the items inserted successfully?"
},
"insert_at_back": {
"name": "insert_at_back",
"returns": "boolean",
"args": {
"items": {
"name": "items",
"type": "ItemStackSpecification",
"doc": "items :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)"
}
},
"type": "function",
"doc": "Insert items at the back of this line.  \n  \n**Parameters**  \nitems :: [ItemStackSpecification](https://lua-api.factorio.com/latest/Concepts.html#ItemStackSpecification)  \n  \n  \n**Return value**  \nWere the items inserted successfully?"
},
"get_contents": {
"name": "get_contents",
"returns": "dictionarystring\u2192uint",
"type": "function",
"doc": "Get counts of all items on this line.  \n  \n**Return value**  \nThe counts, indexed by item names.  \n**See also**  \nSee also   \n  * [LuaInventory::get_contents](https://lua-api.factorio.com/latest/LuaInventory.html#LuaInventory.get_contents)  \n"
},
"line_equals": {
"name": "line_equals",
"returns": "boolean",
"args": {
"other": {
"name": "other",
"type": "LuaTransportLine",
"doc": "other :: [LuaTransportLine](https://lua-api.factorio.com/latest/LuaTransportLine.html)"
}
},
"type": "function",
"doc": "Returns whether the associated internal transport line of this line is the same as the others associated internal transport line.  \n  \n**Parameters**  \nother :: [LuaTransportLine](https://lua-api.factorio.com/latest/LuaTransportLine.html)  \n  \n"
},
"operator #": {
"name": "operator #",
"type": "uint",
"mode": "[R]",
"doc": "Get the number of items on this transport line.  \n"
},
"owner": {
"name": "owner",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this transport line belongs to.  \n"
},
"output_lines": {
"name": "output_lines",
"type": "array ofLuaTransportLine",
"mode": "[R]",
"doc": "The transport lines that this transport line outputs items to or an empty table if none.  \n"
},
"input_lines": {
"name": "input_lines",
"type": "array ofLuaTransportLine",
"mode": "[R]",
"doc": "The transport lines that this transport line is fed by or an empty table if none.  \n"
},
"operator []": {
"name": "operator []",
"type": "LuaItemStack",
"mode": "[R]",
"doc": "The indexing operator.  \n"
}
},
"inherits": []
},
"LuaTrivialSmokePrototype": {
"name": "LuaTrivialSmokePrototype",
"type": "LuaTrivialSmokePrototype",
"doc": "Prototype of a trivial smoke.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"color": {
"name": "color",
"type": "Color",
"mode": "[R]"
},
"start_scale": {
"name": "start_scale",
"type": "double",
"mode": "[R]"
},
"end_scale": {
"name": "end_scale",
"type": "double",
"mode": "[R]"
},
"movement_slow_down_factor": {
"name": "movement_slow_down_factor",
"type": "double",
"mode": "[R]"
},
"duration": {
"name": "duration",
"type": "uint",
"mode": "[R]"
},
"spread_duration": {
"name": "spread_duration",
"type": "uint",
"mode": "[R]"
},
"fade_away_duration": {
"name": "fade_away_duration",
"type": "uint",
"mode": "[R]"
},
"fade_in_duration": {
"name": "fade_in_duration",
"type": "uint",
"mode": "[R]"
},
"glow_fade_away_duration": {
"name": "glow_fade_away_duration",
"type": "uint",
"mode": "[R]"
},
"cyclic": {
"name": "cyclic",
"type": "boolean",
"mode": "[R]"
},
"affected_by_wind": {
"name": "affected_by_wind",
"type": "boolean",
"mode": "[R]"
},
"show_when_smoke_off": {
"name": "show_when_smoke_off",
"type": "boolean",
"mode": "[R]"
},
"glow_animation": {
"name": "glow_animation",
"type": "boolean",
"mode": "[R]"
},
"render_layer": {
"name": "render_layer",
"type": "RenderLayer",
"mode": "[R]"
}
},
"inherits": []
},
"LuaUnitGroup": {
"name": "LuaUnitGroup",
"type": "LuaUnitGroup",
"doc": "A collection of units moving and attacking together. The engine creates autonomous unit groups to attack\n polluted areas. The script can create and control such groups as well. Groups can accept commands in the\n same manner as regular units.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"add_member": {
"name": "add_member",
"args": {
"unit": {
"name": "unit",
"type": "LuaEntity",
"doc": "unit :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)"
}
},
"type": "function",
"doc": "Make a unit a member of this group. Has the same effect as giving a ````group_command```` with this\n group to the unit.  \n  \n**Parameters**  \nunit :: [LuaEntity](https://lua-api.factorio.com/latest/LuaEntity.html)  \n  \n"
},
"set_command": {
"name": "set_command",
"args": {
"command": {
"name": "command",
"type": "Command",
"doc": "command :: [Command](https://lua-api.factorio.com/latest/Concepts.html#Command)"
}
},
"type": "function",
"doc": "Give this group a command.  \n  \n**Parameters**  \ncommand :: [Command](https://lua-api.factorio.com/latest/Concepts.html#Command)  \n  \n  \n**See also**  \nSee also   \n  * [LuaEntity::set_command](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.set_command)  \n"
},
"set_autonomous": {
"name": "set_autonomous",
"type": "function",
"doc": "Make this group autonomous. Autonomous groups will automatically attack polluted areas. Autonomous groups\n aren't considered to be script driven  \n  \n**See also**  \nSee also   \n  * [LuaUnitGroup::is_script_driven](https://lua-api.factorio.com/latest/LuaUnitGroup.html#LuaUnitGroup.is_script_driven)  \n"
},
"start_moving": {
"name": "start_moving",
"type": "function",
"doc": "Make the group start moving even if some of its members haven't yet arrived.  \n"
},
"destroy": {
"name": "destroy",
"type": "function",
"doc": "Dissolve this group. Its members won't be destroyed, they will be merely unlinked from\n this group.  \n"
},
"members": {
"name": "members",
"type": "array ofLuaEntity",
"mode": "[R]",
"doc": "Members of this group.  \n"
},
"position": {
"name": "position",
"type": "Position",
"mode": "[R]",
"doc": "Group position. This can have different meanings depending on the group state. When the group\n is gathering, the position is the place of gathering. When the group is moving, the position is\n the expected position of its members along the path. When the group is attacking, it is the\n average position of its members.  \n"
},
"state": {
"name": "state",
"type": "defines.group_state",
"mode": "[R]",
"doc": "Whether this group is gathering, moving or attacking.  \n"
},
"force": {
"name": "force",
"type": "LuaForce",
"mode": "[R]",
"doc": "The force of this unit group.  \n"
},
"surface": {
"name": "surface",
"type": "LuaSurface",
"mode": "[R]",
"doc": "The surface of this unit group.  \n"
},
"group_number": {
"name": "group_number",
"type": "uint",
"mode": "[R]",
"doc": "The group number for this unit group.  \n"
},
"is_script_driven": {
"name": "is_script_driven",
"type": "boolean",
"mode": "[R]",
"doc": "Whether this unit group is controlled by a script or by the game engine.  \n See also   \n  * [LuaUnitGroup::set_autonomous](https://lua-api.factorio.com/latest/LuaUnitGroup.html#LuaUnitGroup.set_autonomous)  \n"
},
"command": {
"name": "command",
"type": "Command",
"mode": "[R]",
"doc": "The command given to this group or ````nil```` is the group has no command.  \n"
},
"distraction_command": {
"name": "distraction_command",
"type": "Command",
"mode": "[R]",
"doc": "The distraction command given to this group or ````nil```` is the group currently isn't distracted.  \n"
}
},
"inherits": []
},
"LuaVirtualSignalPrototype": {
"name": "LuaVirtualSignalPrototype",
"type": "LuaVirtualSignalPrototype",
"doc": "Prototype of a virtual signal.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"name": {
"name": "name",
"type": "string",
"mode": "[R]",
"doc": "Name of this prototype.  \n"
},
"order": {
"name": "order",
"type": "string",
"mode": "[R]",
"doc": "Order string of this prototype.  \n"
},
"localised_name": {
"name": "localised_name",
"type": "LocalisedString",
"mode": "[R]"
},
"localised_description": {
"name": "localised_description",
"type": "LocalisedString",
"mode": "[R]"
},
"special": {
"name": "special",
"type": "boolean",
"mode": "[R]",
"doc": "If this is a special signal  \n"
},
"subgroup": {
"name": "subgroup",
"type": "LuaGroup",
"mode": "[R]"
}
},
"inherits": []
},
"LuaVoidEnergySourcePrototype": {
"name": "LuaVoidEnergySourcePrototype",
"type": "LuaVoidEnergySourcePrototype",
"doc": "Prototype of a void energy source.  \n",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"emissions": {
"name": "emissions",
"type": "double",
"mode": "[R]"
},
"render_no_network_icon": {
"name": "render_no_network_icon",
"type": "boolean",
"mode": "[R]"
},
"render_no_power_icon": {
"name": "render_no_power_icon",
"type": "boolean",
"mode": "[R]"
}
},
"inherits": []
},
"LuaWallControlBehavior": {
"name": "LuaWallControlBehavior",
"type": "LuaWallControlBehavior",
"doc": "Control behavior for walls.",
"properties": {
"help": {
"name": "help",
"returns": "string",
"type": "function",
"doc": "All methods, and properties that this object supports. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.help) for details"
},
"valid": {
"name": "valid",
"type": "boolean",
"mode": "[R]",
"doc": "Is this object valid? See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.valid) for details"
},
"object_name": {
"name": "object_name",
"type": "string",
"mode": "[R]",
"doc": "The class name of this object. See [Common] (https://lua-api.factorio.com/latest/Common.html#Common.object_name) for details"
},
"circuit_condition": {
"name": "circuit_condition",
"type": "CircuitConditionSpecification",
"mode": "[RW]",
"doc": "The circuit condition.  \n"
},
"open_gate": {
"name": "open_gate",
"type": "boolean",
"mode": "[RW]"
},
"read_sensor": {
"name": "read_sensor",
"type": "boolean",
"mode": "[RW]"
},
"output_signal": {
"name": "output_signal",
"type": "SignalID",
"mode": "[RW]"
},
"get_circuit_network": {
"name": "get_circuit_network",
"returns": "LuaCircuitNetwork",
"args": {
"wire": {
"name": "wire",
"type": "defines.wire_type",
"doc": "wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity."
},
"circuit_connector": {
"name": "circuit_connector",
"type": "defines.circuit_connector_id",
"doc": "circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector."
}
},
"type": "function",
"doc": "**Parameters**  \n* wire :: [defines.wire_type](https://lua-api.factorio.com/latest/defines.html#defines.wire_type) :  Wire color of the network connected to this entity.  \n* circuit_connector :: [defines.circuit_connector_id](https://lua-api.factorio.com/latest/defines.html#defines.circuit_connector_id) (optional) :  The connector to get circuit network for.\n   Must be specified for entities with more than one circuit network connector.  \n  \n  \n**Return value**  \nThe circuit network or nil."
},
"type": {
"name": "type",
"type": "defines.control_behavior.type",
"mode": "[R]",
"doc": "The concrete type of this control behavior.  \n"
},
"entity": {
"name": "entity",
"type": "LuaEntity",
"mode": "[R]",
"doc": "The entity this control behavior belongs to.  \n"
}
},
"inherits": [
"Inherited from LuaControlBehavior : get_circuit_network , type , entity"
]
}
}