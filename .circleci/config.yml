version: 2
jobs:
  build:
    docker:
      - image: nexela/factorio-lua-env
    environment:
      TEST_REPORTS: /tmp/test-reports

    working_directory: ~/stdlib

    steps:
      - checkout
      - run: ln -s ~/stdlib /usr/local/share/lua/5.2/__stdlib__
      - run: wget -q --no-check-certificate -O .luacheckrc https://raw.githubusercontent.com/Nexela/Factorio-luacheckrc/master/.luacheckrc
      - run: luacheck .
      - run: busted .
      - run: .circleci/makedocs.sh
      - run: .circleci/package.sh
      - store_artifacts:
          path: .bin
          destination: files

  document:
    docker:
      - image: nexela/factorio-lua-env
    working_directory: ~/stdlib
    steps:
      - checkout
      - run: git checkout gh-pages

      - run:
          name: Build Docs for gh-pages
          command: |
            git clone https://github.com/Afforess/Factorio-Stdlib.git /tmp/stdlib
            cd /tmp/stdlib
            git checkout master
            .circleci/makedocs.sh
            cp -R stdlib-docs/* ~/stdlib/

      - run:
          name: Commit gh-pages
          command: |
            git config user.email "bot@circleci.com"
            git config user.name "circleci"
            git add .
            git commit -am "Automatic Github Page generation"
            git push

      - run: git checkout release

  deploy-release:
    docker:
      - image: nexela/factorio-lua-env
    working_directory: ~/stdlib
    steps:
      - checkout

      - run: .circleci/makedocs.sh
      - run: .circleci/package.sh

      - store_artifacts:
          path:  .bin
          destination: files

      - run:
          name: Export Vars
          command: |
            echo 'export NAME=$(jq -r '.name' info.json)' >> $BASH_ENV
            echo 'export VERSION=$(jq -r '.version' info.json)' >> $BASH_ENV
            echo 'FILEPATH="/root/stdlib/.build/artifacts/${NAME}_${VERSION}.zip"' >> $BASH_ENV
            echo 'FILESIZE=$(stat --printf="%s" "${FILEPATH}")' >> $BASH_ENV

      - run: echo ${FILEPATH} ${FILESIZE}

      - run:
          name: Check for changelog entry
          command: |
            grep "Version: ${VERSION}" changelog.txt

      - run:
          name: Upload Release
          command: .circleci/release.sh

      - run: git tag ${VERSION}
      - run: git push --tags

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - gh-pages
                - /feature-.*/
      - document:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy-release:
          requires:
            - build
          filters:
            branches:
              only: release
