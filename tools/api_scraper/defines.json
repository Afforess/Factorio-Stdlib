{
"alert_type": {
"type": "define",
"properties": {
"entity_destroyed": {
"type": "define",
"name": "defines.alert_type.entity_destroyed"
},
"entity_under_attack": {
"type": "define",
"name": "defines.alert_type.entity_under_attack"
},
"not_enough_construction_robots": {
"type": "define",
"name": "defines.alert_type.not_enough_construction_robots"
},
"no_material_for_construction": {
"type": "define",
"name": "defines.alert_type.no_material_for_construction"
},
"not_enough_repair_packs": {
"type": "define",
"name": "defines.alert_type.not_enough_repair_packs"
},
"turret_fire": {
"type": "define",
"name": "defines.alert_type.turret_fire"
},
"custom": {
"type": "define",
"name": "defines.alert_type.custom"
},
"no_storage": {
"type": "define",
"name": "defines.alert_type.no_storage"
},
"train_out_of_fuel": {
"type": "define",
"name": "defines.alert_type.train_out_of_fuel"
}
}
},
"behavior_result": {
"type": "define",
"doc": "AI command exit status. See [LuaEntity::set_command](https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.set_command)",
"properties": {
"in_progress": {
"type": "define",
"name": "defines.behavior_result.in_progress"
},
"fail": {
"type": "define",
"name": "defines.behavior_result.fail"
},
"success": {
"type": "define",
"name": "defines.behavior_result.success"
},
"deleted": {
"type": "define",
"name": "defines.behavior_result.deleted"
}
}
},
"build_check_type": {
"type": "define",
"properties": {
"script": {
"type": "define",
"name": "defines.build_check_type.script"
},
"manual": {
"type": "define",
"name": "defines.build_check_type.manual"
},
"ghost_place": {
"type": "define",
"name": "defines.build_check_type.ghost_place"
},
"ghost_revive": {
"type": "define",
"name": "defines.build_check_type.ghost_revive"
}
}
},
"chain_signal_state": {
"type": "define",
"doc": "State of a chain signal.",
"properties": {
"none": {
"type": "define",
"name": "defines.chain_signal_state.none"
},
"all_open": {
"type": "define",
"name": "defines.chain_signal_state.all_open"
},
"partially_open": {
"type": "define",
"name": "defines.chain_signal_state.partially_open"
},
"none_open": {
"type": "define",
"name": "defines.chain_signal_state.none_open"
}
}
},
"chunk_generated_status": {
"type": "define",
"properties": {
"nothing": {
"type": "define",
"name": "defines.chunk_generated_status.nothing"
},
"custom_tiles": {
"type": "define",
"name": "defines.chunk_generated_status.custom_tiles"
},
"basic_tiles": {
"type": "define",
"name": "defines.chunk_generated_status.basic_tiles"
},
"corrected_tiles": {
"type": "define",
"name": "defines.chunk_generated_status.corrected_tiles"
},
"tiles": {
"type": "define",
"name": "defines.chunk_generated_status.tiles"
},
"entities": {
"type": "define",
"name": "defines.chunk_generated_status.entities"
}
}
},
"circuit_condition_index": {
"type": "define",
"properties": {
"inserter_circuit": {
"type": "define",
"name": "defines.circuit_condition_index.inserter_circuit"
},
"inserter_logistic": {
"type": "define",
"name": "defines.circuit_condition_index.inserter_logistic"
},
"lamp": {
"type": "define",
"name": "defines.circuit_condition_index.lamp"
},
"arithmetic_combinator": {
"type": "define",
"name": "defines.circuit_condition_index.arithmetic_combinator"
},
"decider_combinator": {
"type": "define",
"name": "defines.circuit_condition_index.decider_combinator"
},
"constant_combinator": {
"type": "define",
"name": "defines.circuit_condition_index.constant_combinator"
},
"offshore_pump": {
"type": "define",
"name": "defines.circuit_condition_index.offshore_pump"
},
"pump": {
"type": "define",
"name": "defines.circuit_condition_index.pump"
}
}
},
"circuit_connector_id": {
"type": "define",
"properties": {
"accumulator": {
"type": "define",
"name": "defines.circuit_connector_id.accumulator"
},
"constant_combinator": {
"type": "define",
"name": "defines.circuit_connector_id.constant_combinator"
},
"container": {
"type": "define",
"name": "defines.circuit_connector_id.container"
},
"programmable_speaker": {
"type": "define",
"name": "defines.circuit_connector_id.programmable_speaker"
},
"rail_signal": {
"type": "define",
"name": "defines.circuit_connector_id.rail_signal"
},
"rail_chain_signal": {
"type": "define",
"name": "defines.circuit_connector_id.rail_chain_signal"
},
"roboport": {
"type": "define",
"name": "defines.circuit_connector_id.roboport"
},
"storage_tank": {
"type": "define",
"name": "defines.circuit_connector_id.storage_tank"
},
"wall": {
"type": "define",
"name": "defines.circuit_connector_id.wall"
},
"electric_pole": {
"type": "define",
"name": "defines.circuit_connector_id.electric_pole"
},
"inserter": {
"type": "define",
"name": "defines.circuit_connector_id.inserter"
},
"lamp": {
"type": "define",
"name": "defines.circuit_connector_id.lamp"
},
"combinator_input": {
"type": "define",
"name": "defines.circuit_connector_id.combinator_input"
},
"combinator_output": {
"type": "define",
"name": "defines.circuit_connector_id.combinator_output"
},
"offshore_pump": {
"type": "define",
"name": "defines.circuit_connector_id.offshore_pump"
},
"pump": {
"type": "define",
"name": "defines.circuit_connector_id.pump"
}
}
},
"command": {
"type": "define",
"doc": "Command given to units describing what they should do.",
"properties": {
"attack": {
"type": "define",
"name": "defines.command.attack",
"doc": "Attack another entity."
},
"go_to_location": {
"type": "define",
"name": "defines.command.go_to_location",
"doc": "Go to a specific position."
},
"compound": {
"type": "define",
"name": "defines.command.compound",
"doc": "Chain commands together, see [defines.compound_command](https://lua-api.factorio.com/latest/defines.html#defines.compound_command) ."
},
"group": {
"type": "define",
"name": "defines.command.group",
"doc": "Do what your group wants you to do."
},
"attack_area": {
"type": "define",
"name": "defines.command.attack_area",
"doc": "Go to a place and attack what you see."
},
"wander": {
"type": "define",
"name": "defines.command.wander",
"doc": "Chill."
},
"flee": {
"type": "define",
"name": "defines.command.flee",
"doc": "Flee from another entity."
},
"stop": {
"type": "define",
"name": "defines.command.stop",
"doc": "Stop moving and stay where you are."
},
"build_base": {
"type": "define",
"name": "defines.command.build_base",
"doc": "Go to a position and build a base there."
}
}
},
"compound_command": {
"type": "define",
"doc": "How commands are joined together in a compound command (see [defines.command.compound](https://lua-api.factorio.com/latest/defines.html#defines.command.compound) ).",
"properties": {
"logical_and": {
"type": "define",
"name": "defines.compound_command.logical_and",
"doc": "Fail on first failure. Only succeeds if all commands (executed one after another) succeed."
},
"logical_or": {
"type": "define",
"name": "defines.compound_command.logical_or",
"doc": "Succeed on first success. Only fails if all commands (executed one after another) fail."
},
"return_last": {
"type": "define",
"name": "defines.compound_command.return_last",
"doc": "Execute all commands in sequence and fail or succeed depending on the return status of the last command."
}
}
},
"control_behavior": {
"type": "define",
"properties": {
"inserter": {
"type": "define",
"properties": {
"circuit_mode_of_operation": {
"type": "define",
"properties": {
"none": {
"type": "define",
"name": "defines.control_behavior.inserter.circuit_mode_of_operation.none"
},
"enable_disable": {
"type": "define",
"name": "defines.control_behavior.inserter.circuit_mode_of_operation.enable_disable"
},
"set_filters": {
"type": "define",
"name": "defines.control_behavior.inserter.circuit_mode_of_operation.set_filters"
},
"read_hand_contents": {
"type": "define",
"name": "defines.control_behavior.inserter.circuit_mode_of_operation.read_hand_contents"
},
"set_stack_size": {
"type": "define",
"name": "defines.control_behavior.inserter.circuit_mode_of_operation.set_stack_size"
}
}
},
"hand_read_mode": {
"type": "define",
"properties": {
"hold": {
"type": "define",
"name": "defines.control_behavior.inserter.hand_read_mode.hold"
},
"pulse": {
"type": "define",
"name": "defines.control_behavior.inserter.hand_read_mode.pulse"
}
}
}
}
},
"logistic_container": {
"type": "define",
"properties": {
"circuit_mode_of_operation": {
"type": "define",
"properties": {
"send_contents": {
"type": "define",
"name": "defines.control_behavior.logistic_container.circuit_mode_of_operation.send_contents"
},
"set_requests": {
"type": "define",
"name": "defines.control_behavior.logistic_container.circuit_mode_of_operation.set_requests"
}
}
}
}
},
"lamp": {
"type": "define",
"properties": {
"circuit_mode_of_operation": {
"type": "define",
"properties": {
"use_colors": {
"type": "define",
"name": "defines.control_behavior.lamp.circuit_mode_of_operation.use_colors"
}
}
}
}
},
"mining_drill": {
"type": "define",
"properties": {
"resource_read_mode": {
"type": "define",
"properties": {
"this_miner": {
"type": "define",
"name": "defines.control_behavior.mining_drill.resource_read_mode.this_miner"
},
"entire_patch": {
"type": "define",
"name": "defines.control_behavior.mining_drill.resource_read_mode.entire_patch"
}
}
}
}
},
"transport_belt": {
"type": "define",
"properties": {
"content_read_mode": {
"type": "define",
"properties": {
"pulse": {
"type": "define",
"name": "defines.control_behavior.transport_belt.content_read_mode.pulse"
},
"hold": {
"type": "define",
"name": "defines.control_behavior.transport_belt.content_read_mode.hold"
}
}
}
}
},
"type": {
"type": "define",
"properties": {
"container": {
"type": "define",
"name": "defines.control_behavior.type.container",
"doc": "[LuaContainerControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaContainerControlBehavior.brief)"
},
"generic_on_off": {
"type": "define",
"name": "defines.control_behavior.type.generic_on_off",
"doc": "[LuaGenericOnOffControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaGenericOnOffControlBehavior.brief)"
},
"inserter": {
"type": "define",
"name": "defines.control_behavior.type.inserter",
"doc": "[LuaInserterControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaInserterControlBehavior.brief)"
},
"lamp": {
"type": "define",
"name": "defines.control_behavior.type.lamp",
"doc": "[LuaLampControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaLampControlBehavior.brief)"
},
"logistic_container": {
"type": "define",
"name": "defines.control_behavior.type.logistic_container",
"doc": "[LuaLogisticContainerControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaLogisticContainerControlBehavior.brief)"
},
"roboport": {
"type": "define",
"name": "defines.control_behavior.type.roboport",
"doc": "[LuaRoboportControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaRoboportControlBehavior.brief)"
},
"storage_tank": {
"type": "define",
"name": "defines.control_behavior.type.storage_tank",
"doc": "[LuaStorageTankControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaStorageTankControlBehavior.brief)"
},
"train_stop": {
"type": "define",
"name": "defines.control_behavior.type.train_stop",
"doc": "[LuaTrainStopControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaTrainStopControlBehavior.brief)"
},
"decider_combinator": {
"type": "define",
"name": "defines.control_behavior.type.decider_combinator",
"doc": "[LuaDeciderCombinatorControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaDeciderCombinatorControlBehavior.brief)"
},
"arithmetic_combinator": {
"type": "define",
"name": "defines.control_behavior.type.arithmetic_combinator",
"doc": "[LuaArithmeticCombinatorControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaArithmeticCombinatorControlBehavior.brief)"
},
"constant_combinator": {
"type": "define",
"name": "defines.control_behavior.type.constant_combinator",
"doc": "[LuaConstantCombinatorControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaConstantCombinatorControlBehavior.brief)"
},
"transport_belt": {
"type": "define",
"name": "defines.control_behavior.type.transport_belt",
"doc": "[LuaTransportBeltControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaTransportBeltControlBehavior.brief)"
},
"accumulator": {
"type": "define",
"name": "defines.control_behavior.type.accumulator",
"doc": "[LuaAccumulatorControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaAccumulatorControlBehavior.brief)"
},
"rail_signal": {
"type": "define",
"name": "defines.control_behavior.type.rail_signal",
"doc": "[LuaRailSignalControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaRailSignalControlBehavior.brief)"
},
"rail_chain_signal": {
"type": "define",
"name": "defines.control_behavior.type.rail_chain_signal",
"doc": "[LuaRailChainSignalControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaRailChainSignalControlBehavior.brief)"
},
"wall": {
"type": "define",
"name": "defines.control_behavior.type.wall",
"doc": "[LuaWallControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaWallControlBehavior.brief)"
},
"mining_drill": {
"type": "define",
"name": "defines.control_behavior.type.mining_drill",
"doc": "[LuaMiningDrillControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaMiningDrillControlBehavior.brief)"
},
"programmable_speaker": {
"type": "define",
"name": "defines.control_behavior.type.programmable_speaker",
"doc": "[LuaProgrammableSpeakerControlBehavior](https://lua-api.factorio.com/latest/LuaControlBehavior.html#LuaProgrammableSpeakerControlBehavior.brief)"
}
}
}
}
},
"controllers": {
"type": "define",
"properties": {
"ghost": {
"type": "define",
"name": "defines.controllers.ghost",
"doc": "Can't interact with the world, can only observe. Used in the multiplayer waiting-to-respawn screen."
},
"character": {
"type": "define",
"name": "defines.controllers.character",
"doc": "The controller controls a character. This is the default controller in freeplay."
},
"god": {
"type": "define",
"name": "defines.controllers.god",
"doc": "The controller isn't tied to a character. This is the default controller in sandbox."
},
"editor": {
"type": "define",
"name": "defines.controllers.editor",
"doc": "The Editor Controller near ultimate power to do almost anything in the game."
},
"cutscene": {
"type": "define",
"name": "defines.controllers.cutscene",
"doc": "The player can't interact with the world, and the camera pans around in a predefined manner."
},
"spectator": {
"type": "define",
"name": "defines.controllers.spectator",
"doc": "Can't change anything in the world but can view anything."
}
}
},
"deconstruction_item": {
"type": "define",
"properties": {
"entity_filter_mode": {
"type": "define",
"properties": {
"whitelist": {
"type": "define",
"name": "defines.deconstruction_item.entity_filter_mode.whitelist"
},
"blacklist": {
"type": "define",
"name": "defines.deconstruction_item.entity_filter_mode.blacklist"
}
}
},
"tile_filter_mode": {
"type": "define",
"properties": {
"whitelist": {
"type": "define",
"name": "defines.deconstruction_item.tile_filter_mode.whitelist"
},
"blacklist": {
"type": "define",
"name": "defines.deconstruction_item.tile_filter_mode.blacklist"
}
}
},
"tile_selection_mode": {
"type": "define",
"properties": {
"normal": {
"type": "define",
"name": "defines.deconstruction_item.tile_selection_mode.normal"
},
"always": {
"type": "define",
"name": "defines.deconstruction_item.tile_selection_mode.always"
},
"never": {
"type": "define",
"name": "defines.deconstruction_item.tile_selection_mode.never"
},
"only": {
"type": "define",
"name": "defines.deconstruction_item.tile_selection_mode.only"
}
}
}
}
},
"difficulty": {
"type": "define",
"properties": {
"easy": {
"type": "define",
"name": "defines.difficulty.easy"
},
"normal": {
"type": "define",
"name": "defines.difficulty.normal"
},
"hard": {
"type": "define",
"name": "defines.difficulty.hard"
}
}
},
"difficulty_settings": {
"type": "define",
"properties": {
"recipe_difficulty": {
"type": "define",
"properties": {
"normal": {
"type": "define",
"name": "defines.difficulty_settings.recipe_difficulty.normal"
},
"expensive": {
"type": "define",
"name": "defines.difficulty_settings.recipe_difficulty.expensive"
}
}
},
"technology_difficulty": {
"type": "define",
"properties": {
"normal": {
"type": "define",
"name": "defines.difficulty_settings.technology_difficulty.normal"
},
"expensive": {
"type": "define",
"name": "defines.difficulty_settings.technology_difficulty.expensive"
}
}
}
}
},
"direction": {
"type": "define",
"properties": {
"north": {
"type": "define",
"name": "defines.direction.north"
},
"northeast": {
"type": "define",
"name": "defines.direction.northeast"
},
"east": {
"type": "define",
"name": "defines.direction.east"
},
"southeast": {
"type": "define",
"name": "defines.direction.southeast"
},
"south": {
"type": "define",
"name": "defines.direction.south"
},
"southwest": {
"type": "define",
"name": "defines.direction.southwest"
},
"west": {
"type": "define",
"name": "defines.direction.west"
},
"northwest": {
"type": "define",
"name": "defines.direction.northwest"
}
}
},
"disconnect_reason": {
"type": "define",
"properties": {
"quit": {
"type": "define",
"name": "defines.disconnect_reason.quit"
},
"dropped": {
"type": "define",
"name": "defines.disconnect_reason.dropped"
},
"reconnect": {
"type": "define",
"name": "defines.disconnect_reason.reconnect"
},
"wrong_input": {
"type": "define",
"name": "defines.disconnect_reason.wrong_input"
},
"desync_limit_reached": {
"type": "define",
"name": "defines.disconnect_reason.desync_limit_reached"
},
"cannot_keep_up": {
"type": "define",
"name": "defines.disconnect_reason.cannot_keep_up"
},
"afk": {
"type": "define",
"name": "defines.disconnect_reason.afk"
},
"kicked": {
"type": "define",
"name": "defines.disconnect_reason.kicked"
},
"kicked_and_deleted": {
"type": "define",
"name": "defines.disconnect_reason.kicked_and_deleted"
},
"banned": {
"type": "define",
"name": "defines.disconnect_reason.banned"
},
"switching_servers": {
"type": "define",
"name": "defines.disconnect_reason.switching_servers"
}
}
},
"distraction": {
"type": "define",
"properties": {
"none": {
"type": "define",
"name": "defines.distraction.none",
"doc": "Perform command even if someone attacks the unit."
},
"by_enemy": {
"type": "define",
"name": "defines.distraction.by_enemy",
"doc": "Attack closer enemy entities with force."
},
"by_anything": {
"type": "define",
"name": "defines.distraction.by_anything",
"doc": "Attack closer enemy entities, including entities \"built\" by player (belts, inserters, chests)."
},
"by_damage": {
"type": "define",
"name": "defines.distraction.by_damage",
"doc": "Attack when attacked."
}
}
},
"entity_status": {
"type": "define",
"properties": {
"working": {
"type": "define",
"name": "defines.entity_status.working"
},
"normal": {
"type": "define",
"name": "defines.entity_status.normal"
},
"no_power": {
"type": "define",
"name": "defines.entity_status.no_power"
},
"low_power": {
"type": "define",
"name": "defines.entity_status.low_power"
},
"no_fuel": {
"type": "define",
"name": "defines.entity_status.no_fuel"
},
"disabled_by_control_behavior": {
"type": "define",
"name": "defines.entity_status.disabled_by_control_behavior"
},
"disabled_by_script": {
"type": "define",
"name": "defines.entity_status.disabled_by_script"
},
"marked_for_deconstruction": {
"type": "define",
"name": "defines.entity_status.marked_for_deconstruction"
},
"networks_connected": {
"type": "define",
"name": "defines.entity_status.networks_connected",
"doc": "Used by power switches."
},
"networks_disconnected": {
"type": "define",
"name": "defines.entity_status.networks_disconnected",
"doc": "Used by power switches."
},
"charging": {
"type": "define",
"name": "defines.entity_status.charging",
"doc": "Used by accumulators."
},
"discharging": {
"type": "define",
"name": "defines.entity_status.discharging",
"doc": "Used by accumulators."
},
"fully_charged": {
"type": "define",
"name": "defines.entity_status.fully_charged",
"doc": "Used by accumulators."
},
"out_of_logistic_network": {
"type": "define",
"name": "defines.entity_status.out_of_logistic_network",
"doc": "Used by logistic containers."
},
"no_recipe": {
"type": "define",
"name": "defines.entity_status.no_recipe",
"doc": "Used by assembling machines."
},
"no_ingredients": {
"type": "define",
"name": "defines.entity_status.no_ingredients",
"doc": "Used by furnaces."
},
"no_input_fluid": {
"type": "define",
"name": "defines.entity_status.no_input_fluid",
"doc": "Used by boilers, fluid turrets and fluid energy sources: Boiler has no fluid to work with."
},
"no_research_in_progress": {
"type": "define",
"name": "defines.entity_status.no_research_in_progress",
"doc": "Used by labs."
},
"no_minable_resources": {
"type": "define",
"name": "defines.entity_status.no_minable_resources",
"doc": "Used by mining drills."
},
"low_input_fluid": {
"type": "define",
"name": "defines.entity_status.low_input_fluid",
"doc": "Used by boilers and fluid turrets: Boiler still has some fluid but is about to run out."
},
"fluid_ingredient_shortage": {
"type": "define",
"name": "defines.entity_status.fluid_ingredient_shortage",
"doc": "Used by crafting machines."
},
"full_output": {
"type": "define",
"name": "defines.entity_status.full_output",
"doc": "Used by crafting machines, boilers, burner energy sources and reactors: Reactor/burner has full burnt result inventory, boiler has full output fluidbox."
},
"item_ingredient_shortage": {
"type": "define",
"name": "defines.entity_status.item_ingredient_shortage",
"doc": "Used by crafting machines."
},
"missing_required_fluid": {
"type": "define",
"name": "defines.entity_status.missing_required_fluid",
"doc": "Used by mining drills when the mining fluid is missing."
},
"missing_science_packs": {
"type": "define",
"name": "defines.entity_status.missing_science_packs",
"doc": "Used by labs."
},
"waiting_for_source_items": {
"type": "define",
"name": "defines.entity_status.waiting_for_source_items",
"doc": "Used by inserters."
},
"waiting_for_space_in_destination": {
"type": "define",
"name": "defines.entity_status.waiting_for_space_in_destination",
"doc": "Used by inserters and mining drills."
},
"preparing_rocket_for_launch": {
"type": "define",
"name": "defines.entity_status.preparing_rocket_for_launch",
"doc": "Used by the rocket silo."
},
"waiting_to_launch_rocket": {
"type": "define",
"name": "defines.entity_status.waiting_to_launch_rocket",
"doc": "Used by the rocket silo."
},
"launching_rocket": {
"type": "define",
"name": "defines.entity_status.launching_rocket",
"doc": "Used by the rocket silo."
},
"no_modules_to_transmit": {
"type": "define",
"name": "defines.entity_status.no_modules_to_transmit",
"doc": "Used by beacons."
},
"recharging_after_power_outage": {
"type": "define",
"name": "defines.entity_status.recharging_after_power_outage",
"doc": "Used by roboports."
},
"no_ammo": {
"type": "define",
"name": "defines.entity_status.no_ammo",
"doc": "Used by ammo turrets."
},
"low_temperature": {
"type": "define",
"name": "defines.entity_status.low_temperature",
"doc": "Used by heat energy sources."
},
"disabled": {
"type": "define",
"name": "defines.entity_status.disabled",
"doc": "Used by constant combinators: Combinator is turned off via switch in GUI."
},
"turned_off_during_daytime": {
"type": "define",
"name": "defines.entity_status.turned_off_during_daytime",
"doc": "Used by lamps."
},
"not_connected_to_rail": {
"type": "define",
"name": "defines.entity_status.not_connected_to_rail",
"doc": "Used by rail signals."
},
"cant_divide_segments": {
"type": "define",
"name": "defines.entity_status.cant_divide_segments",
"doc": "Used by rail signals."
}
}
},
"events": {
"type": "define",
"properties": {
"on_tick": {
"type": "event",
"name": "on_tick",
"doc": "It is fired once every tick. Since this event is fired every tick, its handler shouldn't\n include performance heavy code.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated."
},
"on_ai_command_completed": {
"type": "event",
"name": "on_ai_command_completed",
"doc": "Called when a unit/group completes a command.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nunit_number :: uint :  unit_number/group_number of the unit/group which just completed a command.  \nresult :: defines.behavior_result  \nwas_distracted :: boolean :  Was this command generated by a distraction."
},
"on_area_cloned": {
"type": "event",
"name": "on_area_cloned",
"doc": "Called when an area of the map is cloned.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsource_surface :: LuaSurface  \nsource_area :: BoundingBox  \ndestination_surface :: LuaSurface  \ndestination_area :: BoundingBox  \ndestination_force :: LuaForce (optional)  \nclone_tiles :: boolean  \nclone_entities :: boolean  \nclone_decoratives :: boolean  \nclear_destination_entities :: boolean  \nclear_destination_decoratives :: boolean"
},
"on_biter_base_built": {
"type": "event",
"name": "on_biter_base_built",
"doc": "Called when a biter migration builds a base.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity :  The built entity."
},
"on_brush_cloned": {
"type": "event",
"name": "on_brush_cloned",
"doc": "Called when a set of positions on the map is cloned.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsource_offset :: TilePosition  \ndestination_offset :: TilePosition  \nsource_surface :: LuaSurface  \nsource_positions :: array of TilePosition  \ndestination_surface :: LuaSurface  \ndestination_force :: LuaForce (optional)  \nclone_tiles :: boolean  \nclone_entities :: boolean  \nclone_decoratives :: boolean  \nclear_destination_entities :: boolean  \nclear_destination_decoratives :: boolean"
},
"on_build_base_arrived": {
"type": "event",
"name": "on_build_base_arrived",
"doc": "Called when a [defines.command.build_base](https://lua-api.factorio.com/latest/defines.html#defines.command.build_base) command reaches its destination, and before building starts.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nunit :: LuaEntity (optional) :  The unit the command was assigned to.  \ngroup :: LuaUnitGroup (optional) :  The unit group the command was assigned to."
},
"on_built_entity": {
"type": "event",
"name": "on_built_entity",
"doc": "Called when player builds something.\n Can be filtered using [LuaPlayerBuiltEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPlayerBuiltEntityEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ncreated_entity :: LuaEntity  \nplayer_index :: uint  \nstack :: LuaItemStack  \nitem :: LuaItemPrototype (optional) :  The item prototype used to build the entity. Note this won't exist in some situations (built from blueprint, undo, etc).  \ntags :: Tags (optional) :  The tags associated with this entity if any."
},
"on_cancelled_deconstruction": {
"type": "event",
"name": "on_cancelled_deconstruction",
"doc": "Called when the deconstruction of an entity is canceled.\n Can be filtered using [LuaEntityDeconstructionCancelledEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityDeconstructionCancelledEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity  \nplayer_index :: uint (optional)"
},
"on_cancelled_upgrade": {
"type": "event",
"name": "on_cancelled_upgrade",
"doc": "Called when the upgrade of an entity is canceled.\n Can be filtered using [LuaUpgradeCancelledEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaUpgradeCancelledEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity  \nplayer_index :: uint (optional)"
},
"on_character_corpse_expired": {
"type": "event",
"name": "on_character_corpse_expired",
"doc": "Called when a character corpse expires due to timeout or all of the items being removed from it.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ncorpse :: LuaEntity :  The corpse."
},
"on_chart_tag_added": {
"type": "event",
"name": "on_chart_tag_added",
"doc": "Called when a chart tag is created.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ntag :: LuaCustomChartTag  \nforce :: LuaForce  \nplayer_index :: uint (optional)"
},
"on_chart_tag_modified": {
"type": "event",
"name": "on_chart_tag_modified",
"doc": "Called when a chart tag is modified by a player.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ntag :: LuaCustomChartTag  \nplayer_index :: uint (optional)  \nforce :: LuaForce  \nold_text :: string  \nold_icon :: SignalID  \nold_player_index :: uint (optional)"
},
"on_chart_tag_removed": {
"type": "event",
"name": "on_chart_tag_removed",
"doc": "Called just before a chart tag is deleted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ntag :: LuaCustomChartTag  \nforce :: LuaForce  \nplayer_index :: uint (optional)"
},
"on_chunk_charted": {
"type": "event",
"name": "on_chunk_charted",
"doc": "Called when a chunk is charted or re-charted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint  \nposition :: ChunkPosition  \narea :: BoundingBox :  Area of the chunk.  \nforce :: LuaForce"
},
"on_chunk_deleted": {
"type": "event",
"name": "on_chunk_deleted",
"doc": "Called when one or more chunks are deleted using [LuaSurface::delete_chunk](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk) .  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint  \npositions :: array of ChunkPosition :  The chunks deleted."
},
"on_chunk_generated": {
"type": "event",
"name": "on_chunk_generated",
"doc": "Called when a chunk is generated.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \narea :: BoundingBox :  Area of the chunk.  \nposition :: ChunkPosition :  Position of the chunk.  \nsurface :: LuaSurface :  The surface the chunk is on."
},
"on_combat_robot_expired": {
"type": "event",
"name": "on_combat_robot_expired",
"doc": "Called when a combat robot expires through a lack of energy, or timeout.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity  \nowner :: LuaEntity (optional) :  The entity that owns the robot if any."
},
"on_console_chat": {
"type": "event",
"name": "on_console_chat",
"doc": "Called when someone talks in-game either a player or through the server interface.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  The player if any.  \nmessage :: string :  The chat message."
},
"on_console_command": {
"type": "event",
"name": "on_console_command",
"doc": "Called when someone enters a command-like message regardless of it being a valid command.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  The player if any.  \ncommand :: string :  The command as typed without the preceding forward slash ('/').  \nparameters :: string :  The parameters provided if any."
},
"on_cutscene_cancelled": {
"type": "event",
"name": "on_cutscene_cancelled",
"doc": "Called when a cutscene for a player is cancelled.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_cutscene_waypoint_reached": {
"type": "event",
"name": "on_cutscene_waypoint_reached",
"doc": "Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.  \nThis refers to an index in the table previously passed to set_controller which started the cutscene.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player index of the player viewing the cutscene.  \nwaypoint_index :: uint :  The index of the waypoint we just completed."
},
"on_difficulty_settings_changed": {
"type": "event",
"name": "on_difficulty_settings_changed",
"doc": "Called when the map difficulty settings are changed.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nold_recipe_difficulty :: uint  \nold_technology_difficulty :: uint"
},
"on_entity_cloned": {
"type": "event",
"name": "on_entity_cloned",
"doc": "Called when an entity is cloned. Can be filtered for the source entity using [LuaEntityClonedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityClonedEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsource :: LuaEntity  \ndestination :: LuaEntity"
},
"on_entity_damaged": {
"type": "event",
"name": "on_entity_damaged",
"doc": "Called when an entity is damaged.\n Can be filtered using [LuaEntityDamagedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityDamagedEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity  \ndamage_type :: LuaDamagePrototype  \noriginal_damage_amount :: float :  The damage amount before resistances.  \nfinal_damage_amount :: float :  The damage amount after resistances.  \nfinal_health :: float :  The health of the entity after the damage was applied.  \ncause :: LuaEntity (optional) :  The entity that did the attacking if available.  \nforce :: LuaForce (optional) :  The force that did the attacking if any."
},
"on_entity_destroyed": {
"type": "event",
"name": "on_entity_destroyed",
"doc": "Called after an entity is destroyed that has been registered with [LuaBootstrap::register_on_entity_destroyed](https://lua-api.factorio.com/latest/LuaBootstrap.html#LuaBootstrap.register_on_entity_destroyed)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nregistration_number :: uint64  \nunit_number :: uint (optional)"
},
"on_entity_died": {
"type": "event",
"name": "on_entity_died",
"doc": "Called when an entity dies.\n Can be filtered using [LuaEntityDiedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityDiedEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity  \ncause :: LuaEntity (optional) :  The entity that did the killing if available.  \nloot :: LuaInventory :  The loot generated by this entity if any.  \nforce :: LuaForce (optional) :  The force that did the killing if any.  \ndamage_type :: LuaDamagePrototype (optional) :  The damage type if any."
},
"on_entity_renamed": {
"type": "event",
"name": "on_entity_renamed",
"doc": "Called after an entity has been renamed either by the player or through script.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  If by_script is true this will not be included.  \nby_script :: boolean  \nentity :: LuaEntity  \nold_name :: string"
},
"on_entity_settings_pasted": {
"type": "event",
"name": "on_entity_settings_pasted",
"doc": "Called after entity copy-paste is done.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nsource :: LuaEntity :  The source entity settings have been copied from.  \ndestination :: LuaEntity :  The destination entity settings have been copied to."
},
"on_entity_spawned": {
"type": "event",
"name": "on_entity_spawned",
"doc": "Called when an entity is spawned by a EnemySpawner  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nspawner :: LuaEntity  \nentity :: LuaEntity"
},
"on_force_cease_fire_changed": {
"type": "event",
"name": "on_force_cease_fire_changed",
"doc": "Called when the a forces cease fire values change.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nforce :: LuaForce :  The force who's cease fire changed.  \nother_force :: LuaForce :  Which force was added or removed.  \nadded :: boolean :  If the other force was added or removed."
},
"on_force_created": {
"type": "event",
"name": "on_force_created",
"doc": "Called when a new force is created using ````game.create_force()````  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nforce :: LuaForce :  The newly created force."
},
"on_force_friends_changed": {
"type": "event",
"name": "on_force_friends_changed",
"doc": "Called when the a forces friends change.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nforce :: LuaForce :  The force who's friends changed.  \nother_force :: LuaForce :  Which force was added or removed.  \nadded :: boolean :  If the other force was added or removed."
},
"on_force_reset": {
"type": "event",
"name": "on_force_reset",
"doc": "Called when [LuaForce::reset](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.reset) is finished.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nforce :: LuaForce"
},
"on_forces_merged": {
"type": "event",
"name": "on_forces_merged",
"doc": "Called after two forces have been merged using ````game.merge_forces()```` .  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsource_name :: string :  The force destroyed.  \nsource_index :: uint :  The index of the destroyed force.  \ndestination :: LuaForce :  The force entities where reassigned to."
},
"on_forces_merging": {
"type": "event",
"name": "on_forces_merging",
"doc": "Called when two forces are about to be merged using ````game.merge_forces()```` .  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsource :: LuaForce :  The force to be destroyed  \ndestination :: LuaForce :  The force to reassign entities to."
},
"on_game_created_from_scenario": {
"type": "event",
"name": "on_game_created_from_scenario",
"doc": "Called when a game is created from a scenario.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated."
},
"on_gui_checked_state_changed": {
"type": "event",
"name": "on_gui_checked_state_changed",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) checked state is changed (related to checkboxes and radio buttons).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The element whose checked state changed.  \nplayer_index :: uint :  The player who did the change."
},
"on_gui_click": {
"type": "event",
"name": "on_gui_click",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) is clicked.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The clicked element.  \nplayer_index :: uint :  The player who did the clicking.  \nbutton :: defines.mouse_button_type :  The mouse button used if any.  \nalt :: boolean :  If alt was pressed.  \ncontrol :: boolean :  If control was pressed.  \nshift :: boolean :  If shift was pressed."
},
"on_gui_closed": {
"type": "event",
"name": "on_gui_closed",
"doc": "Called when the player closes the GUI they have open.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player.  \ngui_type :: defines.gui_type :  The GUI type that was open.  \nentity :: LuaEntity (optional) :  The entity that was open  \nitem :: LuaItemStack (optional) :  The item that was open  \nequipment :: LuaEquipment (optional) :  The equipment that was open  \nother_player :: LuaPlayer (optional) :  The other player that was open  \nelement :: LuaGuiElement (optional) :  The custom GUI element that was open  \ntechnology :: LuaTechnology (optional) :  The technology that was automatically selected when opening the research GUI  \ntile_position :: TilePosition (optional) :  The tile position that was open"
},
"on_gui_confirmed": {
"type": "event",
"name": "on_gui_confirmed",
"doc": "Called when a [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) is confirmed, for example by pressing Enter in a textfield.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The confirmed element.  \nplayer_index :: uint :  The player who did the confirming.  \nalt :: boolean :  If alt was pressed.  \ncontrol :: boolean :  If control was pressed.  \nshift :: boolean :  If shift was pressed."
},
"on_gui_elem_changed": {
"type": "event",
"name": "on_gui_elem_changed",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) element value is changed (related to choose element buttons).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The element whose element value changed.  \nplayer_index :: uint :  The player who did the change."
},
"on_gui_location_changed": {
"type": "event",
"name": "on_gui_location_changed",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) element location is changed (related to frames in ````player.gui.screen```` ).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The element whose location changed.  \nplayer_index :: uint :  The player who did the change."
},
"on_gui_opened": {
"type": "event",
"name": "on_gui_opened",
"doc": "Called when the player opens a GUI.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player.  \ngui_type :: defines.gui_type :  The GUI type that was opened.  \nentity :: LuaEntity (optional) :  The entity that was opened  \nitem :: LuaItemStack (optional) :  The item that was opened  \nequipment :: LuaEquipment (optional) :  The equipment that was opened  \nother_player :: LuaPlayer (optional) :  The other player that was opened  \nelement :: LuaGuiElement (optional) :  The custom GUI element that was opened"
},
"on_gui_selected_tab_changed": {
"type": "event",
"name": "on_gui_selected_tab_changed",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) selected tab is changed (related to tabbed-panes).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The tabbed pane whose selected tab changed.  \nplayer_index :: uint :  The player who did the change."
},
"on_gui_selection_state_changed": {
"type": "event",
"name": "on_gui_selection_state_changed",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) selection state is changed (related to drop-downs and listboxes).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The element whose selection state changed.  \nplayer_index :: uint :  The player who did the change."
},
"on_gui_switch_state_changed": {
"type": "event",
"name": "on_gui_switch_state_changed",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) switch state is changed (related to switches).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The switch whose switch state changed.  \nplayer_index :: uint :  The player who did the change."
},
"on_gui_text_changed": {
"type": "event",
"name": "on_gui_text_changed",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) text is changed by the player.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The edited element.  \nplayer_index :: uint :  The player who did the edit.  \ntext :: string :  The new text in the element."
},
"on_gui_value_changed": {
"type": "event",
"name": "on_gui_value_changed",
"doc": "Called when [LuaGuiElement](https://lua-api.factorio.com/latest/LuaGuiElement.html) slider value is changed (related to the slider element).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nelement :: LuaGuiElement :  The element whose value changed.  \nplayer_index :: uint :  The player who did the change."
},
"on_land_mine_armed": {
"type": "event",
"name": "on_land_mine_armed",
"doc": "Called when a land mine is armed.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nmine :: LuaEntity"
},
"on_lua_shortcut": {
"type": "event",
"name": "on_lua_shortcut",
"doc": "Called when a custom Lua shortcut is pressed.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nprototype_name :: string :  Shortcut prototype name of the shortcut that was clicked."
},
"on_marked_for_deconstruction": {
"type": "event",
"name": "on_marked_for_deconstruction",
"doc": "Called when an entity is marked for deconstruction with the Deconstruction planner or via script.\n Can be filtered using [LuaEntityMarkedForDeconstructionEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityMarkedForDeconstructionEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity  \nplayer_index :: uint (optional)"
},
"on_marked_for_upgrade": {
"type": "event",
"name": "on_marked_for_upgrade",
"doc": "Called when an entity is marked for upgrade with the Upgrade planner or via script.\n Can be filtered using [LuaEntityMarkedForUpgradeEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaEntityMarkedForUpgradeEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity  \ntarget :: LuaEntityPrototype  \nplayer_index :: uint (optional)"
},
"on_market_item_purchased": {
"type": "event",
"name": "on_market_item_purchased",
"doc": "Called after a player purchases some offer from a Market entity.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player who did the purchasing.  \nmarket :: LuaEntity :  The market entity.  \noffer_index :: uint :  The index of the offer purchased.  \ncount :: uint :  The count of offers purchased."
},
"on_mod_item_opened": {
"type": "event",
"name": "on_mod_item_opened",
"doc": "Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player.  \nitem :: LuaItemPrototype :  The item clicked on."
},
"on_permission_group_added": {
"type": "event",
"name": "on_permission_group_added",
"doc": "Called directly after a permission group is added.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player that added the group.  \ngroup :: LuaPermissionGroup :  The group added."
},
"on_permission_group_deleted": {
"type": "event",
"name": "on_permission_group_deleted",
"doc": "Called directly after a permission group is deleted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player doing the deletion.  \ngroup_name :: string :  The group that was deleted.  \nid :: uint :  The group id that was deleted."
},
"on_permission_group_edited": {
"type": "event",
"name": "on_permission_group_edited",
"doc": "Called directly after a permission group is edited in some way.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player that did the editing.  \ngroup :: LuaPermissionGroup :  The group being edited.  \ntype :: string :  The edit type: add-permission, remove-permission, enable-all, disable-all, add-player, remove-player, rename.  \naction :  The defines.input_action when the type is add-permission or remove-permission.  \nother_player_index :: uint :  The other player when the type is add-player or remove-player.  \nold_name :: string :  The old group name when the type is rename.  \nnew_name :: string :  The new group name when the type is rename."
},
"on_permission_string_imported": {
"type": "event",
"name": "on_permission_string_imported",
"doc": "Called directly after a permission string is imported.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player that imported the string."
},
"on_picked_up_item": {
"type": "event",
"name": "on_picked_up_item",
"doc": "Called when a player picks up an item.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nitem_stack :: SimpleItemStack  \nplayer_index :: uint"
},
"on_player_alt_selected_area": {
"type": "event",
"name": "on_player_alt_selected_area",
"doc": "Called after a player alt-selects an area with a selection-tool item.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player doing the selection.  \nsurface :: LuaSurface :  The surface selected.  \narea :: BoundingBox :  The area selected.  \nitem :: string :  The item used to select the area.  \nentities :: array of LuaEntity :  The entities selected.  \ntiles :: array of LuaTile :  The tiles selected."
},
"on_player_ammo_inventory_changed": {
"type": "event",
"name": "on_player_ammo_inventory_changed",
"doc": "Called after a players ammo inventory changed in some way.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_armor_inventory_changed": {
"type": "event",
"name": "on_player_armor_inventory_changed",
"doc": "Called after a players armor inventory changed in some way.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_banned": {
"type": "event",
"name": "on_player_banned",
"doc": "Called when a player is banned.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  The player banned.  \nplayer_name :: string :  The banned player name.  \nby_player :: uint (optional) :  The player that did the banning if any.  \nreason :: string (optional) :  The reason given if any."
},
"on_player_built_tile": {
"type": "event",
"name": "on_player_built_tile",
"doc": "Called after a player builds tiles.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nsurface_index :: uint :  The surface the tile(s) were built on.  \ntiles :: array of OldTileAndPosition :  The position data.  \ntile :: LuaTilePrototype :  The tile prototype that was placed.  \nitem :: LuaItemPrototype (optional) :  The item type used to build the tiles  \nstack :: LuaItemStack (optional) :  The stack used to build the tiles (may be empty if all of the items where used to build the tiles)."
},
"on_player_cancelled_crafting": {
"type": "event",
"name": "on_player_cancelled_crafting",
"doc": "Called when a player cancels crafting.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nitems :: LuaInventory  \nrecipe :: LuaRecipe  \ncancel_count :: uint"
},
"on_player_changed_force": {
"type": "event",
"name": "on_player_changed_force",
"doc": "Called after a player changes forces.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player who changed forces.  \nforce :: LuaForce :  The old force."
},
"on_player_changed_position": {
"type": "event",
"name": "on_player_changed_position",
"doc": "Called when the tile position a player is located at changes.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_player_changed_surface": {
"type": "event",
"name": "on_player_changed_surface",
"doc": "Called after a player changes surfaces.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player who changed surfaces.  \nsurface_index :: uint :  The surface index the player was on."
},
"on_player_cheat_mode_disabled": {
"type": "event",
"name": "on_player_cheat_mode_disabled",
"doc": "Called when cheat mode is disabled on a player.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_player_cheat_mode_enabled": {
"type": "event",
"name": "on_player_cheat_mode_enabled",
"doc": "Called when cheat mode is enabled on a player.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_player_clicked_gps_tag": {
"type": "event",
"name": "on_player_clicked_gps_tag",
"doc": "Called when a player clicks a gps tag  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  Index of the player  \nposition :: Position :  Map position contained in gps tag  \nsurface :: string :  Surface name contained in gps tag, even when such surface does not exists"
},
"on_player_configured_blueprint": {
"type": "event",
"name": "on_player_configured_blueprint",
"doc": "Called when a player clicks the \"confirm\" button in the configure Blueprint GUI.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_player_configured_spider_remote": {
"type": "event",
"name": "on_player_configured_spider_remote",
"doc": "Called when a player configures spidertron remote to be connected with a given spidertron  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player that configured the remote.  \nvehicle :: LuaEntity :  Spider vehicle to which remote was connected to."
},
"on_player_crafted_item": {
"type": "event",
"name": "on_player_crafted_item",
"doc": "Called when the player crafts an item (just before inserting into player's inventory, not clicking\n the button to craft). It is called for each item crafted as well as what was clicked.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nitem_stack :: LuaItemStack :  The crafted item  \nplayer_index :: uint :  The player who did the crafting  \nrecipe :: LuaRecipe :  The recipe that resulted in this item being crafted"
},
"on_player_created": {
"type": "event",
"name": "on_player_created",
"doc": "Called after the player was created.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_cursor_stack_changed": {
"type": "event",
"name": "on_player_cursor_stack_changed",
"doc": "Called after a players cursorstack changed in some way.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_deconstructed_area": {
"type": "event",
"name": "on_player_deconstructed_area",
"doc": "Called when a player selects an area with a deconstruction planner.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player doing the selection.  \nsurface :: LuaSurface :  The surface selected.  \narea :: BoundingBox :  The area selected.  \nitem :: string :  The item used to select the area.  \nalt :: boolean :  If normal selection or alt selection was used."
},
"on_player_demoted": {
"type": "event",
"name": "on_player_demoted",
"doc": "Called when a player is demoted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_player_died": {
"type": "event",
"name": "on_player_died",
"doc": "Called after a player dies.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \ncause :: LuaEntity (optional)"
},
"on_player_display_resolution_changed": {
"type": "event",
"name": "on_player_display_resolution_changed",
"doc": "Called when the display resolution changes for a given player.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player  \nold_resolution :: DisplayResolution :  The old display resolution"
},
"on_player_display_scale_changed": {
"type": "event",
"name": "on_player_display_scale_changed",
"doc": "Called when the display scale changes for a given player.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player  \nold_scale :: double :  The old display scale"
},
"on_player_driving_changed_state": {
"type": "event",
"name": "on_player_driving_changed_state",
"doc": "Called when the player's driving state has changed, this means a player has either\n entered or left a vehicle.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nentity :: LuaEntity (optional) :  The vehicle if any."
},
"on_player_dropped_item": {
"type": "event",
"name": "on_player_dropped_item",
"doc": "Called when a player drops an item on the ground.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nentity :: LuaEntity :  The item-on-ground entity."
},
"on_player_fast_transferred": {
"type": "event",
"name": "on_player_fast_transferred",
"doc": "Called when a player fast-transfers something to or from an entity.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nentity :: LuaEntity  \nfrom_player :: boolean :  If the transfer was from player to entity or entity to player."
},
"on_player_flushed_fluid": {
"type": "event",
"name": "on_player_flushed_fluid",
"doc": "Called after player flushed fluid  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  Index of the player  \nfluid :: string :  Name of a fluid that was flushed  \namount :: double :  Amount of fluid that was removed  \nentity :: LuaEntity :  Entity from which flush was performed  \nonly_this_entity :: boolean :  True if flush was requested only on this entity"
},
"on_player_gun_inventory_changed": {
"type": "event",
"name": "on_player_gun_inventory_changed",
"doc": "Called after a players gun inventory changed in some way.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_joined_game": {
"type": "event",
"name": "on_player_joined_game",
"doc": "Called after a player joins the game.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_kicked": {
"type": "event",
"name": "on_player_kicked",
"doc": "Called when a player is kicked.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player kicked.  \nby_player :: uint (optional) :  The player that did the kicking if any.  \nreason :: string (optional) :  The reason given if any."
},
"on_player_left_game": {
"type": "event",
"name": "on_player_left_game",
"doc": "Called after a player leaves the game.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nreason :: defines.disconnect_reason"
},
"on_player_main_inventory_changed": {
"type": "event",
"name": "on_player_main_inventory_changed",
"doc": "Called after a players main inventory changed in some way.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_mined_entity": {
"type": "event",
"name": "on_player_mined_entity",
"doc": "Called after the results of an entity being mined are collected just before the entity is destroyed.\n After this event any items in the buffer will be transferred into the player as if they came from mining the entity.\n Can be filtered using [LuaPlayerMinedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPlayerMinedEntityEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The index of the player doing the mining.  \nentity :: LuaEntity :  The entity that has been mined.  \nbuffer :: LuaInventory :  The temporary inventory that holds the result of mining the entity."
},
"on_player_mined_item": {
"type": "event",
"name": "on_player_mined_item",
"doc": "Called when the player mines something.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nitem_stack :: SimpleItemStack :  The item given to the player  \nplayer_index :: uint"
},
"on_player_mined_tile": {
"type": "event",
"name": "on_player_mined_tile",
"doc": "Called after a player mines tiles.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nsurface_index :: uint :  The surface the tile(s) were mined from.  \ntiles :: array of OldTileAndPosition :  The position data."
},
"on_player_muted": {
"type": "event",
"name": "on_player_muted",
"doc": "Called when a player is muted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_player_pipette": {
"type": "event",
"name": "on_player_pipette",
"doc": "Called when a player invokes the \"smart pipette\" over an entity.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player  \nitem :: LuaItemPrototype :  The item put in the cursor  \nused_cheat_mode :: boolean :  If cheat mode was used to give a free stack of the item."
},
"on_player_placed_equipment": {
"type": "event",
"name": "on_player_placed_equipment",
"doc": "Called after the player puts equipment in an equipment grid  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nequipment :: LuaEquipment :  The equipment put in the equipment grid.  \ngrid :: LuaEquipmentGrid :  The equipment grid the equipment was put in."
},
"on_player_promoted": {
"type": "event",
"name": "on_player_promoted",
"doc": "Called when a player is promoted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_player_removed": {
"type": "event",
"name": "on_player_removed",
"doc": "Called when a player is removed (deleted) from the game.\n Not to be confused with the player logging of this is different in that the player is deleted as if he never existed in the save file.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player index that was removed"
},
"on_player_removed_equipment": {
"type": "event",
"name": "on_player_removed_equipment",
"doc": "Called after the player removes equipment from an equipment grid  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \ngrid :: LuaEquipmentGrid :  The equipment grid removed from.  \nequipment :: string :  The equipment removed.  \ncount :: uint :  The count of equipment removed."
},
"on_player_repaired_entity": {
"type": "event",
"name": "on_player_repaired_entity",
"doc": "Called when a player repairs an entity.\n Can be filtered using [LuaPlayerRepairedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPlayerRepairedEntityEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nentity :: LuaEntity"
},
"on_player_respawned": {
"type": "event",
"name": "on_player_respawned",
"doc": "Called after a player respawns.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nplayer_port :: LuaEntity (optional) :  The player port used to respawn if one was used."
},
"on_player_rotated_entity": {
"type": "event",
"name": "on_player_rotated_entity",
"doc": "Called when the player rotates an entity. This event is only fired when the entity actually changes its\n orientation -- pressing the rotate key on an entity that can't be rotated won't fire this event.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity :  The rotated entity.  \nprevious_direction :: defines.direction :  The previous direction  \nplayer_index :: uint"
},
"on_player_selected_area": {
"type": "event",
"name": "on_player_selected_area",
"doc": "Called after a player selects an area with a selection-tool item.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player doing the selection.  \nsurface :: LuaSurface :  The surface selected.  \narea :: BoundingBox :  The area selected.  \nitem :: string :  The item used to select the area.  \nentities :: array of LuaEntity :  The entities selected.  \ntiles :: array of LuaTile :  The tiles selected."
},
"on_player_set_quick_bar_slot": {
"type": "event",
"name": "on_player_set_quick_bar_slot",
"doc": "Called when a player sets a quickbar slot to anything (new value, or set to empty).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_setup_blueprint": {
"type": "event",
"name": "on_player_setup_blueprint",
"doc": "Called when a player selects an area with a blueprint.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player doing the selection.  \nsurface :: LuaSurface :  The surface selected.  \narea :: BoundingBox :  The area selected.  \nitem :: string :  The item used to select the area.  \nalt :: boolean :  If normal selection or alt selection was used.  \nmapping :: LazyLoadedValue ( dictionary uint \u2192 LuaEntity ) :  The blueprint entity index to source entity mapping. Note: if any mod changes the blueprint this will be incorrect."
},
"on_player_toggled_alt_mode": {
"type": "event",
"name": "on_player_toggled_alt_mode",
"doc": "Called when a player toggles alt mode, also known as \"show entity info\".  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nalt_mode :: boolean :  The new alt mode value. This value is a shortcut for accessing GameViewSettings::show_entity_info on the player."
},
"on_player_toggled_map_editor": {
"type": "event",
"name": "on_player_toggled_map_editor",
"doc": "Called when a player toggles the map editor on or off.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_trash_inventory_changed": {
"type": "event",
"name": "on_player_trash_inventory_changed",
"doc": "Called after a players trash inventory changed in some way.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_player_unbanned": {
"type": "event",
"name": "on_player_unbanned",
"doc": "Called when a player is un-banned.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  The player un-banned.  \nplayer_name :: string :  The player name un-banned.  \nby_player :: uint (optional) :  The player that did the un-banning if any.  \nreason :: string (optional) :  The reason the player was banned if any."
},
"on_player_unmuted": {
"type": "event",
"name": "on_player_unmuted",
"doc": "Called when a player is unmuted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player."
},
"on_player_used_capsule": {
"type": "event",
"name": "on_player_used_capsule",
"doc": "Called when a player uses a capsule that results in some game action.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player.  \nitem :: LuaItemPrototype :  The capsule item used.  \nposition :: Position :  The position the capsule was used."
},
"on_player_used_spider_remote": {
"type": "event",
"name": "on_player_used_spider_remote",
"doc": "Called when a player uses spidertron remote to send a spidertron to a given position  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player that used the remote.  \nvehicle :: LuaEntity :  Spider vehicle which was requested to move.  \nposition :: Position :  Goal position to which spidertron was sent to.  \nsuccess :: boolean :  If the use was successful. It may fail when spidertron has different driver or when player is on different surface."
},
"on_post_entity_died": {
"type": "event",
"name": "on_post_entity_died",
"doc": "Called after an entity dies.\n Can be filtered using [LuaPostEntityDiedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPostEntityDiedEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nghost :: LuaEntity (optional) :  The ghost created by the entity dying if any.  \nforce :: LuaForce (optional) :  The force that did the killing if any.  \nposition :: Position :  Position where the entity died.  \nprototype :: LuaEntityPrototype :  The entity prototype of the entity that died.  \ndamage_type :: LuaDamagePrototype (optional) :  The damage type if any.  \ncorpses :: array of LuaEntity :  The corpses created by the entity dying if any.  \nsurface_index :: uint :  The surface the entity was on.  \nunit_number :: uint (optional) :  The unit number the entity had if any."
},
"on_pre_build": {
"type": "event",
"name": "on_pre_build",
"doc": "Called when players uses an item to build something. Called before [on_built_entity](https://lua-api.factorio.com/latest/events.html#on_built_entity) .  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player who did the placing.  \nposition :: Position :  Where the item was placed.  \nshift_build :: boolean :  Item was placed using shift building.  \ndirection :: defines.direction :  The direction the item was facing when placed.  \nflip_horizontal :: boolean :  If building this blueprint was flipped horizontally.  \nflip_vertical :: boolean :  If building this blueprint was flipped vertically.  \ncreated_by_moving :: boolean :  Item was placed while moving."
},
"on_pre_chunk_deleted": {
"type": "event",
"name": "on_pre_chunk_deleted",
"doc": "Called before one or more chunks are deleted using [LuaSurface::delete_chunk](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.delete_chunk) .  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint  \npositions :: array of ChunkPosition :  The chunks to be deleted."
},
"on_pre_entity_settings_pasted": {
"type": "event",
"name": "on_pre_entity_settings_pasted",
"doc": "Called before entity copy-paste is done.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nsource :: LuaEntity :  The source entity settings will be copied from.  \ndestination :: LuaEntity :  The destination entity settings will be copied to."
},
"on_pre_ghost_deconstructed": {
"type": "event",
"name": "on_pre_ghost_deconstructed",
"doc": "Called before a ghost entity is destroyed as a result of being marked for deconstruction.\n Can be filtered using [LuaPreGhostDeconstructedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPreGhostDeconstructedEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  The player that did the deconstruction if any.  \nghost :: LuaEntity"
},
"on_pre_permission_group_deleted": {
"type": "event",
"name": "on_pre_permission_group_deleted",
"doc": "Called directly before a permission group is deleted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player doing the deletion.  \ngroup :: LuaPermissionGroup :  The group to be deleted."
},
"on_pre_permission_string_imported": {
"type": "event",
"name": "on_pre_permission_string_imported",
"doc": "Called directly before a permission string is imported.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player importing the string."
},
"on_pre_player_crafted_item": {
"type": "event",
"name": "on_pre_player_crafted_item",
"doc": "Called when a player queues something to be crafted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player.  \nrecipe :: LuaRecipe :  The recipe.  \nitems :: LuaInventory :  The items removed from the players inventory to do the crafting.  \nqueued_count :: uint :  The number of recipes queued."
},
"on_pre_player_died": {
"type": "event",
"name": "on_pre_player_died",
"doc": "Called before a players dies.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \ncause :: LuaEntity (optional)"
},
"on_pre_player_left_game": {
"type": "event",
"name": "on_pre_player_left_game",
"doc": "Called before a player leaves the game.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nreason :: defines.disconnect_reason"
},
"on_pre_player_mined_item": {
"type": "event",
"name": "on_pre_player_mined_item",
"doc": "Called when the player finishes mining an entity, before the entity is removed from map.\n Can be filtered using [LuaPrePlayerMinedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPrePlayerMinedEntityEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity :  The entity being mined  \nplayer_index :: uint"
},
"on_pre_player_removed": {
"type": "event",
"name": "on_pre_player_removed",
"doc": "Called before a player is removed (deleted) from the game.\n Not to be confused with the player logging of this is different in that the player is deleted as if he never existed in the save file.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player index that will be removed"
},
"on_pre_player_toggled_map_editor": {
"type": "event",
"name": "on_pre_player_toggled_map_editor",
"doc": "Called before a player toggles the map editor on or off.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint"
},
"on_pre_robot_exploded_cliff": {
"type": "event",
"name": "on_pre_robot_exploded_cliff",
"doc": "Called directly before a robot explodes cliffs.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity  \ncliff :: LuaEntity  \nitem :: LuaItemPrototype :  The cliff explosive used."
},
"on_pre_script_inventory_resized": {
"type": "event",
"name": "on_pre_script_inventory_resized",
"doc": "Called just before a script inventory is resized.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  If done by console command; the player who ran the command.  \nmod :: string :  The mod that did the resizing. This will be \"core\" if done by console command or scenario script.  \ninventory :: LuaInventory  \nold_size :: uint :  The old inventory size.  \nnew_size :: uint :  The new inventory size."
},
"on_pre_surface_cleared": {
"type": "event",
"name": "on_pre_surface_cleared",
"doc": "Called just before a surface is cleared (all entities removed and all chunks deleted).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint"
},
"on_pre_surface_deleted": {
"type": "event",
"name": "on_pre_surface_deleted",
"doc": "Called just before a surface is deleted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint"
},
"on_research_finished": {
"type": "event",
"name": "on_research_finished",
"doc": "Called when a research finishes.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nresearch :: LuaTechnology :  The researched technology  \nby_script :: boolean :  If the technology was researched by script."
},
"on_research_started": {
"type": "event",
"name": "on_research_started",
"doc": "Called when a technology research starts.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nresearch :: LuaTechnology :  The technology being researched  \nlast_research :: LuaTechnology (optional)"
},
"on_resource_depleted": {
"type": "event",
"name": "on_resource_depleted",
"doc": "Called when a resource entity reaches 0 or its minimum yield for infinite resources.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity"
},
"on_robot_built_entity": {
"type": "event",
"name": "on_robot_built_entity",
"doc": "Called when a construction robot builds an entity.\n Can be filtered using [LuaRobotBuiltEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaRobotBuiltEntityEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity :  The robot that did the building.  \ncreated_entity :: LuaEntity :  The entity built.  \nstack :: LuaItemStack :  The item used to do the building.  \ntags :: Tags (optional) :  The tags associated with this entity if any."
},
"on_robot_built_tile": {
"type": "event",
"name": "on_robot_built_tile",
"doc": "Called after a robot builds tiles.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity :  The robot.  \ntiles :: array of OldTileAndPosition :  The position data.  \ntile :: LuaTilePrototype :  The tile prototype that was placed.  \nitem :: LuaItemPrototype :  The item type used to build the tiles.  \nstack :: LuaItemStack :  The stack used to build the tiles (may be empty if all of the items where used to build the tiles).  \nsurface_index :: uint :  The surface the tile(s) are build on."
},
"on_robot_exploded_cliff": {
"type": "event",
"name": "on_robot_exploded_cliff",
"doc": "Called directly after a robot explodes cliffs.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity  \nitem :: LuaItemPrototype :  The cliff explosive used."
},
"on_robot_mined": {
"type": "event",
"name": "on_robot_mined",
"doc": "Called when a robot mines an entity.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity :  The robot that did the mining.  \nitem_stack :: SimpleItemStack :  The entity the robot just picked up."
},
"on_robot_mined_entity": {
"type": "event",
"name": "on_robot_mined_entity",
"doc": "Called after the results of an entity being mined are collected just before the entity is destroyed.\n After this event any items in the buffer will be transferred into the robot as if they came from mining the entity.\n Can be filtered using [LuaRobotMinedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaRobotMinedEntityEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity :  The robot doing the mining.  \nentity :: LuaEntity :  The entity that has been mined.  \nbuffer :: LuaInventory :  The temporary inventory that holds the result of mining the entity."
},
"on_robot_mined_tile": {
"type": "event",
"name": "on_robot_mined_tile",
"doc": "Called after a robot mines tiles.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity :  The robot.  \ntiles :: array of OldTileAndPosition :  The position data.  \nsurface_index :: uint :  The surface the tile(s) were mined on."
},
"on_robot_pre_mined": {
"type": "event",
"name": "on_robot_pre_mined",
"doc": "Called before a robot mines an entity.\n Can be filtered using [LuaPreRobotMinedEntityEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaPreRobotMinedEntityEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrobot :: LuaEntity :  The robot that's about to do the mining.  \nentity :: LuaEntity :  The entity which is about to be mined."
},
"on_rocket_launch_ordered": {
"type": "event",
"name": "on_rocket_launch_ordered",
"doc": "Called when a rocket silo is ordered to be launched.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrocket :: LuaEntity  \nrocket_silo :: LuaEntity  \nplayer_index :: uint (optional) :  The player that is riding the rocket, if any."
},
"on_rocket_launched": {
"type": "event",
"name": "on_rocket_launched",
"doc": "Called when the rocket is launched.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nrocket :: LuaEntity  \nrocket_silo :: LuaEntity (optional)  \nplayer_index :: uint (optional) :  The player that is riding the rocket, if any."
},
"on_runtime_mod_setting_changed": {
"type": "event",
"name": "on_runtime_mod_setting_changed",
"doc": "Called when a runtime mod setting is changed by a player.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  The player who changed the setting or nil if changed by script.  \nsetting :: string :  The setting name that changed.  \nsetting_type :: string :  The setting type: \"runtime-per-user\", or \"runtime-global\"."
},
"on_script_inventory_resized": {
"type": "event",
"name": "on_script_inventory_resized",
"doc": "Called just after a script inventory is resized.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint (optional) :  If done by console command; the player who ran the command.  \nmod :: string :  The mod that did the resizing. This will be \"core\" if done by console command or scenario script.  \ninventory :: LuaInventory  \nold_size :: uint :  The old inventory size.  \nnew_size :: uint :  The new inventory size.  \noverflow_inventory :: LuaInventory :  Any items which didn't fit into the new inventory size."
},
"on_script_path_request_finished": {
"type": "event",
"name": "on_script_path_request_finished",
"doc": "Called when a script path request completes. [LuaSurface::request_path](https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.request_path)  \nEach Waypoint is a table:  \npath will be nil if pathfinding failed.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \npath :: array of Waypoint (optional)  \nid :: uint :  Handle to associate the callback with a particular call to LuaSurface::request_path .  \ntry_again_later :: boolean :  Indicates that the pathfinder failed because it is too busy, and you can retry later."
},
"on_script_trigger_effect": {
"type": "event",
"name": "on_script_trigger_effect",
"doc": "Called when a script trigger effect is triggered.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \neffect_id :: string :  The effect_id specified in the trigger effect.  \nsurface_index :: uint :  The surface the effect happened on.  \nsource_position :: Position (optional)  \nsource_entity :: LuaEntity (optional)  \ntarget_position :: Position (optional)  \ntarget_entity :: LuaEntity (optional)"
},
"on_sector_scanned": {
"type": "event",
"name": "on_sector_scanned",
"doc": "Called when the radar finishes scanning a sector.\n Can be filtered for the radar using [LuaSectorScannedEventFilters](https://lua-api.factorio.com/latest/Event-Filters.html#LuaSectorScannedEventFilters)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nradar :: LuaEntity :  The radar that did the scanning.  \nchunk_position :: ChunkPosition :  The chunk scanned.  \narea :: BoundingBox :  Area of the scanned chunk."
},
"on_selected_entity_changed": {
"type": "event",
"name": "on_selected_entity_changed",
"doc": "Called after the selected entity changes for a given player.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint :  The player whose selected entity changed.  \nlast_entity :: LuaEntity (optional) :  The last selected entity if it still exists and there was one."
},
"on_spider_command_completed": {
"type": "event",
"name": "on_spider_command_completed",
"doc": "Called when a spider finishes moving to its autopilot position.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nvehicle :: LuaEntity :  Spider vehicle which was requested to move."
},
"on_string_translated": {
"type": "event",
"name": "on_string_translated",
"doc": "Called when a translation request generated through [LuaPlayer::request_translation](https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.request_translation) is translated.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nplayer_index :: uint  \nlocalised_string :: LocalisedString  \nresult :: string  \ntranslated :: boolean"
},
"on_surface_cleared": {
"type": "event",
"name": "on_surface_cleared",
"doc": "Called just after a surface is cleared (all entities removed and all chunks deleted).  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint"
},
"on_surface_created": {
"type": "event",
"name": "on_surface_created",
"doc": "Called when a surface is created.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint"
},
"on_surface_deleted": {
"type": "event",
"name": "on_surface_deleted",
"doc": "Called after a surface is deleted.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint"
},
"on_surface_imported": {
"type": "event",
"name": "on_surface_imported",
"doc": "Called after a surface is imported.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint  \noriginal_name :: string :  The original surface name."
},
"on_surface_renamed": {
"type": "event",
"name": "on_surface_renamed",
"doc": "Called when a surface is renamed.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nsurface_index :: uint  \nold_name :: string  \nnew_name :: string"
},
"on_technology_effects_reset": {
"type": "event",
"name": "on_technology_effects_reset",
"doc": "Called when [LuaForce::reset_technology_effects](https://lua-api.factorio.com/latest/LuaForce.html#LuaForce.reset_technology_effects) is finished.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nforce :: LuaForce"
},
"on_train_changed_state": {
"type": "event",
"name": "on_train_changed_state",
"doc": "Called when a train changes state (started to stopped and vice versa)  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ntrain :: LuaTrain  \nold_state :: defines.train_state"
},
"on_train_created": {
"type": "event",
"name": "on_train_created",
"doc": "Called when a new train is created either through disconnecting/connecting an existing one or building a new one.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ntrain :: LuaTrain  \nold_train_id_1 :: uint (optional) :  The first old train id when splitting/merging trains.  \nold_train_id_2 :: uint (optional) :  The second old train id when splitting/merging trains."
},
"on_train_schedule_changed": {
"type": "event",
"name": "on_train_schedule_changed",
"doc": "Called when a trains schedule is changed either by the player or through script.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ntrain :: LuaTrain  \nplayer_index :: uint (optional) :  The player who made the change if any."
},
"on_trigger_created_entity": {
"type": "event",
"name": "on_trigger_created_entity",
"doc": "Called when an entity with a trigger prototype (such as capsules) create an entity AND that\n trigger prototype defined ````trigger_created_entity=\"true\"```` .  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity  \nsource :: LuaEntity (optional)"
},
"on_trigger_fired_artillery": {
"type": "event",
"name": "on_trigger_fired_artillery",
"doc": "Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that\n trigger prototype defined ````trigger_fired_artillery=\"true\"```` .  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nentity :: LuaEntity  \nsource :: LuaEntity (optional)"
},
"on_unit_added_to_group": {
"type": "event",
"name": "on_unit_added_to_group",
"doc": "Called when a unit is added to a unit group.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nunit :: LuaEntity  \ngroup :: LuaUnitGroup"
},
"on_unit_group_created": {
"type": "event",
"name": "on_unit_group_created",
"doc": "Called when a new unit group is created, before any members are added to it.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ngroup :: LuaUnitGroup"
},
"on_unit_group_finished_gathering": {
"type": "event",
"name": "on_unit_group_finished_gathering",
"doc": "Called when a unit group finishes gathering and starts executing its command.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \ngroup :: LuaUnitGroup"
},
"on_unit_removed_from_group": {
"type": "event",
"name": "on_unit_removed_from_group",
"doc": "Called when a unit is removed from a unit group.  \nContains  \nname :: defines.events: Identifier of the event  \ntick :: uint: Tick the event was generated.  \nunit :: LuaEntity  \ngroup :: LuaUnitGroup"
}
}
},
"flow_precision_index": {
"type": "define",
"properties": {
"one_second": {
"type": "define",
"name": "defines.flow_precision_index.one_second"
},
"one_minute": {
"type": "define",
"name": "defines.flow_precision_index.one_minute"
},
"ten_minutes": {
"type": "define",
"name": "defines.flow_precision_index.ten_minutes"
},
"one_hour": {
"type": "define",
"name": "defines.flow_precision_index.one_hour"
},
"ten_hours": {
"type": "define",
"name": "defines.flow_precision_index.ten_hours"
},
"fifty_hours": {
"type": "define",
"name": "defines.flow_precision_index.fifty_hours"
},
"two_hundred_fifty_hours": {
"type": "define",
"name": "defines.flow_precision_index.two_hundred_fifty_hours"
},
"one_thousand_hours": {
"type": "define",
"name": "defines.flow_precision_index.one_thousand_hours"
}
}
},
"group_state": {
"type": "define",
"properties": {
"gathering": {
"type": "define",
"name": "defines.group_state.gathering"
},
"moving": {
"type": "define",
"name": "defines.group_state.moving"
},
"attacking_distraction": {
"type": "define",
"name": "defines.group_state.attacking_distraction"
},
"attacking_target": {
"type": "define",
"name": "defines.group_state.attacking_target"
},
"finished": {
"type": "define",
"name": "defines.group_state.finished"
},
"pathfinding": {
"type": "define",
"name": "defines.group_state.pathfinding"
},
"wander_in_group": {
"type": "define",
"name": "defines.group_state.wander_in_group"
}
}
},
"gui_type": {
"type": "define",
"properties": {
"none": {
"type": "define",
"name": "defines.gui_type.none"
},
"entity": {
"type": "define",
"name": "defines.gui_type.entity"
},
"research": {
"type": "define",
"name": "defines.gui_type.research"
},
"controller": {
"type": "define",
"name": "defines.gui_type.controller"
},
"production": {
"type": "define",
"name": "defines.gui_type.production"
},
"item": {
"type": "define",
"name": "defines.gui_type.item"
},
"bonus": {
"type": "define",
"name": "defines.gui_type.bonus"
},
"trains": {
"type": "define",
"name": "defines.gui_type.trains"
},
"achievement": {
"type": "define",
"name": "defines.gui_type.achievement"
},
"blueprint_library": {
"type": "define",
"name": "defines.gui_type.blueprint_library"
},
"equipment": {
"type": "define",
"name": "defines.gui_type.equipment"
},
"logistic": {
"type": "define",
"name": "defines.gui_type.logistic"
},
"other_player": {
"type": "define",
"name": "defines.gui_type.other_player"
},
"permissions": {
"type": "define",
"name": "defines.gui_type.permissions"
},
"tutorials": {
"type": "define",
"name": "defines.gui_type.tutorials"
},
"custom": {
"type": "define",
"name": "defines.gui_type.custom"
},
"server_management": {
"type": "define",
"name": "defines.gui_type.server_management"
},
"player_management": {
"type": "define",
"name": "defines.gui_type.player_management"
},
"tile": {
"type": "define",
"name": "defines.gui_type.tile"
}
}
},
"input_action": {
"type": "define",
"properties": {
"activate_copy": {
"type": "define",
"name": "defines.input_action.activate_copy"
},
"activate_cut": {
"type": "define",
"name": "defines.input_action.activate_cut"
},
"activate_paste": {
"type": "define",
"name": "defines.input_action.activate_paste"
},
"add_permission_group": {
"type": "define",
"name": "defines.input_action.add_permission_group"
},
"add_train_station": {
"type": "define",
"name": "defines.input_action.add_train_station"
},
"admin_action": {
"type": "define",
"name": "defines.input_action.admin_action"
},
"alt_select_area": {
"type": "define",
"name": "defines.input_action.alt_select_area"
},
"alt_select_blueprint_entities": {
"type": "define",
"name": "defines.input_action.alt_select_blueprint_entities"
},
"alternative_copy": {
"type": "define",
"name": "defines.input_action.alternative_copy"
},
"begin_mining": {
"type": "define",
"name": "defines.input_action.begin_mining"
},
"begin_mining_terrain": {
"type": "define",
"name": "defines.input_action.begin_mining_terrain"
},
"build": {
"type": "define",
"name": "defines.input_action.build"
},
"build_rail": {
"type": "define",
"name": "defines.input_action.build_rail"
},
"build_terrain": {
"type": "define",
"name": "defines.input_action.build_terrain"
},
"cancel_craft": {
"type": "define",
"name": "defines.input_action.cancel_craft"
},
"cancel_deconstruct": {
"type": "define",
"name": "defines.input_action.cancel_deconstruct"
},
"cancel_new_blueprint": {
"type": "define",
"name": "defines.input_action.cancel_new_blueprint"
},
"cancel_research": {
"type": "define",
"name": "defines.input_action.cancel_research"
},
"cancel_upgrade": {
"type": "define",
"name": "defines.input_action.cancel_upgrade"
},
"change_active_character_tab": {
"type": "define",
"name": "defines.input_action.change_active_character_tab"
},
"change_active_item_group_for_crafting": {
"type": "define",
"name": "defines.input_action.change_active_item_group_for_crafting"
},
"change_active_item_group_for_filters": {
"type": "define",
"name": "defines.input_action.change_active_item_group_for_filters"
},
"change_active_quick_bar": {
"type": "define",
"name": "defines.input_action.change_active_quick_bar"
},
"change_arithmetic_combinator_parameters": {
"type": "define",
"name": "defines.input_action.change_arithmetic_combinator_parameters"
},
"change_decider_combinator_parameters": {
"type": "define",
"name": "defines.input_action.change_decider_combinator_parameters"
},
"change_entity_label": {
"type": "define",
"name": "defines.input_action.change_entity_label"
},
"change_item_description": {
"type": "define",
"name": "defines.input_action.change_item_description"
},
"change_item_label": {
"type": "define",
"name": "defines.input_action.change_item_label"
},
"change_multiplayer_config": {
"type": "define",
"name": "defines.input_action.change_multiplayer_config"
},
"change_picking_state": {
"type": "define",
"name": "defines.input_action.change_picking_state"
},
"change_programmable_speaker_alert_parameters": {
"type": "define",
"name": "defines.input_action.change_programmable_speaker_alert_parameters"
},
"change_programmable_speaker_circuit_parameters": {
"type": "define",
"name": "defines.input_action.change_programmable_speaker_circuit_parameters"
},
"change_programmable_speaker_parameters": {
"type": "define",
"name": "defines.input_action.change_programmable_speaker_parameters"
},
"change_riding_state": {
"type": "define",
"name": "defines.input_action.change_riding_state"
},
"change_shooting_state": {
"type": "define",
"name": "defines.input_action.change_shooting_state"
},
"change_train_stop_station": {
"type": "define",
"name": "defines.input_action.change_train_stop_station"
},
"change_train_wait_condition": {
"type": "define",
"name": "defines.input_action.change_train_wait_condition"
},
"change_train_wait_condition_data": {
"type": "define",
"name": "defines.input_action.change_train_wait_condition_data"
},
"check_c_r_c": {
"type": "define",
"name": "defines.input_action.check_c_r_c"
},
"check_c_r_c_heuristic": {
"type": "define",
"name": "defines.input_action.check_c_r_c_heuristic"
},
"clear_cursor": {
"type": "define",
"name": "defines.input_action.clear_cursor"
},
"connect_rolling_stock": {
"type": "define",
"name": "defines.input_action.connect_rolling_stock"
},
"copy": {
"type": "define",
"name": "defines.input_action.copy"
},
"copy_entity_settings": {
"type": "define",
"name": "defines.input_action.copy_entity_settings"
},
"copy_opened_blueprint": {
"type": "define",
"name": "defines.input_action.copy_opened_blueprint"
},
"copy_opened_item": {
"type": "define",
"name": "defines.input_action.copy_opened_item"
},
"craft": {
"type": "define",
"name": "defines.input_action.craft"
},
"cursor_split": {
"type": "define",
"name": "defines.input_action.cursor_split"
},
"cursor_transfer": {
"type": "define",
"name": "defines.input_action.cursor_transfer"
},
"custom_input": {
"type": "define",
"name": "defines.input_action.custom_input"
},
"cycle_blueprint_book_backwards": {
"type": "define",
"name": "defines.input_action.cycle_blueprint_book_backwards"
},
"cycle_blueprint_book_forwards": {
"type": "define",
"name": "defines.input_action.cycle_blueprint_book_forwards"
},
"deconstruct": {
"type": "define",
"name": "defines.input_action.deconstruct"
},
"delete_blueprint_library": {
"type": "define",
"name": "defines.input_action.delete_blueprint_library"
},
"delete_blueprint_record": {
"type": "define",
"name": "defines.input_action.delete_blueprint_record"
},
"delete_custom_tag": {
"type": "define",
"name": "defines.input_action.delete_custom_tag"
},
"delete_permission_group": {
"type": "define",
"name": "defines.input_action.delete_permission_group"
},
"destroy_item": {
"type": "define",
"name": "defines.input_action.destroy_item"
},
"destroy_opened_item": {
"type": "define",
"name": "defines.input_action.destroy_opened_item"
},
"disconnect_all_players": {
"type": "define",
"name": "defines.input_action.disconnect_all_players"
},
"disconnect_rolling_stock": {
"type": "define",
"name": "defines.input_action.disconnect_rolling_stock"
},
"drag_train_schedule": {
"type": "define",
"name": "defines.input_action.drag_train_schedule"
},
"drag_train_wait_condition": {
"type": "define",
"name": "defines.input_action.drag_train_wait_condition"
},
"drop_blueprint_record": {
"type": "define",
"name": "defines.input_action.drop_blueprint_record"
},
"drop_item": {
"type": "define",
"name": "defines.input_action.drop_item"
},
"edit_blueprint_tool_preview": {
"type": "define",
"name": "defines.input_action.edit_blueprint_tool_preview"
},
"edit_custom_tag": {
"type": "define",
"name": "defines.input_action.edit_custom_tag"
},
"edit_permission_group": {
"type": "define",
"name": "defines.input_action.edit_permission_group"
},
"export_blueprint": {
"type": "define",
"name": "defines.input_action.export_blueprint"
},
"fast_entity_split": {
"type": "define",
"name": "defines.input_action.fast_entity_split"
},
"fast_entity_transfer": {
"type": "define",
"name": "defines.input_action.fast_entity_transfer"
},
"flush_opened_entity_fluid": {
"type": "define",
"name": "defines.input_action.flush_opened_entity_fluid"
},
"flush_opened_entity_specific_fluid": {
"type": "define",
"name": "defines.input_action.flush_opened_entity_specific_fluid"
},
"game_created_from_scenario": {
"type": "define",
"name": "defines.input_action.game_created_from_scenario"
},
"go_to_train_station": {
"type": "define",
"name": "defines.input_action.go_to_train_station"
},
"grab_blueprint_record": {
"type": "define",
"name": "defines.input_action.grab_blueprint_record"
},
"gui_checked_state_changed": {
"type": "define",
"name": "defines.input_action.gui_checked_state_changed"
},
"gui_click": {
"type": "define",
"name": "defines.input_action.gui_click"
},
"gui_confirmed": {
"type": "define",
"name": "defines.input_action.gui_confirmed"
},
"gui_elem_changed": {
"type": "define",
"name": "defines.input_action.gui_elem_changed"
},
"gui_location_changed": {
"type": "define",
"name": "defines.input_action.gui_location_changed"
},
"gui_selected_tab_changed": {
"type": "define",
"name": "defines.input_action.gui_selected_tab_changed"
},
"gui_selection_state_changed": {
"type": "define",
"name": "defines.input_action.gui_selection_state_changed"
},
"gui_switch_state_changed": {
"type": "define",
"name": "defines.input_action.gui_switch_state_changed"
},
"gui_text_changed": {
"type": "define",
"name": "defines.input_action.gui_text_changed"
},
"gui_value_changed": {
"type": "define",
"name": "defines.input_action.gui_value_changed"
},
"import_blueprint": {
"type": "define",
"name": "defines.input_action.import_blueprint"
},
"import_blueprint_string": {
"type": "define",
"name": "defines.input_action.import_blueprint_string"
},
"import_blueprints_filtered": {
"type": "define",
"name": "defines.input_action.import_blueprints_filtered"
},
"import_permissions_string": {
"type": "define",
"name": "defines.input_action.import_permissions_string"
},
"inventory_split": {
"type": "define",
"name": "defines.input_action.inventory_split"
},
"inventory_transfer": {
"type": "define",
"name": "defines.input_action.inventory_transfer"
},
"launch_rocket": {
"type": "define",
"name": "defines.input_action.launch_rocket"
},
"lua_shortcut": {
"type": "define",
"name": "defines.input_action.lua_shortcut"
},
"map_editor_action": {
"type": "define",
"name": "defines.input_action.map_editor_action"
},
"market_offer": {
"type": "define",
"name": "defines.input_action.market_offer"
},
"mod_settings_changed": {
"type": "define",
"name": "defines.input_action.mod_settings_changed"
},
"multiplayer_init": {
"type": "define",
"name": "defines.input_action.multiplayer_init"
},
"open_achievements_gui": {
"type": "define",
"name": "defines.input_action.open_achievements_gui"
},
"open_blueprint_library_gui": {
"type": "define",
"name": "defines.input_action.open_blueprint_library_gui"
},
"open_blueprint_record": {
"type": "define",
"name": "defines.input_action.open_blueprint_record"
},
"open_bonus_gui": {
"type": "define",
"name": "defines.input_action.open_bonus_gui"
},
"open_character_gui": {
"type": "define",
"name": "defines.input_action.open_character_gui"
},
"open_current_vehicle_gui": {
"type": "define",
"name": "defines.input_action.open_current_vehicle_gui"
},
"open_equipment": {
"type": "define",
"name": "defines.input_action.open_equipment"
},
"open_gui": {
"type": "define",
"name": "defines.input_action.open_gui"
},
"open_item": {
"type": "define",
"name": "defines.input_action.open_item"
},
"open_logistic_gui": {
"type": "define",
"name": "defines.input_action.open_logistic_gui"
},
"open_mod_item": {
"type": "define",
"name": "defines.input_action.open_mod_item"
},
"open_parent_of_opened_item": {
"type": "define",
"name": "defines.input_action.open_parent_of_opened_item"
},
"open_production_gui": {
"type": "define",
"name": "defines.input_action.open_production_gui"
},
"open_technology_gui": {
"type": "define",
"name": "defines.input_action.open_technology_gui"
},
"open_tips_and_tricks_gui": {
"type": "define",
"name": "defines.input_action.open_tips_and_tricks_gui"
},
"open_train_gui": {
"type": "define",
"name": "defines.input_action.open_train_gui"
},
"open_train_station_gui": {
"type": "define",
"name": "defines.input_action.open_train_station_gui"
},
"open_trains_gui": {
"type": "define",
"name": "defines.input_action.open_trains_gui"
},
"paste_entity_settings": {
"type": "define",
"name": "defines.input_action.paste_entity_settings"
},
"place_equipment": {
"type": "define",
"name": "defines.input_action.place_equipment"
},
"player_admin_change": {
"type": "define",
"name": "defines.input_action.player_admin_change"
},
"player_join_game": {
"type": "define",
"name": "defines.input_action.player_join_game"
},
"quick_bar_pick_slot": {
"type": "define",
"name": "defines.input_action.quick_bar_pick_slot"
},
"quick_bar_set_selected_page": {
"type": "define",
"name": "defines.input_action.quick_bar_set_selected_page"
},
"quick_bar_set_slot": {
"type": "define",
"name": "defines.input_action.quick_bar_set_slot"
},
"reassign_blueprint": {
"type": "define",
"name": "defines.input_action.reassign_blueprint"
},
"reload_script": {
"type": "define",
"name": "defines.input_action.reload_script"
},
"reload_script_data_too_large": {
"type": "define",
"name": "defines.input_action.reload_script_data_too_large"
},
"remove_cables": {
"type": "define",
"name": "defines.input_action.remove_cables"
},
"remove_train_station": {
"type": "define",
"name": "defines.input_action.remove_train_station"
},
"reset_assembling_machine": {
"type": "define",
"name": "defines.input_action.reset_assembling_machine"
},
"reset_item": {
"type": "define",
"name": "defines.input_action.reset_item"
},
"rotate_entity": {
"type": "define",
"name": "defines.input_action.rotate_entity"
},
"select_area": {
"type": "define",
"name": "defines.input_action.select_area"
},
"select_blueprint_entities": {
"type": "define",
"name": "defines.input_action.select_blueprint_entities"
},
"select_entity_slot": {
"type": "define",
"name": "defines.input_action.select_entity_slot"
},
"select_item": {
"type": "define",
"name": "defines.input_action.select_item"
},
"select_mapper_slot": {
"type": "define",
"name": "defines.input_action.select_mapper_slot"
},
"select_next_valid_gun": {
"type": "define",
"name": "defines.input_action.select_next_valid_gun"
},
"select_tile_slot": {
"type": "define",
"name": "defines.input_action.select_tile_slot"
},
"send_spidertron": {
"type": "define",
"name": "defines.input_action.send_spidertron"
},
"server_command": {
"type": "define",
"name": "defines.input_action.server_command"
},
"set_allow_commands": {
"type": "define",
"name": "defines.input_action.set_allow_commands"
},
"set_auto_launch_rocket": {
"type": "define",
"name": "defines.input_action.set_auto_launch_rocket"
},
"set_autosort_inventory": {
"type": "define",
"name": "defines.input_action.set_autosort_inventory"
},
"set_behavior_mode": {
"type": "define",
"name": "defines.input_action.set_behavior_mode"
},
"set_car_weapons_control": {
"type": "define",
"name": "defines.input_action.set_car_weapons_control"
},
"set_circuit_condition": {
"type": "define",
"name": "defines.input_action.set_circuit_condition"
},
"set_circuit_mode_of_operation": {
"type": "define",
"name": "defines.input_action.set_circuit_mode_of_operation"
},
"set_controller_logistic_trash_filter_item": {
"type": "define",
"name": "defines.input_action.set_controller_logistic_trash_filter_item"
},
"set_deconstruction_item_tile_selection_mode": {
"type": "define",
"name": "defines.input_action.set_deconstruction_item_tile_selection_mode"
},
"set_deconstruction_item_trees_and_rocks_only": {
"type": "define",
"name": "defines.input_action.set_deconstruction_item_trees_and_rocks_only"
},
"set_entity_color": {
"type": "define",
"name": "defines.input_action.set_entity_color"
},
"set_entity_energy_property": {
"type": "define",
"name": "defines.input_action.set_entity_energy_property"
},
"set_entity_logistic_trash_filter_item": {
"type": "define",
"name": "defines.input_action.set_entity_logistic_trash_filter_item"
},
"set_filter": {
"type": "define",
"name": "defines.input_action.set_filter"
},
"set_flat_controller_gui": {
"type": "define",
"name": "defines.input_action.set_flat_controller_gui"
},
"set_heat_interface_mode": {
"type": "define",
"name": "defines.input_action.set_heat_interface_mode"
},
"set_heat_interface_temperature": {
"type": "define",
"name": "defines.input_action.set_heat_interface_temperature"
},
"set_infinity_container_filter_item": {
"type": "define",
"name": "defines.input_action.set_infinity_container_filter_item"
},
"set_infinity_container_remove_unfiltered_items": {
"type": "define",
"name": "defines.input_action.set_infinity_container_remove_unfiltered_items"
},
"set_infinity_pipe_filter": {
"type": "define",
"name": "defines.input_action.set_infinity_pipe_filter"
},
"set_inserter_max_stack_size": {
"type": "define",
"name": "defines.input_action.set_inserter_max_stack_size"
},
"set_inventory_bar": {
"type": "define",
"name": "defines.input_action.set_inventory_bar"
},
"set_linked_container_link_i_d": {
"type": "define",
"name": "defines.input_action.set_linked_container_link_i_d"
},
"set_logistic_filter_item": {
"type": "define",
"name": "defines.input_action.set_logistic_filter_item"
},
"set_logistic_filter_signal": {
"type": "define",
"name": "defines.input_action.set_logistic_filter_signal"
},
"set_player_color": {
"type": "define",
"name": "defines.input_action.set_player_color"
},
"set_recipe_notifications": {
"type": "define",
"name": "defines.input_action.set_recipe_notifications"
},
"set_request_from_buffers": {
"type": "define",
"name": "defines.input_action.set_request_from_buffers"
},
"set_research_finished_stops_game": {
"type": "define",
"name": "defines.input_action.set_research_finished_stops_game"
},
"set_signal": {
"type": "define",
"name": "defines.input_action.set_signal"
},
"set_splitter_priority": {
"type": "define",
"name": "defines.input_action.set_splitter_priority"
},
"set_train_stopped": {
"type": "define",
"name": "defines.input_action.set_train_stopped"
},
"set_trains_limit": {
"type": "define",
"name": "defines.input_action.set_trains_limit"
},
"set_vehicle_automatic_targeting_parameters": {
"type": "define",
"name": "defines.input_action.set_vehicle_automatic_targeting_parameters"
},
"setup_assembling_machine": {
"type": "define",
"name": "defines.input_action.setup_assembling_machine"
},
"setup_blueprint": {
"type": "define",
"name": "defines.input_action.setup_blueprint"
},
"setup_single_blueprint_record": {
"type": "define",
"name": "defines.input_action.setup_single_blueprint_record"
},
"singleplayer_init": {
"type": "define",
"name": "defines.input_action.singleplayer_init"
},
"smart_pipette": {
"type": "define",
"name": "defines.input_action.smart_pipette"
},
"spawn_item": {
"type": "define",
"name": "defines.input_action.spawn_item"
},
"stack_split": {
"type": "define",
"name": "defines.input_action.stack_split"
},
"stack_transfer": {
"type": "define",
"name": "defines.input_action.stack_transfer"
},
"start_repair": {
"type": "define",
"name": "defines.input_action.start_repair"
},
"start_research": {
"type": "define",
"name": "defines.input_action.start_research"
},
"start_walking": {
"type": "define",
"name": "defines.input_action.start_walking"
},
"stop_building_by_moving": {
"type": "define",
"name": "defines.input_action.stop_building_by_moving"
},
"switch_connect_to_logistic_network": {
"type": "define",
"name": "defines.input_action.switch_connect_to_logistic_network"
},
"switch_constant_combinator_state": {
"type": "define",
"name": "defines.input_action.switch_constant_combinator_state"
},
"switch_inserter_filter_mode_state": {
"type": "define",
"name": "defines.input_action.switch_inserter_filter_mode_state"
},
"switch_power_switch_state": {
"type": "define",
"name": "defines.input_action.switch_power_switch_state"
},
"switch_to_rename_stop_gui": {
"type": "define",
"name": "defines.input_action.switch_to_rename_stop_gui"
},
"take_equipment": {
"type": "define",
"name": "defines.input_action.take_equipment"
},
"toggle_deconstruction_item_entity_filter_mode": {
"type": "define",
"name": "defines.input_action.toggle_deconstruction_item_entity_filter_mode"
},
"toggle_deconstruction_item_tile_filter_mode": {
"type": "define",
"name": "defines.input_action.toggle_deconstruction_item_tile_filter_mode"
},
"toggle_driving": {
"type": "define",
"name": "defines.input_action.toggle_driving"
},
"toggle_enable_vehicle_logistics_while_moving": {
"type": "define",
"name": "defines.input_action.toggle_enable_vehicle_logistics_while_moving"
},
"toggle_entity_logistic_requests": {
"type": "define",
"name": "defines.input_action.toggle_entity_logistic_requests"
},
"toggle_equipment_movement_bonus": {
"type": "define",
"name": "defines.input_action.toggle_equipment_movement_bonus"
},
"toggle_map_editor": {
"type": "define",
"name": "defines.input_action.toggle_map_editor"
},
"toggle_personal_logistic_requests": {
"type": "define",
"name": "defines.input_action.toggle_personal_logistic_requests"
},
"toggle_personal_roboport": {
"type": "define",
"name": "defines.input_action.toggle_personal_roboport"
},
"toggle_show_entity_info": {
"type": "define",
"name": "defines.input_action.toggle_show_entity_info"
},
"translate_string": {
"type": "define",
"name": "defines.input_action.translate_string"
},
"undo": {
"type": "define",
"name": "defines.input_action.undo"
},
"upgrade": {
"type": "define",
"name": "defines.input_action.upgrade"
},
"upgrade_opened_blueprint_by_item": {
"type": "define",
"name": "defines.input_action.upgrade_opened_blueprint_by_item"
},
"upgrade_opened_blueprint_by_record": {
"type": "define",
"name": "defines.input_action.upgrade_opened_blueprint_by_record"
},
"use_artillery_remote": {
"type": "define",
"name": "defines.input_action.use_artillery_remote"
},
"use_item": {
"type": "define",
"name": "defines.input_action.use_item"
},
"wire_dragging": {
"type": "define",
"name": "defines.input_action.wire_dragging"
},
"write_to_console": {
"type": "define",
"name": "defines.input_action.write_to_console"
}
}
},
"inventory": {
"type": "define",
"properties": {
"fuel": {
"type": "define",
"name": "defines.inventory.fuel"
},
"burnt_result": {
"type": "define",
"name": "defines.inventory.burnt_result"
},
"chest": {
"type": "define",
"name": "defines.inventory.chest"
},
"furnace_source": {
"type": "define",
"name": "defines.inventory.furnace_source"
},
"furnace_result": {
"type": "define",
"name": "defines.inventory.furnace_result"
},
"furnace_modules": {
"type": "define",
"name": "defines.inventory.furnace_modules"
},
"character_main": {
"type": "define",
"name": "defines.inventory.character_main"
},
"character_guns": {
"type": "define",
"name": "defines.inventory.character_guns"
},
"character_ammo": {
"type": "define",
"name": "defines.inventory.character_ammo"
},
"character_armor": {
"type": "define",
"name": "defines.inventory.character_armor"
},
"character_vehicle": {
"type": "define",
"name": "defines.inventory.character_vehicle"
},
"character_trash": {
"type": "define",
"name": "defines.inventory.character_trash"
},
"god_main": {
"type": "define",
"name": "defines.inventory.god_main"
},
"editor_main": {
"type": "define",
"name": "defines.inventory.editor_main"
},
"editor_guns": {
"type": "define",
"name": "defines.inventory.editor_guns"
},
"editor_ammo": {
"type": "define",
"name": "defines.inventory.editor_ammo"
},
"editor_armor": {
"type": "define",
"name": "defines.inventory.editor_armor"
},
"roboport_robot": {
"type": "define",
"name": "defines.inventory.roboport_robot"
},
"roboport_material": {
"type": "define",
"name": "defines.inventory.roboport_material"
},
"robot_cargo": {
"type": "define",
"name": "defines.inventory.robot_cargo"
},
"robot_repair": {
"type": "define",
"name": "defines.inventory.robot_repair"
},
"assembling_machine_input": {
"type": "define",
"name": "defines.inventory.assembling_machine_input"
},
"assembling_machine_output": {
"type": "define",
"name": "defines.inventory.assembling_machine_output"
},
"assembling_machine_modules": {
"type": "define",
"name": "defines.inventory.assembling_machine_modules"
},
"lab_input": {
"type": "define",
"name": "defines.inventory.lab_input"
},
"lab_modules": {
"type": "define",
"name": "defines.inventory.lab_modules"
},
"mining_drill_modules": {
"type": "define",
"name": "defines.inventory.mining_drill_modules"
},
"item_main": {
"type": "define",
"name": "defines.inventory.item_main"
},
"rocket_silo_rocket": {
"type": "define",
"name": "defines.inventory.rocket_silo_rocket"
},
"rocket_silo_result": {
"type": "define",
"name": "defines.inventory.rocket_silo_result"
},
"rocket": {
"type": "define",
"name": "defines.inventory.rocket"
},
"car_trunk": {
"type": "define",
"name": "defines.inventory.car_trunk"
},
"car_ammo": {
"type": "define",
"name": "defines.inventory.car_ammo"
},
"cargo_wagon": {
"type": "define",
"name": "defines.inventory.cargo_wagon"
},
"turret_ammo": {
"type": "define",
"name": "defines.inventory.turret_ammo"
},
"beacon_modules": {
"type": "define",
"name": "defines.inventory.beacon_modules"
},
"character_corpse": {
"type": "define",
"name": "defines.inventory.character_corpse"
},
"artillery_turret_ammo": {
"type": "define",
"name": "defines.inventory.artillery_turret_ammo"
},
"artillery_wagon_ammo": {
"type": "define",
"name": "defines.inventory.artillery_wagon_ammo"
},
"spider_trunk": {
"type": "define",
"name": "defines.inventory.spider_trunk"
},
"spider_ammo": {
"type": "define",
"name": "defines.inventory.spider_ammo"
},
"spider_trash": {
"type": "define",
"name": "defines.inventory.spider_trash"
}
}
},
"logistic_member_index": {
"type": "define",
"properties": {
"logistic_container": {
"type": "define",
"name": "defines.logistic_member_index.logistic_container"
},
"vehicle_storage": {
"type": "define",
"name": "defines.logistic_member_index.vehicle_storage"
},
"character_requester": {
"type": "define",
"name": "defines.logistic_member_index.character_requester"
},
"character_storage": {
"type": "define",
"name": "defines.logistic_member_index.character_storage"
},
"character_provider": {
"type": "define",
"name": "defines.logistic_member_index.character_provider"
},
"generic_on_off_behavior": {
"type": "define",
"name": "defines.logistic_member_index.generic_on_off_behavior"
}
}
},
"logistic_mode": {
"type": "define",
"properties": {
"none": {
"type": "define",
"name": "defines.logistic_mode.none"
},
"active_provider": {
"type": "define",
"name": "defines.logistic_mode.active_provider"
},
"storage": {
"type": "define",
"name": "defines.logistic_mode.storage"
},
"requester": {
"type": "define",
"name": "defines.logistic_mode.requester"
},
"passive_provider": {
"type": "define",
"name": "defines.logistic_mode.passive_provider"
},
"buffer": {
"type": "define",
"name": "defines.logistic_mode.buffer"
}
}
},
"mouse_button_type": {
"type": "define",
"properties": {
"none": {
"type": "define",
"name": "defines.mouse_button_type.none"
},
"left": {
"type": "define",
"name": "defines.mouse_button_type.left"
},
"right": {
"type": "define",
"name": "defines.mouse_button_type.right"
},
"middle": {
"type": "define",
"name": "defines.mouse_button_type.middle"
}
}
},
"rail_connection_direction": {
"type": "define",
"properties": {
"left": {
"type": "define",
"name": "defines.rail_connection_direction.left"
},
"straight": {
"type": "define",
"name": "defines.rail_connection_direction.straight"
},
"right": {
"type": "define",
"name": "defines.rail_connection_direction.right"
},
"none": {
"type": "define",
"name": "defines.rail_connection_direction.none"
}
}
},
"rail_direction": {
"type": "define",
"properties": {
"front": {
"type": "define",
"name": "defines.rail_direction.front"
},
"back": {
"type": "define",
"name": "defines.rail_direction.back"
}
}
},
"relative_gui_position": {
"type": "define",
"properties": {
"top": {
"type": "define",
"name": "defines.relative_gui_position.top"
},
"bottom": {
"type": "define",
"name": "defines.relative_gui_position.bottom"
},
"left": {
"type": "define",
"name": "defines.relative_gui_position.left"
},
"right": {
"type": "define",
"name": "defines.relative_gui_position.right"
}
}
},
"relative_gui_type": {
"type": "define",
"properties": {
"accumulator_gui": {
"type": "define",
"name": "defines.relative_gui_type.accumulator_gui"
},
"achievement_gui": {
"type": "define",
"name": "defines.relative_gui_type.achievement_gui"
},
"additional_entity_info_gui": {
"type": "define",
"name": "defines.relative_gui_type.additional_entity_info_gui"
},
"admin_gui": {
"type": "define",
"name": "defines.relative_gui_type.admin_gui"
},
"arithmetic_combinator_gui": {
"type": "define",
"name": "defines.relative_gui_type.arithmetic_combinator_gui"
},
"armor_gui": {
"type": "define",
"name": "defines.relative_gui_type.armor_gui"
},
"assembling_machine_gui": {
"type": "define",
"name": "defines.relative_gui_type.assembling_machine_gui"
},
"assembling_machine_select_recipe_gui": {
"type": "define",
"name": "defines.relative_gui_type.assembling_machine_select_recipe_gui"
},
"beacon_gui": {
"type": "define",
"name": "defines.relative_gui_type.beacon_gui"
},
"blueprint_book_gui": {
"type": "define",
"name": "defines.relative_gui_type.blueprint_book_gui"
},
"blueprint_library_gui": {
"type": "define",
"name": "defines.relative_gui_type.blueprint_library_gui"
},
"blueprint_setup_gui": {
"type": "define",
"name": "defines.relative_gui_type.blueprint_setup_gui"
},
"bonus_gui": {
"type": "define",
"name": "defines.relative_gui_type.bonus_gui"
},
"burner_equipment_gui": {
"type": "define",
"name": "defines.relative_gui_type.burner_equipment_gui"
},
"car_gui": {
"type": "define",
"name": "defines.relative_gui_type.car_gui"
},
"constant_combinator_gui": {
"type": "define",
"name": "defines.relative_gui_type.constant_combinator_gui"
},
"container_gui": {
"type": "define",
"name": "defines.relative_gui_type.container_gui"
},
"controller_gui": {
"type": "define",
"name": "defines.relative_gui_type.controller_gui"
},
"decider_combinator_gui": {
"type": "define",
"name": "defines.relative_gui_type.decider_combinator_gui"
},
"deconstruction_item_gui": {
"type": "define",
"name": "defines.relative_gui_type.deconstruction_item_gui"
},
"electric_energy_interface_gui": {
"type": "define",
"name": "defines.relative_gui_type.electric_energy_interface_gui"
},
"electric_network_gui": {
"type": "define",
"name": "defines.relative_gui_type.electric_network_gui"
},
"entity_variations_gui": {
"type": "define",
"name": "defines.relative_gui_type.entity_variations_gui"
},
"entity_with_energy_source_gui": {
"type": "define",
"name": "defines.relative_gui_type.entity_with_energy_source_gui"
},
"equipment_grid_gui": {
"type": "define",
"name": "defines.relative_gui_type.equipment_grid_gui"
},
"furnace_gui": {
"type": "define",
"name": "defines.relative_gui_type.furnace_gui"
},
"generic_on_off_entity_gui": {
"type": "define",
"name": "defines.relative_gui_type.generic_on_off_entity_gui"
},
"heat_interface_gui": {
"type": "define",
"name": "defines.relative_gui_type.heat_interface_gui"
},
"infinity_pipe_gui": {
"type": "define",
"name": "defines.relative_gui_type.infinity_pipe_gui"
},
"inserter_gui": {
"type": "define",
"name": "defines.relative_gui_type.inserter_gui"
},
"item_with_inventory_gui": {
"type": "define",
"name": "defines.relative_gui_type.item_with_inventory_gui"
},
"lab_gui": {
"type": "define",
"name": "defines.relative_gui_type.lab_gui"
},
"lamp_gui": {
"type": "define",
"name": "defines.relative_gui_type.lamp_gui"
},
"linked_container_gui": {
"type": "define",
"name": "defines.relative_gui_type.linked_container_gui"
},
"loader_gui": {
"type": "define",
"name": "defines.relative_gui_type.loader_gui"
},
"logistic_gui": {
"type": "define",
"name": "defines.relative_gui_type.logistic_gui"
},
"market_gui": {
"type": "define",
"name": "defines.relative_gui_type.market_gui"
},
"mining_drill_gui": {
"type": "define",
"name": "defines.relative_gui_type.mining_drill_gui"
},
"other_player_gui": {
"type": "define",
"name": "defines.relative_gui_type.other_player_gui"
},
"permissions_gui": {
"type": "define",
"name": "defines.relative_gui_type.permissions_gui"
},
"pipe_gui": {
"type": "define",
"name": "defines.relative_gui_type.pipe_gui"
},
"power_switch_gui": {
"type": "define",
"name": "defines.relative_gui_type.power_switch_gui"
},
"production_gui": {
"type": "define",
"name": "defines.relative_gui_type.production_gui"
},
"programmable_speaker_gui": {
"type": "define",
"name": "defines.relative_gui_type.programmable_speaker_gui"
},
"rail_chain_signal_gui": {
"type": "define",
"name": "defines.relative_gui_type.rail_chain_signal_gui"
},
"rail_signal_gui": {
"type": "define",
"name": "defines.relative_gui_type.rail_signal_gui"
},
"reactor_gui": {
"type": "define",
"name": "defines.relative_gui_type.reactor_gui"
},
"rename_stop_gui": {
"type": "define",
"name": "defines.relative_gui_type.rename_stop_gui"
},
"resource_entity_gui": {
"type": "define",
"name": "defines.relative_gui_type.resource_entity_gui"
},
"roboport_gui": {
"type": "define",
"name": "defines.relative_gui_type.roboport_gui"
},
"rocket_silo_gui": {
"type": "define",
"name": "defines.relative_gui_type.rocket_silo_gui"
},
"server_config_gui": {
"type": "define",
"name": "defines.relative_gui_type.server_config_gui"
},
"spider_vehicle_gui": {
"type": "define",
"name": "defines.relative_gui_type.spider_vehicle_gui"
},
"splitter_gui": {
"type": "define",
"name": "defines.relative_gui_type.splitter_gui"
},
"standalone_character_gui": {
"type": "define",
"name": "defines.relative_gui_type.standalone_character_gui"
},
"storage_tank_gui": {
"type": "define",
"name": "defines.relative_gui_type.storage_tank_gui"
},
"tile_variations_gui": {
"type": "define",
"name": "defines.relative_gui_type.tile_variations_gui"
},
"train_gui": {
"type": "define",
"name": "defines.relative_gui_type.train_gui"
},
"train_stop_gui": {
"type": "define",
"name": "defines.relative_gui_type.train_stop_gui"
},
"trains_gui": {
"type": "define",
"name": "defines.relative_gui_type.trains_gui"
},
"transport_belt_gui": {
"type": "define",
"name": "defines.relative_gui_type.transport_belt_gui"
},
"upgrade_item_gui": {
"type": "define",
"name": "defines.relative_gui_type.upgrade_item_gui"
},
"wall_gui": {
"type": "define",
"name": "defines.relative_gui_type.wall_gui"
}
}
},
"render_mode": {
"type": "define",
"properties": {
"game": {
"type": "define",
"name": "defines.render_mode.game"
},
"chart": {
"type": "define",
"name": "defines.render_mode.chart"
},
"chart_zoomed_in": {
"type": "define",
"name": "defines.render_mode.chart_zoomed_in"
}
}
},
"rich_text_setting": {
"type": "define",
"properties": {
"enabled": {
"type": "define",
"name": "defines.rich_text_setting.enabled"
},
"disabled": {
"type": "define",
"name": "defines.rich_text_setting.disabled"
},
"highlight": {
"type": "define",
"name": "defines.rich_text_setting.highlight"
}
}
},
"riding": {
"type": "define",
"properties": {
"acceleration": {
"type": "define",
"properties": {
"nothing": {
"type": "define",
"name": "defines.riding.acceleration.nothing"
},
"accelerating": {
"type": "define",
"name": "defines.riding.acceleration.accelerating"
},
"braking": {
"type": "define",
"name": "defines.riding.acceleration.braking"
},
"reversing": {
"type": "define",
"name": "defines.riding.acceleration.reversing"
}
}
},
"direction": {
"type": "define",
"properties": {
"left": {
"type": "define",
"name": "defines.riding.direction.left"
},
"straight": {
"type": "define",
"name": "defines.riding.direction.straight"
},
"right": {
"type": "define",
"name": "defines.riding.direction.right"
}
}
}
}
},
"shooting": {
"type": "define",
"properties": {
"not_shooting": {
"type": "define",
"name": "defines.shooting.not_shooting"
},
"shooting_enemies": {
"type": "define",
"name": "defines.shooting.shooting_enemies"
},
"shooting_selected": {
"type": "define",
"name": "defines.shooting.shooting_selected"
}
}
},
"signal_state": {
"type": "define",
"doc": "State of an ordinary rail signal.",
"properties": {
"open": {
"type": "define",
"name": "defines.signal_state.open",
"doc": "Green."
},
"closed": {
"type": "define",
"name": "defines.signal_state.closed",
"doc": "Red."
},
"reserved": {
"type": "define",
"name": "defines.signal_state.reserved",
"doc": "Orange."
},
"reserved_by_circuit_network": {
"type": "define",
"name": "defines.signal_state.reserved_by_circuit_network",
"doc": "Red - From circuit network."
}
}
},
"train_state": {
"type": "define",
"properties": {
"on_the_path": {
"type": "define",
"name": "defines.train_state.on_the_path",
"doc": "Normal state -- following the path."
},
"path_lost": {
"type": "define",
"name": "defines.train_state.path_lost",
"doc": "Had path and lost it -- must stop."
},
"no_schedule": {
"type": "define",
"name": "defines.train_state.no_schedule",
"doc": "Doesn't have anywhere to go."
},
"no_path": {
"type": "define",
"name": "defines.train_state.no_path",
"doc": "Has no path and is stopped."
},
"arrive_signal": {
"type": "define",
"name": "defines.train_state.arrive_signal",
"doc": "Braking before a rail signal."
},
"wait_signal": {
"type": "define",
"name": "defines.train_state.wait_signal",
"doc": "Waiting at a signal."
},
"arrive_station": {
"type": "define",
"name": "defines.train_state.arrive_station",
"doc": "Braking before a station."
},
"wait_station": {
"type": "define",
"name": "defines.train_state.wait_station",
"doc": "Waiting at a station."
},
"manual_control_stop": {
"type": "define",
"name": "defines.train_state.manual_control_stop",
"doc": "Switched to manual control and has to stop."
},
"manual_control": {
"type": "define",
"name": "defines.train_state.manual_control",
"doc": "Can move if user explicitly sits in and rides the train."
}
}
},
"transport_line": {
"type": "define",
"properties": {
"left_line": {
"type": "define",
"name": "defines.transport_line.left_line"
},
"right_line": {
"type": "define",
"name": "defines.transport_line.right_line"
},
"left_underground_line": {
"type": "define",
"name": "defines.transport_line.left_underground_line"
},
"right_underground_line": {
"type": "define",
"name": "defines.transport_line.right_underground_line"
},
"secondary_left_line": {
"type": "define",
"name": "defines.transport_line.secondary_left_line"
},
"secondary_right_line": {
"type": "define",
"name": "defines.transport_line.secondary_right_line"
},
"left_split_line": {
"type": "define",
"name": "defines.transport_line.left_split_line"
},
"right_split_line": {
"type": "define",
"name": "defines.transport_line.right_split_line"
},
"secondary_left_split_line": {
"type": "define",
"name": "defines.transport_line.secondary_left_split_line"
},
"secondary_right_split_line": {
"type": "define",
"name": "defines.transport_line.secondary_right_split_line"
}
}
},
"wire_connection_id": {
"type": "define",
"properties": {
"electric_pole": {
"type": "define",
"name": "defines.wire_connection_id.electric_pole"
},
"power_switch_left": {
"type": "define",
"name": "defines.wire_connection_id.power_switch_left"
},
"power_switch_right": {
"type": "define",
"name": "defines.wire_connection_id.power_switch_right"
}
}
},
"wire_type": {
"type": "define",
"properties": {
"red": {
"type": "define",
"name": "defines.wire_type.red"
},
"green": {
"type": "define",
"name": "defines.wire_type.green"
},
"copper": {
"type": "define",
"name": "defines.wire_type.copper"
}
}
}
}